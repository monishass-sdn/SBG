//AuthorName:CHITRA V
//File:Schedule Controller.js
//Module:Manage Schedule
//Created Date:11.05.2021
//Purpose:To Manage Schedule

/***************************************************Import Packages and ViewModels Section******************************** */
const Schedule = require('../models/ScheduleModel')
const Boats = require('../models/AddBoatModel')
const manageBoat = require('../models/ManageOwnerModel')
const OwnerPartialCancelation = require('../models/Ownerpartialcancelations');
const EditCancelDays = require('../models/EditCancelDays');
const FreePartialCancel = require('../models/FreePartialCancel');
const mongoose = require("mongoose")
const moment = require('moment');
const momentTimezone = require('moment-timezone');
const async = require('async');
const consecutive = require('../models/ConsecutiveDaysModel');
const PreLaunchAndLaunchBookingDays = require('../models/BookingDaysForLaunchPreLaunchModels')
const OwnerBooking_Days = require('../models/OwnerBookingDates');
const AddStandByBooking = require('../models/AddStandByBookingModel')
var loginData = require('../EmailCredentials');
const { gmail: { host, pass } } = loginData;
const nodemailer = require('nodemailer')
const Add_Special_Days = require('../models/AddSpecialDaysModel')
const Booking_Special_Days = require('../models/SpecialDayBookingModel')
const NewOwners = require('../models/AddOwnerModel');
const log1 = require('../models/LoginModel');
const Duration = require("../models/OwnershipDuration");
const {getDaysBetweenDatesWithoutYearDay,dateCheck,CheckDaynames,getLastdayOfmonth,getFirstDayOfMonth,getCurrentTimeFormattedDate, dateToStr, getNormalDate, getDaysBetweenDatesDayFirst, getDaysBetweenDatesYearFirst, getDaysBetweenDates, getNumberOfWeekDaysAndWeekendsFromDates, getBookingIsFromWhichSeasonBasedOnStartDate, getCurrentTimeFormatted, getDaysBetweenDatesFormat, getDaysBetweenDatesWithoutYear } = require("../util/dateHelper");
const No_OfCleans = require('../models/NumberOfCleansModel');
const partialCancel = require('../models/PartialCancellationModel');
const TotalNoCancellations = require('../models/NumberOfCancellation');
const nextBookinDayModel = require('../models/NextBookingModel');
const schedule = require('node-schedule');
const tzOffset = require("tz-offset");
const cronModel = require('../models/CronModel');
const { validateIsLOAInclued } = require("../validations/scheduleValidations");
const OwnerStandByCancelModel = require("../models/OwnerStandByCancelModel");
const transporter = require('../email/transporter');
const getEmailTemplate = require('../email/emailTemplate');
const { cancelrues, cancelStandbyrules } = require('./cancelrules');
const { response } = require('express');
const { debug, Console, count } = require('console');

//const Bookeddays=require('../models/BookedDaysForOwner');
/***************************************************Import Methods and Functions******************************** */
// Function for Add AdminBooking
async function GetNextBookingID() {

    try {
        //  Schedule.find().count( async function(err, count){    
        const [result] = await Schedule.find({}, null, { sort: { Booking_ID: -1 }, limit: 1 })
        if (result && result.Booking_ID) {

            return result.Booking_ID + 1;
        }

        return 1001;
    }




    catch (err) {
        return 'error occured';
    }

}



const AddSchedule = async (req, res, next) => {
  
  

    try {

        //var ccccc = moment(req.body.start).format('MMM DD h:mm A');
        const globalbookingid = await GetNextBookingID();
        var check_Status = req.body.Check_Status;
        var Total_Count = Number(req.body.TotalDay_Count);
        var WeekDay_Count = Number(req.body.WeekDay_Count);
        var WeekEnd_Count = Number(req.body.WeekEnd_Count);
        var User_role = req.body.User_RoleType;
        var Boat_id = req.body.Boat_Id;
        var Owner_id = req.body.User_Id;
        var start_Date = req.body.start;
        var Noofcleans = 1;
        var PendingSummerWeekdays = Number(req.body.summer_Winter_Calc.PENDING_SUMMER_WEEKDAYS);
        var PendingSummerWeekEnddays = Number(req.body.summer_Winter_Calc.PENDING_SUMMER_WEEKENDS);
        var PendingWinterWeekdays = Number(req.body.summer_Winter_Calc.PENDING_WINTER_WEEKDAYS);
        var PendingWinterWeekenddays = Number(req.body.summer_Winter_Calc.PENDING_WINTER_WEEKENDS);



        //var specialDayCheck=0;//special day
        var specialDayCheck = req.body.specialDayCheck;//special day
        var end_Date = req.body.end;

        /* Check Onwr duration */
        if (User_role == "Owner") {

         let getOwnerStatus = await NewOwners.findOne({_id:mongoose.Types.ObjectId(Owner_id)},{Status:1}).catch((error)=> console.log(error));
         if((getOwnerStatus.Status == 2)||(getOwnerStatus.Status == 0))
         return res.json({
            status: false,
            message: 'Permission Denied'
        }) 

            let TodatCuntDate = new Date();
            let todayDateStr = dateToStr(TodatCuntDate);

            let prevCancel = await EditCancelDays.find({ Owner_Id: mongoose.Types.ObjectId(Owner_id), Boat_Id: mongoose.Types.ObjectId(Boat_id), cancelexpiretimeStr: { $gte: todayDateStr } }).catch((error) => console.log(error));

            if (prevCancel) {

                var PrevcanceDays = [];

                prevCancel.map((item) => {
                    var stringDst = item.cancaledDays;
                    stringDst.map((items) => { PrevcanceDays.push(items) });
                });



             
                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(start_Date, end_Date);
                console.log(CurentBookBetweenDays);
                let intersection = PrevcanceDays.filter(canceldVal => CurentBookBetweenDays.includes(canceldVal));

                if ((intersection.length) > 0)

                    return res.json({
                        status: false,
                        message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                    })

            }

            let userEnddate = momentTimezone(end_Date).tz(process.env.TIME_ZONE).format();
            let EdndateWithouttime = moment(userEnddate);

            let ownerdurationCheck = await Duration.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,IsActive:true }).catch((error) => console.log(error));
            if (!ownerdurationCheck || ownerdurationCheck == null) {

                return res.json({
                    status: false,
                    message: 'Please set Ownership duration'
                });

            } else {

              
                let userEnddate = momentTimezone(end_Date).tz(process.env.TIME_ZONE).format();
                let AusUserenddate = moment(userEnddate);
                 AusUserenddate.startOf('day');

                 let userStartDate = momentTimezone(start_Date).tz(process.env.TIME_ZONE).format();
                 let AususerStartDate = moment(userStartDate);
                 AususerStartDate.startOf('day');

                 


                 if(AususerStartDate < ownerdurationCheck.From_Date || AusUserenddate > ownerdurationCheck.To_Date){

                    return res.json({
                        status: false,
                        message: 'These dates are not available..'
                    });

                 }


               

            }

            /* check boat is suspended */
            let suspendcheck = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));

            if (suspendcheck.Block == false)
                return res.json({
                    status: false,
                    message: 'Suspended'
                })




        }






        var TodaysDate = moment();
        var CurrentDate = moment(TodaysDate).format('DD-MM-YYYY');


        
        var Start_final = moment(start_Date);
        console.log(Start_final, 'checkkk1')
        var Start_final_withoutTime = Start_final.startOf('day');

       
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');

        //**  Check Booking is in same month or not ***//

        let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
  
        let getanniversary = new Date(AnniversaryDate.Launch_Date);
        let anni_month = (getanniversary.getMonth())+1;

            var startyear = new Date(Start_final_withoutTime);
            var Start_Month = (startyear.getMonth(startyear))+1;

            var endyear = new Date(End_final_withoutTime);
            var End_Month = (endyear.getMonth(endyear))+1;

           

        if((Start_Month<anni_month)&&(End_Month>=anni_month) || (Start_Month>anni_month)&&(End_Month==anni_month)){

           var MonthBookingStatus =1;

        }else{

            var getBookedyear = new Date(req.body.start);
            var YearOne = getBookedyear.getFullYear();
            var MonthOne = getBookedyear.getMonth()+1;
            var nextYearBook = (parseInt(YearOne)+1);
            if(MonthOne<anni_month)
            var exp_year = ""+YearOne+anni_month;
            else
            var exp_year =""+nextYearBook+anni_month;

            var MonthBookingStatus =0;


        }

        var dif = Start_final.diff(moment(), 'days')
       
        if (req.body.Status == "Enable") {

            var Module_status = 1;
        }
        else if (req.body.Status == "Disable") {
            var Module_status = 0;
        }

        //get month
        const Getmonth = new Date(Start_final);
        LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });
        //getmonth

        //check if any of the incoming dates already booked

        let allDaysBetweenStartAndEndOfIncomingBooking = getDaysBetweenDates(start_Date, end_Date);



        if (allDaysBetweenStartAndEndOfIncomingBooking.length != 0) {

            let queryToCheckExistingBooking = []

            allDaysBetweenStartAndEndOfIncomingBooking.map((date) => queryToCheckExistingBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }))

            const existingNormalBooking = await Schedule.findOne({ IsActive: true, isBookingPending: false, Boat_Id: Boat_id, $or: queryToCheckExistingBooking })

            if (existingNormalBooking) {
                return res.json({
                    status: true,
                    message: 'An existing booking already exists for this date. A new booking cannot be created'
                })
            }
           
           // let standByBookingCheck = await AddStandByBooking.findOne({ Boat_Id: Boat_id, User_Id: Owner_id,BookingStatus:null,$or: queryToCheckExistingBooking })
           let standByBookingCheck = await AddStandByBooking.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, BookingStatus: { $ne: 'Rejected'},isOrginalBookingCanceled: false,$or: queryToCheckExistingBooking })

            if (standByBookingCheck) {
                return res.json({
                    status: true,
                    message: 'An existing booking already exists for this date. A new booking cannot be created'
                })
            }


        }


        ///////////////////////////////////////////////////////////////////////////////////////


        //check if booking is from launch prelaunch if it is then check consecutive days 

        const boatData = await Boats.findOne({ _id: Boat_id, IsActive: true }, { SummerSeason_SDate: 1, SummerSeason_EDate: 1, Launch_Date: 1 }).catch((error) => console.log(error));
        if (!boatData) return res.json({ status: false, message: "Invalid boat." });

        if (User_role != 'Admin' && User_role != 'Maintenance')

            await checkPrelaunchLaunchConsecutiveDays(boatData.Launch_Date, req.body.start, req.body.end, Boat_id, Owner_id)


        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //check if incomig booking has any stand by booking before incoming booking for this owner

        let dayBeforeIncomingBooking = new Date(new Date(new Date(start_Date).setDate(new Date(start_Date).getDate() - 1)).setUTCHours(00, 00, 00, 00));

        console.log(dayBeforeIncomingBooking)

        let standByBooking = await AddStandByBooking.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, BookingStatus: null, $and: [{ start_NoTime: { $lte: dayBeforeIncomingBooking } }, { end_NoTime: { $gte: dayBeforeIncomingBooking } }] }).catch((error) => console.log(error))

   
        if (standByBooking) {

            console.log("standby booking before this booking found")

            // check consecutive days and if the booking exceeds consecutive day throw an error

            //decide booking is from summer or winter


            if (!boatData) return res.json({ status: false, message: "Invalid boat." });

            const consecutiveDays = await consecutive.findOne({ Boat_Id: Boat_id, IsActive: true }).catch((error) => console.log(error))

            if (!consecutiveDays) return res.json({ status: false, message: "Set consecutive days." })


            //total days booked

            let incomingTotalDays = moment(new Date(req.body.end)).diff(moment(new Date(req.body.start)), "days") + 1;
            incomingTotalDays += moment(new Date(standByBooking.end_NoTime)).diff(moment(new Date(standByBooking.start_NoTime)), "days") + 1


            //check if there is a booking before standby booking if include that days to total day

            let dayBeforeStandByBooking = new Date(new Date(new Date(standByBooking.start).setDate(new Date(standByBooking.start).getDate() - 1)).setUTCHours(00, 00, 00, 00));

            let bookingBeforeStandByBooking = await Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: true, $and: [{ start_NoTime: { $lte: dayBeforeStandByBooking } }, { end_NoTime: { $gte: dayBeforeStandByBooking } }] }).catch((error) => console.log(error))

            if (bookingBeforeStandByBooking) {
                incomingTotalDays += moment(new Date(bookingBeforeStandByBooking.end_NoTime)).diff(moment(new Date(bookingBeforeStandByBooking.start_NoTime)), "days") + 1
            }

            console.log(incomingTotalDays, "incomingTotalDays one")


            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(boatData.SummerSeason_SDate, boatData.SummerSeason_EDate, req.body.start) || {};



            if (isIncludedInSummer) {
                if (incomingTotalDays > consecutiveDays.Summer_ConsecutiveDays) return res.json({ status: false, message: "The booking exceeds the maximum booking duration. Please try to create a booking with fewer days." });
            } else {
                if (incomingTotalDays > consecutiveDays.Winter_ConsecutiveDays) return res.json({ status: false, message: "The booking exceeds the maximum booking duration. Please try to create a booking with fewer days." });
            }

        }

        //check if the booking is a canceled stand by booking by incoming owner


        let allDaysBetweenStartAndEnd = getDaysBetweenDates(req.body.start, req.body.end)

        if (allDaysBetweenStartAndEnd.length != 0) {


            let queryToCheckCanceledStandByBooking = []

            allDaysBetweenStartAndEnd.map((date) => queryToCheckCanceledStandByBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }))

            let isCanceledStandByBooking = await OwnerStandByCancelModel.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, $or: queryToCheckCanceledStandByBooking }).catch((error) => {
                console.log(error)
            })

            if (isCanceledStandByBooking) return res.json({ status: true, message: "You are trying to book a canceled stand by booking ." })


        }



        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
            .then(OwnerDetails => {

                if (!OwnerDetails) OwnerDetails = {}

                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                    .then(async(boatDetails) => {

                        let bookingType = getBookingTypeofAbooking(req.body.start, req.body.end, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);


                        if (boatDetails.Boat_Status == "1")//check whether boat is Active or not
                        {
                            //between Launch And PreLuanch

                            if (check_Status == "1" && specialDayCheck == 0) {

                                console.log("Inside launch prelaunch")



                                console.log(dif, 'diffff')
                                if (dif >= 0) {

                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then(Checkresult => {
                                        console.log(Checkresult.length, 'length')
                                        var _LengthCheck = Checkresult.length;

                                        // _LengthCheck==0       

                                        console.log(Checkresult)



                                        console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')
                                        PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then(bookingDays => {

                                          

                                            var b_days = bookingDays.Booking_Days;
                                            var WeekdaysAllowed = bookingDays.No_Of_WeekDays;
                                            var WeekEndsAllowed = bookingDays.No_Of_WeekEndDays;
                                            console.log(b_days)
                                            console.log(Total_Count)

                                            ////  Commeneted Raga 3-10-21
                                            /* if(Total_Count<=b_days)
                                             {*/
                                            // if(WeekDay_Count<=WeekdaysAllowed && WeekEnd_Count<=WeekEndsAllowed )
                                            //{
                                            console.log('PreLanuch Condition')


                                            Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                console.log(result.length, 'length')
                                                var _Length = result.length;
                                                if (_Length == 0) {
                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                        if (result2 == null) {
                                                            console.log('hi1')
                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                if (results == null) {
                                                                    console.log('hi2')
                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {

                                                                        if (results == null) {
                                                                            console.log('hi3')

                                                                            //Add 
                                                                            console.log('Admin')
                                                                            let Add_Schedule = new Schedule({

                                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                Booking_ID: globalbookingid,
                                                                                Boat_Name: req.body.Boat_Name,
                                                                                Total_DaysBooked: Total_Count,
                                                                                WeekDay_Count: WeekDay_Count,
                                                                                WeekEnd_Count: WeekEnd_Count,
                                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                title: req.body.title,
                                                                                body: req.body.body,
                                                                                start: req.body.start,
                                                                                end: req.body.end,
                                                                                start_NoTime: Start_final_withoutTime,
                                                                                end_NoTime: End_final_withoutTime,
                                                                                goingDuration: req.body.goingDuration,
                                                                                comingDuration: req.body.comingDuration,
                                                                                isAllDay: req.body.isAllDay,
                                                                                category: req.body.category,
                                                                                dueDateClass: req.body.dueDateClass,
                                                                                location: req.body.location,
                                                                                attendees: req.body.attendees,
                                                                                recurrenceRule: req.body.recurrenceRule,
                                                                                isPending: req.body.isPending,
                                                                                isFocused: req.body.isFocused,
                                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                isVisible: req.body.isVisible,
                                                                                isReadOnly: req.body.isReadOnly,
                                                                                isPrivate: req.body.isPrivate,
                                                                                color: req.body.color,
                                                                                bgColor: req.body.bgColor,
                                                                                dragBgColor: req.body.dragBgColor,
                                                                                borderColor: req.body.borderColor,
                                                                                customStyle: req.body.customStyle,
                                                                                raw: req.body.raw,
                                                                                state: req.body.state,
                                                                                Check_Status: req.body.Check_Status,
                                                                                commends: req.body.commends,
                                                                                Check_Month: LaunchPreMonth,
                                                                                User_RoleType: req.body.User_RoleType,
                                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                Status: Module_status,
                                                                                IsActive: req.body.IsActive,
                                                                                Current_Time: moment(Date.now()),
                                                                                Updated_time: moment(Date.now()),
                                                                                Total_DaysBooked_Reassign: 0,
                                                                                WeekDay_Count_Reassign: 0,
                                                                                WeekEnd_Count_Reassign: 0,
                                                                                Booking_Type: bookingType

                                                                            });

                                                                            Add_Schedule.save()
                                                                                .then(async (response) => {
                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => {
                                                                                        console.log(error)
                                                                                        console.log(isCleanDay)
                                                                                    })
                                                                                    //mail

                                                                                    const emailState = 'Successfully Booked.';
                                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date)} 9:00 AM has been successfully added by the Smart Boating Team</p>`;
                                                                                    const emailContentAdmin = `Dear Adminsistrator, <p>The Smart Boating Team has successfully created a booking for ${OwnerDetails.First_Name} on ${boatDetails.Boat_Name} at  ${getCurrentTimeFormattedDate(start_Date)+ "9:00 AM"}</p>`
                                                                                    const emailDetailName = 'Booking Details'
                                                                                    const emailDetails = [
                                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(req.body.start) + "9:00 AM to " + getCurrentTimeFormattedDate(req.body.end)+"5:00 PM" },
                                                                                    ];
                                                                                    const emailNameAndLink = {
                                                                                        name: 'Booking Link',
                                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                    }


                                                                                    var mailOptions = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: OwnerDetails.Email,
                                                                                        subject: 'Successfully Booked',
                                                                                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)

                                                                                    };

                                                                                    transporter.sendMail(mailOptions, function (error, info) {

                                                                                    });

                                                                                    var mailOptionsAdmin = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: "admin@smartboating.com.au",
                                                                                        subject: 'Successfully Booked',
                                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                    };

                                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                    });
                                                                                    //mail

                                                                                    res.json({

                                                                                        status: true,
                                                                                        message: 'The booking has been successfully created'
                                                                                    })
                                                                                })
                                                                                .catch(error => {
                                                                                    console.log(error, "error")
                                                                                    res.json({
                                                                                        message: "Something went wrong while booking. try again."
                                                                                    })
                                                                                })

                                                                        }
                                                                        else {
                                                                            res.json({

                                                                                status: true,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })

                                                                        }



                                                                    })
                                                                    //Add
                                                                }
                                                                else {
                                                                    res.json({

                                                                        status: true,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })

                                                                }
                                                            })
                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })
                                                        }
                                                    })
                                                }
                                                else {
                                                    res.json({

                                                        status: true,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.7777'
                                                    })
                                                }
                                            })
                                            // }
                                            /* else
                                             {
                             
                                                res.json({
                             
                                                    status:true,
                                                    message: 'Only '  +WeekdaysAllowed +' WeekDays and ' +WeekEndsAllowed  +' WeekendDays are allowed Between launch Date And Pre-Launch Date'
                                                })
                                             }*/ ///  commented Raga 30-10-21
                                            //}
                                            /* else
                                             {
                                                res.json({
                                     
                                                    status:true,
                                                    message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date'
                                                })
                                             }*///// commented Raga 30-10-21
                                        })


                                    })
                                }
                                else {
                                    console.log('inside between Launch And PreLuanch')
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })

                                }

                            }

                            //between Launch And PreLaunch


                            //After Launch before current date

                            if (check_Status == "2" && specialDayCheck == 0) {
                                if (dif >= 0) {

                                    Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                    {

                                        if (Cancelresults == null) {


                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                console.log(result.length, 'length')
                                                var _Length = result.length;
                                                if (_Length == 0) {
                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                        if (result2 == null) {

                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                if (results == null) {

                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(async(response) => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                    //console.log(Boatresults)


                                                                                    //list all summer start and end date of  owne  based on owner duration  duration which include all year
                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })

                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }

                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return

                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){

                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })

                                                                                        }

                                                                                    

                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        if(SummerConsecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                
                                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));

                                                                                                let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully created'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }
                                                                                    else if(isAvailableDay.type=="winter"){

                                                                                        if(WinterConsecutiveDays>=Total_Count){
                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });

                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter")
                                                                                                    
                                                                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
    
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
    
                                                                                                    }

                                                                                            }else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
                                                                                        }

                                                                                    }
                                                                                    else if(isAvailableDay.type=="both"){

                                                                                        if(isAvailableDay.bookingType == "Summer booking")
                                                                                        var consecutiveCount = SummerConsecutiveDays;
                                                                                        else
                                                                                        var consecutiveCount = WinterConsecutiveDays;

                                                                                        if(consecutiveCount>Total_Count){

                                                                                        
                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                        var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                        

                                                                                        if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });

                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                      
                                                                                                  


                                                                                                    if(MonthBookingStatus ==1){
                                                                                                        
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        


                                                                                                    }
                                                                                                    
                                                                                                    else{
                                                                                                        

                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                        var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                    }
                                                                                                        let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
        
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
        
                                                                                                        }
    

                                                                                                    
                                                                                                    
                                                                                                    

                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }
                                                                                        
                                                                                        
                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                        

                                                                                    }

                                                                              });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })
                                                                }
                                                                else {

                                                                    res.json({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })

                                                                }

                                                            })
                                                        }
                                                        else {
                                                            res.json({
                                                                status: false,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }


                                                    });//else inside function owner


                                                }
                                                else {
                                                    res.json({
                                                        status: false,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                    })
                                                }

                                            });

                                        }
                                        else {

                                            
                                            var todaysdate = moment();
                                           
                                            var canceldate = moment(Cancelresults.Updated_time)
                                            var dif = moment.duration(todaysdate.diff(canceldate));
                                            
                                            var Hrdif = Math.round(dif.asHours());

                                           


                                            if (Hrdif > 24) {

                                                Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                    console.log(result.length, 'length')
                                                    var _Length = result.length;
                                                    if (_Length == 0) {
                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                            if (result2 == null) {

                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                    if (results == null) {

                                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(async(response) => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })


                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
                                                                                        let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return
                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){

                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })

                                                                                        }

                                                                                        if(isAvailableDay.type=="summer"){

                                                                                            if(SummerConsecutiveDays>=Total_Count){
                                                                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){

                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                    
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
    
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
    
                                                                                                    }

                                                                                                }else{

                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })

                                                                                                }

                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }
                                                                                        else if(isAvailableDay.type=="winter"){
                                                                                            if(WinterConsecutiveDays>=Total_Count){
                                                                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter")
                                                                                                    
                                                                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
    
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
    
                                                                                                    }
                                                                                                }else{

                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })

                                                                                                }
                                                                                            }else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }
                                                                                        }
                                                                                        else if(isAvailableDay.type=="both"){

                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
    
                                                                                            if(consecutiveCount>Total_Count){
    
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            
    
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                          
                                                                                                        
    
    
    
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id,start_Date, end_Date,anni_month);
                                                                                                           
    
    
                                                                                                        }
                                                                                                        
                                                                                                        else{
                                                                                                            
    
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                            let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                    
                                                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
            
                                                                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
            
                                                                                                            if(MailSend){
            
                                                                                                                res.json({
            
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully created'
                                                                                                                })
            
                                                                                                            }
        
    
                                                                                                        }
    
                                                                                                        
                                                                                                        
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }

                                                                                        }

                                            


                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })
                                                                    }
                                                                    else {

                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })

                                                                    }

                                                                })
                                                            }
                                                            else {
                                                                res.json({
                                                                    status: false,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }


                                                        });//else inside function owner


                                                    }
                                                    else {
                                                        res.json({
                                                            status: false,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })
                                                    }

                                                });
                                            }
                                            else {
                                                res.json({
                                                    status: false,
                                                    message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                })
                                            }

                                        }
                                    })

                                }
                                else {
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })
                                }
                            }



                            //after launch
                            if (check_Status == "3" && specialDayCheck == 0) {

                                if (dif >= 0)//for Previous Date
                                {

                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            var _Length = result.length;
                                            if (_Length == 0) {
                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                    if (result2 == null) {

                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                            if (results == null) {
                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                    if (results == null) {


                                                                        //Add 
                                                                        console.log('Admin')
                                                                        let Add_Schedule = new Schedule({



                                                                            Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                            Booking_ID: globalbookingid,
                                                                            Boat_Name: req.body.Boat_Name,
                                                                            Total_DaysBooked: Total_Count,
                                                                            WeekDay_Count: WeekDay_Count,
                                                                            WeekEnd_Count: WeekEnd_Count,
                                                                            calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                            title: req.body.title,
                                                                            body: req.body.body,
                                                                            start: req.body.start,
                                                                            end: req.body.end,
                                                                            start_NoTime: Start_final_withoutTime,
                                                                            end_NoTime: End_final_withoutTime,
                                                                            goingDuration: req.body.goingDuration,
                                                                            comingDuration: req.body.comingDuration,
                                                                            isAllDay: req.body.isAllDay,
                                                                            category: req.body.category,
                                                                            dueDateClass: req.body.dueDateClass,
                                                                            location: req.body.location,
                                                                            attendees: req.body.attendees,
                                                                            recurrenceRule: req.body.recurrenceRule,
                                                                            isPending: req.body.isPending,
                                                                            isFocused: req.body.isFocused,
                                                                            isVisible: req.body.isVisible,
                                                                            isReadOnly: req.body.isReadOnly,
                                                                            isPrivate: req.body.isPrivate,
                                                                            color: req.body.color,
                                                                            bgColor: req.body.bgColor,
                                                                            Is_StandByBooking: req.body.Is_StandByBooking,
                                                                            Check_Status: req.body.Check_Status,
                                                                            commends: req.body.commends,
                                                                            dragBgColor: req.body.dragBgColor,
                                                                            borderColor: req.body.borderColor,
                                                                            customStyle: req.body.customStyle,
                                                                            raw: req.body.raw,
                                                                            state: req.body.state,
                                                                            User_RoleType: req.body.User_RoleType,
                                                                            User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                            Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                            Status: Module_status,
                                                                            IsActive: req.body.IsActive,
                                                                            Current_Time: moment(Date.now()),
                                                                            Updated_time: moment(Date.now()),
                                                                            Total_DaysBooked_Reassign: Total_Count,
                                                                            WeekDay_Count_Reassign: WeekDay_Count,
                                                                            WeekEnd_Count_Reassign: WeekEnd_Count,
                                                                            Booking_Type: bookingType

                                                                        });

                                                                        Add_Schedule.save()
                                                                            .then(async (response) => {
                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => {
                                                                                    console.log(error)
                                                                                    console.log(isCleanDay)
                                                                                })
                                                                                //mail
                                                                                const emailState = 'Successfully Booked.';
                                                                                const emailContentAdmin = `Dear Adminsistrator,<p>The Smart Boating Team has successfully created a booking for ${OwnerDetails.First_Name} on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date)+" 9:00 AM"}</p>`
                                                                                const emailDetailName = 'Booking Details'
                                                                                const emailDetails = [
                                                                                    { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                    { key: 'Booking Date', value: getCurrentTimeFormattedDate(req.body.start) + " 9:00 AM to " + getCurrentTimeFormattedDate(req.body.end)+" 5:00 PM" },
                                                                                ];
                                                                                const emailNameAndLink = {
                                                                                    name: 'Booking Link',
                                                                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                }


                                                                                var mailOptionsAdmin = {

                                                                                    from: "noreply.smartboatbooking@gmail.com",
                                                                                    to: "admin@smartboating.com.au",
                                                                                    subject: 'Successfully Booked',
                                                                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                };

                                                                                transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                });
                                                                                //mail

                                                                                res.json({

                                                                                    status: true,
                                                                                    message: 'The admin booking has been successfully created'
                                                                                })
                                                                            })
                                                                            .catch(error => {
                                                                                console.log(error, "error")
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: "Something went wrong while booking. try again."
                                                                                })
                                                                            })

                                                                    }
                                                                    else {
                                                                        res.json({

                                                                            status: true,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })

                                                                    }



                                                                })
                                                                //Add
                                                            }
                                                            else {
                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }
                                                        })
                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })
                                                    }
                                                })
                                            }
                                            else {
                                                res.json({

                                                    status: true,
                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                })
                                            }
                                        })
                                    }

                                    else//For Owner
                                    {

                                        Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                        {

                                            if (Cancelresults == null) {


                                                console.log('Cancel1');



                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                    console.log(result.length, 'length')
                                                    var _Length = result.length;
                                                    if (_Length == 0) {
                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true, isBookingPending: false }).then(result2 => {
                                                            if (result2 == null) {

                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true, isBookingPending: false }).then(results => {
                                                                    if (results == null) {

                                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                        console.log(Boatresults)
                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })

                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }

                                                                                        let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return
                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){

                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })

                                                                                        }


                                                                                    console.log(isAvailableDay.type,"----------------isAvailableDay");

                                                                                        if(isAvailableDay.type=="summer"){

                                                                                            if(SummerConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                    
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
    
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
                                                                                        else if(isAvailableDay.type=="winter"){
    
                                                                                            if(WinterConsecutiveDays>=Total_Count){
                                                                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
    
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter")
                                                                                                        
                                                                                                        let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                    
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
        
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
        
                                                                                                        }
    
                                                                                                }else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }
    
                                                                                        }
                                                                                        else if(isAvailableDay.type=="both"){
    
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
    
                                                                                            if(consecutiveCount>=Total_Count){
    
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                             var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
    
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                          
                                                                                                       
    
    
    
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                           
    
    
                                                                                                        }
                                                                                                        
                                                                                                        else{
                                                                                                           
                                                                                
    
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                        }
                                                                                                            let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                    
                                                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
            
                                                                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
            
                                                                                                            if(MailSend){
            
                                                                                                                res.json({
            
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully created'
                                                                                                                })
            
                                                                                                            }
        
    
                                                                                                        
    
                                                                                                        
                                                                                                        
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                            
    
                                                                                        }


                                           



                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })
                                                                    }
                                                                    else {

                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })

                                                                    }

                                                                })
                                                            }
                                                            else {
                                                                res.json({
                                                                    status: false,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }


                                                        });//else inside function owner


                                                    }
                                                    else {
                                                        res.json({
                                                            status: false,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })
                                                    }

                                                });
                                            }
                                            else {

                                                //

                                               
                                                var todaysdate = moment();
                                              
                                                var canceldate = moment(Cancelresults.Updated_time)
                                                var dif = moment.duration(todaysdate.diff(canceldate));
                                              
                                                var Hrdif = Math.round(dif.asHours());

                                                

                                                if (Hrdif > 24) {
                                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                        console.log(result.length, 'length')
                                                        var _Length = result.length;
                                                        if (_Length == 0) {
                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                                if (result2 == null) {

                                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                        if (results == null) {

                                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                                if (results == null) {



                                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                                        var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                            let stopExecution = { stop: false }
                                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                                                                                                console.log(error)
                                                                                                stopExecution = error
                                                                                            })


                                                                                            if (stopExecution.stop) {
                                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                                            }

                                                                                            let isNextDaysError = false
                                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                                    isNextDaysError = true
                                                                                                    return res.json(error)
                                                                                                })


                                                                                                if (isNextDaysError) return

                                                                                                var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                                var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                                let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                                    if(element){

                                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                                    }else{

                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                                        })

                                                                                                    }

                                                                                                    if(isAvailableDay.type=="summer"){

                                                                                                        if(SummerConsecutiveDays>=Total_Count){
                
                                                                                                            //count of weekday and week end
                
                                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                {
                
                                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                                
                                                                                                                },
                                                                                                                { new: true },
                                                                                                                function (err, data) {
                                                                                                                
                                                                                                                
                                                                                                                });
                                                                                                                if(MonthBookingStatus ==1)
                                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                                else
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                                
                                                                                                                let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                                
                                                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                
                                                                                                                let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                
                                                                                                                if(MailSend){
                
                                                                                                                    res.json({
                
                                                                                                                        status: true,
                                                                                                                        message: 'The booking has been successfully created'
                                                                                                                    })
                
                                                                                                                }
                
                                                                                                                
                
                                                                                                                
                                                                                                             }
                                                                                                            else{
                
                                                                                                                res.json({
                                                                                                                    status: false,
                                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                                })
                
                                                                                                            }
                
                                                                                                        }else{
                
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                            })
                
                                                                                                        }
                
                                                                                                    }
                                                                                                    else if(isAvailableDay.type=="winter"){
                
                                                                                                        if(WinterConsecutiveDays>=Total_Count){
                                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                    {
                
                                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                
                                                                                                                    },
                                                                                                                    { new: true },
                                                                                                                    function (err, data) {
                
                
                                                                                                                    });
                
                                                                                                                    if(MonthBookingStatus ==1)
                                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                                    else
                
                                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter")
                                                                                                                    
                                                                                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                                
                                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                    
                                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                    
                                                                                                                    if(MailSend){
                    
                                                                                                                        res.json({
                    
                                                                                                                            status: true,
                                                                                                                            message: 'The booking has been successfully created'
                                                                                                                        })
                    
                                                                                                                    }
                
                                                                                                            }else{
                
                                                                                                                res.json({
                                                                                                                    status: false,
                                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                                })
                
                                                                                                            }
                
                                                                                                        }else{
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                            })
                                                                                                        }
                
                                                                                                    }
                                                                                                    else if(isAvailableDay.type=="both"){
                
                                                                                                        if(isAvailableDay.bookingType == "Summer booking")
                                                                                                        var consecutiveCount = SummerConsecutiveDays;
                                                                                                        else
                                                                                                        var consecutiveCount = WinterConsecutiveDays;
                
                                                                                                        if(consecutiveCount>Total_Count){
                
                                                                                                        
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                                        var TotalWinterDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                
                
                                                                                                        if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
                
                                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                {
                
                                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                                
                                                                                                                },
                                                                                                                { new: true },
                                                                                                                function (err, data) {
                                                                                                                
                                                                                                                
                                                                                                                });
                                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                    {
                
                                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                
                                                                                                                    },
                                                                                                                    { new: true },
                                                                                                                    function (err, data) {
                
                
                                                                                                                    });
                
                                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                          
                                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                                      
                                                                                                                   
                
                
                                                                                                                    if(MonthBookingStatus ==1){
                                                                                                                        
                                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                                        
                
                
                                                                                                                    }
                                                                                                                    
                                                                                                                    else{
                                                                                                                        
                
                                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                                        var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                                    }
                                                                                                                        let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded);
                                                                                                                
                                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                        
                                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                        
                                                                                                                        if(MailSend){
                        
                                                                                                                            res.json({
                        
                                                                                                                                status: true,
                                                                                                                                message: 'The booking has been successfully created'
                                                                                                                            })
                        
                                                                                                                        }
                    
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                    
                
                                                                                                        }else{
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                            })
                
                                                                                                        }
                                                                                                        
                                                                                                        
                                                                                                        }else{
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                            })
                
                                                                                                        }
                
                                                                                                        
                
                                                                                                    }
                    






                                                                                        });
                                                                                    })
                                                                                }
                                                                                else {
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                    })
                                                                                }

                                                                            })
                                                                        }
                                                                        else {

                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })

                                                                        }

                                                                    })
                                                                }
                                                                else {
                                                                    res.json({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })

                                                                }


                                                            });//else inside function owner


                                                        }
                                                        else {
                                                            res.json({
                                                                status: false,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })
                                                        }

                                                    });

                                                }
                                                else {
                                                    res.json({
                                                        status: false,
                                                        message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                    })
                                                } //

                                                // res.json({
                                                //     status:false,
                                                //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                                // })

                                            }
                                        })
                                    }

                                }

                                else {
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })
                                }

                            }

                            if (check_Status = "4" && User_role == "Maintenance") {
                                if (dif >= 0)//for Previous Date
                                {

                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                        console.log(result.length, 'length')
                                        var _Length = result.length;
                                        if (_Length == 0) {
                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                if (result2 == null) {

                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                        if (results == null) {
                                                            Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                if (results == null) {


                                                                    //Add 
                                                                    console.log('Admin')
                                                                    let Add_Schedule = new Schedule({



                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                        Booking_ID: globalbookingid,
                                                                        Boat_Name: req.body.Boat_Name,
                                                                        Total_DaysBooked: Total_Count,
                                                                        WeekDay_Count: WeekDay_Count,
                                                                        WeekEnd_Count: WeekEnd_Count,
                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                        title: req.body.title,
                                                                        body: req.body.body,
                                                                        start: req.body.start,
                                                                        end: req.body.end,
                                                                        start_NoTime: Start_final_withoutTime,
                                                                        end_NoTime: Start_final_withoutTime,
                                                                        goingDuration: req.body.goingDuration,
                                                                        comingDuration: req.body.comingDuration,
                                                                        isAllDay: req.body.isAllDay,
                                                                        category: req.body.category,
                                                                        dueDateClass: req.body.dueDateClass,
                                                                        location: req.body.location,
                                                                        attendees: req.body.attendees,
                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                        isPending: req.body.isPending,
                                                                        isFocused: req.body.isFocused,
                                                                        isVisible: req.body.isVisible,
                                                                        isReadOnly: req.body.isReadOnly,
                                                                        isPrivate: req.body.isPrivate,
                                                                        color: req.body.color,
                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                        Check_Status: req.body.Check_Status,
                                                                        commends: req.body.commends,
                                                                        bgColor: req.body.bgColor,
                                                                        dragBgColor: req.body.dragBgColor,
                                                                        borderColor: req.body.borderColor,
                                                                        customStyle: req.body.customStyle,
                                                                        raw: req.body.raw,
                                                                        state: req.body.state,
                                                                        User_RoleType: req.body.User_RoleType,
                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                        Status: Module_status,
                                                                        IsActive: req.body.IsActive,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now()),
                                                                        Total_DaysBooked_Reassign: Total_Count,
                                                                        WeekDay_Count_Reassign: WeekDay_Count,
                                                                        WeekEnd_Count_Reassign: WeekEnd_Count,
                                                                        Booking_Type: bookingType

                                                                    });

                                                                    Add_Schedule.save()
                                                                        .then(async (response) => {
                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => {
                                                                                console.log(error)
                                                                                console.log(isCleanDay)
                                                                            })
                                                                            //mail

                                                                            const emailState = 'Successfully Booked.';
                                                                            const emailContentAdmin = `Dear Adminsistrator,<p>The ${boatDetails.Boat_Name} has been successfully created a boat maintainance booking  on ${getCurrentTimeFormattedDate(req.body.start)+"9:00 AM"}</p>`
                                                                            const emailDetailName = 'Maintenance Details'
                                                                            const emailDetails = [
                                                                                { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                { key: 'Booking Date', value: getCurrentTimeFormattedDate(req.body.start) + " 9:00 AM to " + getCurrentTimeFormattedDate(req.body.end)+" 5:00 PM" },
                                                                            ];
                                                                            const emailNameAndLink = {
                                                                                name: 'Booking Link',
                                                                                link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                            }




                                                                            var mailOptionsAdmin = {
                                                                                from: "noreply.smartboatbooking@gmail.com",
                                                                                to: "admin@smartboating.com.au",
                                                                                subject: 'Maintainance Booking',
                                                                                html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                            };

                                                                            transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                            });
                                                                            //mail


                                                                            res.json({

                                                                                status: true,
                                                                                message: 'The boat maintenance booking has been successfully created'
                                                                            })
                                                                        })
                                                                        .catch(error => {
                                                                            console.log(error, "error")
                                                                            res.json({
                                                                                message: "Something went wrong while booking. try again."
                                                                            })
                                                                        })

                                                                }
                                                                else {
                                                                    res.json({

                                                                        status: true,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })

                                                                }



                                                            })
                                                            //Add
                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }
                                                    })
                                                }
                                                else {
                                                    res.json({

                                                        status: true,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                    })
                                                }
                                            })
                                        }
                                        else {
                                            res.json({

                                                status: true,
                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                            })
                                        }
                                    })
                                }
                                else {
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })

                                }

                            }

                            // special Day
                            if (specialDayCheck == 1) {
                                console.log("special day Add Schedule");
                                const Specialday_id = req.body.Specialday_id;
                                const obj = req.body.Special_Day;

                                if (dif >= 0)//for Previous Date
                                {

                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            var _Length = result.length;
                                            if (_Length == 0) {
                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                                                    if (result2 == null) {

                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                            if (results == null) {
                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                                                    if (results == null) {


                                                                        //Add 
                                                                        console.log('Admin')
                                                                        let Add_Schedule = new Schedule({



                                                                            Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                            Booking_ID: globalbookingid,
                                                                            Boat_Name: req.body.Boat_Name,
                                                                            Total_DaysBooked: Total_Count,
                                                                            WeekDay_Count: WeekDay_Count,
                                                                            WeekEnd_Count: WeekEnd_Count,
                                                                            calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                            title: req.body.title,
                                                                            body: req.body.body,
                                                                            start: req.body.start,
                                                                            end: req.body.end,
                                                                            start_NoTime: Start_final_withoutTime,
                                                                            end_NoTime: End_final_withoutTime,
                                                                            goingDuration: req.body.goingDuration,
                                                                            comingDuration: req.body.comingDuration,
                                                                            isAllDay: req.body.isAllDay,
                                                                            category: req.body.category,
                                                                            dueDateClass: req.body.dueDateClass,
                                                                            location: req.body.location,
                                                                            attendees: req.body.attendees,
                                                                            recurrenceRule: req.body.recurrenceRule,
                                                                            isPending: req.body.isPending,
                                                                            isFocused: req.body.isFocused,
                                                                            isVisible: req.body.isVisible,
                                                                            isReadOnly: req.body.isReadOnly,
                                                                            isPrivate: req.body.isPrivate,
                                                                            color: req.body.color,
                                                                            bgColor: req.body.bgColor,
                                                                            Is_StandByBooking: req.body.Is_StandByBooking,
                                                                            Check_Status: req.body.Check_Status,
                                                                            commends: req.body.commends,
                                                                            dragBgColor: req.body.dragBgColor,
                                                                            borderColor: req.body.borderColor,
                                                                            customStyle: req.body.customStyle,
                                                                            raw: req.body.raw,
                                                                            state: req.body.state,
                                                                            User_RoleType: req.body.User_RoleType,
                                                                            User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                            Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                            Status: Module_status,
                                                                            IsActive: req.body.IsActive,
                                                                            Current_Time: moment(Date.now()),
                                                                            Updated_time: moment(Date.now()),
                                                                            Total_DaysBooked_Reassign: Total_Count,
                                                                            WeekDay_Count_Reassign: WeekDay_Count,
                                                                            WeekEnd_Count_Reassign: WeekEnd_Count,
                                                                            Booking_Type: bookingType

                                                                        });

                                                                        Add_Schedule.save()
                                                                            .then(async (response) => {
                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => {
                                                                                    console.log(error)
                                                                                    console.log(isCleanDay)
                                                                                })

                                                                                res.json({

                                                                                    status: true,
                                                                                    message: 'The admin booking has been successfully created'
                                                                                })
                                                                            })
                                                                            .catch(error => {
                                                                                console.log(error, "error")
                                                                                res.json({
                                                                                    message: "Something went wrong while booking. try again."
                                                                                })
                                                                            })

                                                                    }
                                                                    else {
                                                                        res.json({

                                                                            status: true,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })

                                                                    }



                                                                })
                                                                //Add
                                                            }
                                                            else {
                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }
                                                        })
                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })
                                                    }
                                                })
                                            }
                                            else {
                                                res.json({

                                                    status: true,
                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                })
                                            }
                                        })
                                    }

                else//For Owner
                {

                    
                    

            Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

            console.log(result.length, 'length')
            var _Length = result.length;
            if (_Length == 0) {
                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {
                    if (result2 == null) {

                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                            if (results == null) {

                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }] }).then(results => {
                                    if (results == null) {

                               Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                var SummerWeekdays = response.Summer_WeekDays;
                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                var WinterWeekDays = response.Winter_WeekDays;
                                var WinterweekendDays = response.Winter_WeekEndDays;

                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                    
                                    let stopExecution = { stop: false }
                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                        console.log(error)
                                        stopExecution = error
                                    })

                                    if (stopExecution.stop) {
                                        return res.json({ status: true, message: stopExecution.error })
                                    }

                                    let isNextDaysError = false
                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                        isNextDaysError = true
                                        return res.json(error)
                                    })


                                    if (isNextDaysError) return
                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                            
                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                    

                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                    if(element){

                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                    }else{

                                        res.json({
                                            status: false,
                                            message: 'Consecutive days for this boat is Empty'
                                        })

                                    }

                                    CheckSpecialDaysExist(Boat_id, Owner_id, obj,0).then(async function (myflag) {

                                        if (myflag == 0) {
                                            

                                        if(isAvailableDay.type=="summer"){
                                            

                                            if(SummerConsecutiveDays>=Total_Count){

                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                    {

                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                    },
                                                    { new: true },
                                                    function (err, data) {


                                                    });
                                                    if(MonthBookingStatus ==1)
                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                    else
                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                    
                                                    let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                    obj.map(function (objs) {
                                                        var specialday = objs.special_date;
                                                        var Specialdayid = objs._id;
                                                        var Start_final = moment(specialday);
                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                        console.log(Start_final_withoutTime)
                                                        var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                        if (addspecial == true) {
                                                            console.log('successs')
                                                        }
                                                        else {
                                                            console.log('fail')
                                                        }
                                                    })
                                                    
                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));

                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);

                                                    if(MailSend){

                                                        res.json({

                                                            status: true,
                                                            message: 'The booking has been successfully created'
                                                        })

                                                    }

                                                }else{

                                                    res.json({
                                                        status: false,
                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                    })
                                                }


                                            }else{

                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                })
                                                
                                            }

                                        }
                                        else if(isAvailableDay.type=="winter"){

                                            
                                            
                                            if(WinterConsecutiveDays>=Total_Count){
                                                
                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){

                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                    {

                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                    },
                                                    { new: true },
                                                    function (err, data) {


                                                    });
                                                    let addSchedule =  await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded);
                                                    
                                                    if(MonthBookingStatus ==1)
                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                    else
                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter");
                                                    
                                                   
                                                    obj.map(function (objs) {
                                                        var specialday = objs.special_date;
                                                        var Specialdayid = objs._id;
                                                        var Start_final = moment(specialday);
                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                        console.log(Start_final_withoutTime)
                                                        var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                        if (addspecial == true) {
                                                            console.log('successs')
                                                        }
                                                        else {
                                                            console.log('fail')
                                                        }
                                                    })
                                                    
                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));

                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);

                                                    if(MailSend){

                                                        res.json({

                                                            status: true,
                                                            message: 'The booking has been successfully created'
                                                        })

                                                    }


                                                }else{
                                                    res.json({
                                                        status: false,
                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                    })
                                                }

                                            }else{
                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                })
                                            }

                                        }
                                        else if(isAvailableDay.type=="both"){
                                            
                                            if(isAvailableDay.bookingType == "Summer booking")
                                            var consecutiveCount = SummerConsecutiveDays;
                                            else
                                            var consecutiveCount = WinterConsecutiveDays;
                                           
                                            if(consecutiveCount>=Total_Count){
                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                    {

                                                        Summer_WeekDays: SummerWeekdays -  summerWeekdayWeekend.weekdaycnt,
                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                    
                                                    },
                                                    { new: true },
                                                    function (err, data) {
                                                    
                                                    
                                                    });
                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                        {

                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                        },
                                                        { new: true },
                                                        function (err, data) {


                                                        });
                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]

                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1];

                                                        
                                                        if(MonthBookingStatus ==1){
                                                            
                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id,start_Date, end_Date,anni_month);
                                                            


                                                        }
                                                        
                                                        else{
                                                            

                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                        }
                                                            let addSchedule = await SaveSchedule(req.body,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded);
                                                            obj.map(function (objs) {
                                                                var specialday = objs.special_date;
                                                                var Specialdayid = objs._id;
                                                                var Start_final = moment(specialday);
                                                                var Start_final_withoutTime = Start_final.startOf('day');
                                                                console.log(Start_final_withoutTime)
                                                                var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                if (addspecial == true) {
                                                                    console.log('successs')
                                                                }
                                                                else {
                                                                    console.log('fail')
                                                                }
                                                            })
                                                    
                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));

                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);

                                                            if(MailSend){

                                                                res.json({

                                                                    status: true,
                                                                    message: 'The booking has been successfully created'
                                                                })

                                                            }


                                                        
                                                            
                                                        


                                            }else{
                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                })
                                            }
                                            

                                            }else{
                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                })
                                            }
                                        }

                                        }else{
                                            res.json({
                                                status: true,
                                                message: 'You Have Already Booked Special Day'
                                            })

                                        }


                                    });




                                });
                            })
                            //Special day  
                                                    

                                                }
                                                else {
                                                    res.json({
                                                        status: false,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                    })
                                                }




                                            })
                                        }
                                        else {

                                            res.json({
                                                status: false,
                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                            })

                                        }

                                    })
                                }
                                else {
                                    res.json({
                                        status: false,
                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                    })

                                }


                            });//else inside function owner


                        }
                        else {
                            res.json({
                                status: false,
                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                            })
                        }

                    });
                }

                                }

                                else {
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })
                                }

                            }

                            //special Day


                        }
                        else {

                            res.json({
                                status: false,
                                message: 'Boat Selected is not Active'
                            })

                        }

                    });
            })

    } catch (error) {
        console.log(error)
        return res.json(error)
    }

};

const EditSchedule = async (req, res, next) => {

    try {



        const scheduleid = req.body._id;
        var Back_to_Back_id = req.body.Back_to_Back_id;
        var Back_to_Back_Sheduler_id = req.body.Back_to_Back_Sheduler_id;
        var check_Status = req.body.Check_Status;
        var Total_Count_New = Number(req.body.TotalDay_Count);
        var WeekDay_Count = Number(req.body.WeekDay_Count);
        var WeekEnd_Count = Number(req.body.WeekEnd_Count);
        var User_role = req.body.User_RoleType;
        var Boat_id = req.body.Boat_Id;
        var Owner_id = req.body.User_Id;
        var specialDayCheck = req.body.specialDayCheck;
        console.log(specialDayCheck, 'check here')
        var start_Date_New = req.body.start;
        console.log(start_Date_New)
        var end_Date_New = req.body.end;
        var TodaysDate = moment();
        var CurrentDate = moment(TodaysDate).format('DD-MM-YYYY');
        console.log(CurrentDate);

        // var start_Date_NoTime_new=new Date(start_Date_New);
        //console.log(start_Date_NoTime.toString(),'hi');
        var Start_final_New = moment(start_Date_New);
        var Start_final_withoutTime_New = Start_final_New.startOf('day');
        // var end_Date_NoTime_New=new Date(end_Date_New);
        var End_final_New = moment(end_Date_New);
        var End_final_withoutTime_New = End_final_New.startOf('day');
        var PendingSummerWeekdays = Number(req.body.summer_Winter_Calc.PENDING_SUMMER_WEEKDAYS);
        var PendingSummerWeekEnddays = Number(req.body.summer_Winter_Calc.PENDING_SUMMER_WEEKENDS);
        var PendingWinterWeekdays = Number(req.body.summer_Winter_Calc.PENDING_WINTER_WEEKDAYS);
        var PendingWinterWeekenddays = Number(req.body.summer_Winter_Calc.PENDING_WINTER_WEEKENDS);

        //console.log(PendingSummerWeekdays, PendingSummerWeekEnddays, PendingWinterWeekdays, PendingWinterWeekenddays)
        var dif = Start_final_New.diff(moment(), 'days')
        console.log(dif)

        if (req.body.Status == "Enable") {

            var Module_status = 1;
        }
        else if (req.body.Status == "Disable") {
            var Module_status = 0;
        }

        let expireCancel = new Date();

        expireCancel.setDate(expireCancel.getDate() + 1);

        let cancelExpireStr = dateToStr(expireCancel);

        let TodatCuntDate = new Date();
        let todayDateStr = dateToStr(TodatCuntDate);

        /* check boat is suspended */

        if (User_role == "Owner") {

            let getOwnerStatus = await NewOwners.findOne({_id:mongoose.Types.ObjectId(Owner_id)},{Status:1}).catch((error)=> console.log(error));
            if((getOwnerStatus.Status == 2)||(getOwnerStatus.Status == 0))
            return res.json({
               status: false,
               message: 'Permission Denied'
           }) 
   

            let prevCancel = await EditCancelDays.find({ Owner_Id: mongoose.Types.ObjectId(Owner_id), Boat_Id: mongoose.Types.ObjectId(Boat_id), cancelexpiretimeStr: { $gte: todayDateStr } }).catch((error) => console.log(error));

            if (prevCancel) {

                var PrevcanceDays = [];

                prevCancel.map((item) => {
                    var stringDst = item.cancaledDays;
                    stringDst.map((items) => { PrevcanceDays.push(items) });
                });


                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(start_Date_New, end_Date_New);
                let intersection = PrevcanceDays.filter(canceldVal => CurentBookBetweenDays.includes(canceldVal));

                if ((intersection.length) > 0)

                    return res.json({
                        status: false,
                        message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                    })

            }


            let suspendcheck = await manageBoat.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) }).catch((error) => console.log(error));
            if (suspendcheck.Block == false) {

                return res.json({
                    status: false,
                    message: 'Suspended'
                })

            }

            let ownerdurationCheck = await Duration.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));
            if (!ownerdurationCheck || ownerdurationCheck == null) {

                return res.json({
                    status: false,
                    message: 'Please set Ownership duration'
                });

            } else {

                let enddateDuration = new Date(ownerdurationCheck.To_Date);

                let userEnddate = new Date(end_Date_New);

                let startdateDuration = new Date(ownerdurationCheck.From_Date);

                let userStartdate = new Date(start_Date_New);

                userStartdate.setDate(userStartdate.getDate() + 1);

                userEnddate.setDate(userEnddate.getDate() - 1);

                //console.log("AKKK::"+enddateDuration+"@"+userEnddate);

                if ((enddateDuration.getTime() < userEnddate.getTime()) || (userStartdate.getTime() < startdateDuration.getTime())) {

                    return res.json({
                        status: false,
                        message: 'These dates are not available..'
                    });
                }


            }





        }


        let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
  
        let getanniversary = new Date(AnniversaryDate.Launch_Date);
        let anni_month = (getanniversary.getMonth())+1;

            var startyear = new Date(Start_final_withoutTime_New);
            var Start_Month = (startyear.getMonth(startyear))+1;

            var endyear = new Date(End_final_withoutTime_New);
            var End_Month = (endyear.getMonth(endyear))+1;

            

        if((Start_Month<anni_month)&&(End_Month>=anni_month) || (Start_Month>anni_month)&&(End_Month==anni_month)){

           var MonthBookingStatus =1;

           var getBookedyear = new Date(req.body.start);
            var YearOne = getBookedyear.getFullYear();
            var getBookedyear = new Date(req.body.start);
            var YearOne = getBookedyear.getFullYear();
            var MonthOne = getBookedyear.getMonth()+1;
            var nextYearBook = (parseInt(YearOne)+1);
            if(MonthOne<anni_month)
            var exp_year = ""+YearOne+anni_month;
            else
            var exp_year =""+nextYearBook+anni_month;


        }else{

            var getBookedyear = new Date(req.body.start);
            var YearOne = getBookedyear.getFullYear();
            var MonthOne = getBookedyear.getMonth()+1;
            var nextYearBook = (parseInt(YearOne)+1);
            if(MonthOne<anni_month)
            var exp_year = ""+YearOne+anni_month;
            else
            var exp_year =""+nextYearBook+anni_month;


            var MonthBookingStatus =0;


        }

      

        let OwnerDetails = await NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) }).catch((error) => console.log(error)) || {}

        //check if any of the incoming dates already booked

        //   let allDaysBetweenStartAndEndOfIncomingBooking = getDaysBetweenDates(start_Date_New,end_Date_New)

        //   let queryToCheckExistingBooking = []  

        //   allDaysBetweenStartAndEndOfIncomingBooking.map((date)=> queryToCheckExistingBooking.push({$and:[{start_NoTime:{$lte:new Date(date)}},{end_NoTime:{$gte:new Date(date)}}]}))

        //   const existingNormalBooking = await Schedule.findOne({IsActive:true,isBookingPending:false,Boat_Id:Boat_id,$or:queryToCheckExistingBooking})

        //   if(existingNormalBooking){
        //       return res.json({
        //          status:true,
        //          message: 'An existing booking already exists for this date. A new booking cannot be created.'
        //       })
        //   }

        ///////////////////////////////////////////////////////////////////////////////////////

        //check consecutive days in case of stand by booking and normal booking

        let dayBeforeIncomingBooking;
        let incomingTotalDays;
        let currentBookingStartDate;
        let currentBookingEndDate;

        if (Back_to_Back_id == 0) {
            dayBeforeIncomingBooking = new Date(new Date(new Date(start_Date_New).setDate(new Date(start_Date_New).getDate() - 1)).setUTCHours(00, 00, 00, 00));
            incomingTotalDays = moment(new Date(req.body.end)).diff(moment(new Date(req.body.start)), "days") + 1;
            currentBookingStartDate = req.body.start;
            currentBookingEndDate = req.body.end
        } else if (Back_to_Back_id == 1) {// Back date merge
            //start date is need to be retrived from DB
            const schedule = await Schedule.findOne({ _id: scheduleid }).catch((error) => console.log(error));
            dayBeforeIncomingBooking = new Date(new Date(new Date(schedule.start_NoTime).setDate(new Date(schedule.start_NoTime).getDate() - 1)).setUTCHours(00, 00, 00, 00));
            incomingTotalDays = moment(new Date(req.body.end)).diff(moment(new Date(schedule.start)), "days") + 1;
            currentBookingStartDate = schedule.start;
            currentBookingEndDate = req.body.end
        } else if (Back_to_Back_id == 2) {// front date merge
            dayBeforeIncomingBooking = new Date(new Date(new Date(start_Date_New).setDate(new Date(start_Date_New).getDate() - 1)).setUTCHours(00, 00, 00, 00));
            incomingTotalDays = moment(new Date(req.body.end)).diff(moment(new Date(req.body.start)), "days") + 1;
            currentBookingStartDate = req.body.start;
            currentBookingEndDate = req.body.end
        } else if (Back_to_Back_id == 3) {// middle merge

            /***** Reduce Numbeer Of Cleans  */
            let getCleanDays = await No_OfCleans.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) }).catch((error) => console.log(error));
            if (getCleanDays) {
                if (getCleanDays.Cleans > 0) {

                    let resultCleanday = (getCleanDays.Cleans) - 1;
                    const updateVals = { Cleans: resultCleanday };
                    const updateCond = { Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) };
                    let durationupdate = await No_OfCleans.findOneAndUpdate(updateCond, updateVals).catch((error) => console.log(error));


                }

            }

            //***** End Reduce Numbeer Of Cleans  *********//
            //start date is need to be retrived from DB
            const schedule = await Schedule.findOne({ _id: scheduleid }).catch((error) => console.log(error));


            dayBeforeIncomingBooking = new Date(new Date(new Date(schedule.start_NoTime).setDate(new Date(schedule.start_NoTime).getDate() - 1)).setUTCHours(00, 00, 00, 00));
            incomingTotalDays = moment(new Date(req.body.end)).diff(moment(new Date(schedule.start)), "days") + 1;
            currentBookingStartDate = schedule.start;
            currentBookingEndDate = req.body.end
        }



        let standByBooking = await AddStandByBooking.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, BookingStatus: null, $and: [{ start_NoTime: { $lte: dayBeforeIncomingBooking } }, { end_NoTime: { $gte: dayBeforeIncomingBooking } }] }).catch((error) => console.log(error))


        const boatData = await Boats.findOne({ _id: Boat_id, IsActive: true }, { SummerSeason_SDate: 1, SummerSeason_EDate: 1, Launch_Date: 1 }).catch((error) => console.log(error));

        if (!boatData) return res.json({ status: false, message: "Invalid boat." });


        //////////////////////////////////////////////////////////////////////////////////////////////////////

        //check if booking is from launch prelaunch if it is then check consecutive days 

        if (User_role != 'Admin' && User_role != 'Maintenance') {

            let { isBookingBeforeLaunchDate } = await checkPrelaunchLaunchConsecutiveDays(boatData.Launch_Date, currentBookingStartDate, currentBookingEndDate, Boat_id, Owner_id, true, scheduleid, Back_to_Back_Sheduler_id) || {}

            if (!isBookingBeforeLaunchDate) {
                // check consecutive days after launch and if the booking exceeds consecutive day throw an error

                //decide booking is from summer or winter

                const consecutiveDays = await consecutive.findOne({ Boat_Id: Boat_id, IsActive: true }).catch((error) => console.log(error))

                if (!consecutiveDays) return res.json({ status: false, message: "Set consecutive days." })

                if (standByBooking) {

                    incomingTotalDays += moment(new Date(standByBooking.end_NoTime)).diff(moment(new Date(standByBooking.start_NoTime)), "days") + 1

                    //check if there is a booking before standby booking if include that days to total day

                    let dayBeforeStandByBooking = new Date(new Date(new Date(standByBooking.start).setDate(new Date(standByBooking.start).getDate() - 1)).setUTCHours(00, 00, 00, 00));

                    let bookingBeforeStandByBooking = await Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: true, $and: [{ start_NoTime: { $lte: dayBeforeStandByBooking } }, { end_NoTime: { $gte: dayBeforeStandByBooking } }] }).catch((error) => console.log(error))

                    if (bookingBeforeStandByBooking) {
                        incomingTotalDays += moment(new Date(bookingBeforeStandByBooking.end_NoTime)).diff(moment(new Date(bookingBeforeStandByBooking.start_NoTime)), "days") + 1
                    }

                }

                console.log(incomingTotalDays, "incomingTotalDays one")


               /* let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(boatData.SummerSeason_SDate, boatData.SummerSeason_EDate, req.body.start) || {};



               if (isIncludedInSummer) {
                    if (incomingTotalDays > consecutiveDays.Summer_ConsecutiveDays) return res.json({ status: false, message: "The booking exceeds the maximum booking duration . Please try to create a booking with fewer days.." });
                } else {
                    if (incomingTotalDays > consecutiveDays.Winter_ConsecutiveDays) return res.json({ status: false, message: "The booking exceeds the maximum booking duration . Please try to create a booking with fewer days.." });
                }*/

            }




        }







        //////////////////////////////////////////////////////////////////////////////////////////////////


        //check if the booking is a canceled stand by booking by incoming owner


        let allDaysBetweenStartAndEnd = getDaysBetweenDates(req.body.start, req.body.end)

        let queryToCheckCanceledStandByBooking = []

        allDaysBetweenStartAndEnd.map((date) => queryToCheckCanceledStandByBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }))



        let isCanceledStandByBooking = await OwnerStandByCancelModel.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, $or: queryToCheckCanceledStandByBooking }).catch((error) => {
            console.log(error)
        })

        if (isCanceledStandByBooking) return res.json({ status: true, message: "You are trying to book a canceled stand by booking ." })

        /////////////////////////////////////////////////////////////////////////////////////////

        // check if the user role match the exisisting 

        const existingBookingOfIncomingBooking = await Schedule.findOne({ _id: scheduleid, IsActive: true, User_RoleType: req.body.User_RoleType }).catch((error) => console.log(error))

        if (!existingBookingOfIncomingBooking) return res.json({ status: false, message: "You don't have permission to edit this booking" })

        //////////////////////////////////////////////////////////////////////////////////////////


        /* Check it is a rejected booking or not */

        let schedulerejected = await Schedule.findOne({ _id: mongoose.Types.ObjectId(scheduleid) }).catch((error) => console.log(error));

        if (schedulerejected.BookingStatus == "Rejected") {

            return res.json({
                status: false,
                message: 'Permission Denied'
            })

        }

        /*  end rejected booking check */



        if (Back_to_Back_id == "0") {

           // console.log(Back_to_Back_id, 'bcktobck0')
            Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(async (BookingResponse) => {
                var globalbookingid = BookingResponse.Booking_ID;
                var Startdate_old = BookingResponse.start;
                let Enddate_old = BookingResponse.end;
                var start_Date = Startdate_old;
                console.log(start_Date)
                var Start_final = moment(start_Date);
                console.log(Start_final, 'checkkkk5')
                var Start_final_withoutTime = Start_final.startOf('day');
                var Totalday_old = BookingResponse.Total_DaysBooked;
                var Total_Count = Total_Count_New;
                var end_Date = end_Date_New;
                let end_date_old = BookingResponse.end
                var End_final = moment(end_Date);
                var End_final_withoutTime = End_final.startOf('day');
                console.log(End_final_withoutTime, 'this is my end day')
                const Getmonth = new Date(Startdate_old);
                var LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });
                var Weekdays_prev = BookingResponse.WeekDay_Count;
                var WeekEndDays_prev = BookingResponse.WeekEnd_Count;

                var CancelledStartDate = new Date(end_Date_New);
                var StartDate_Cancelled = new Date(CancelledStartDate.setDate(CancelledStartDate.getDate() + 1));

                let cancaledDays = getAllCanceledDates(Startdate_old, Enddate_old, req.body.start, req.body.end);


                var startyearOld = new Date(Startdate_old);
                var Start_MonthOld = (startyearOld.getMonth(startyearOld))+1;

                var endyearOld = new Date(Enddate_old);
                var End_MonthOld = (endyearOld.getMonth(endyearOld))+1;

                console.log(Start_MonthOld,anni_month,End_MonthOld,"-----------OKKANNN");

                if((Start_MonthOld<anni_month)&&(End_MonthOld>=anni_month) || (Start_MonthOld>anni_month)&&(End_MonthOld==anni_month)){

                    var AnniversaryStaus = 1;

                }else{
                    var AnniversaryStaus = 0;
                }


                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                    .then(async(boatDetails) => {

                        let bookingType = getBookingTypeofAbooking(start_Date_New, end_Date_New, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);

                        if (boatDetails.Boat_Status == "1")//check whether boat is Active or not
                        {
                            if (dif >= 0) {

                                //between Launch And PreLuanch

                                if (check_Status == "1" && specialDayCheck == 0) {

                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            if (!OwnerDetails) OwnerDetails = {}

                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then(Checkresult => {
                                                console.log(Checkresult.length, 'length')
                                                // var _LengthCheck=Checkresult.length;                           

                                                console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')
                                                PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then(bookingDays => {

                                                    var WeekdaysAllowed = bookingDays.No_Of_WeekDays;
                                                    var WeekEndsAllowed = bookingDays.No_Of_WeekEndDays;
                                                    var b_days = bookingDays.Booking_Days;
                                                    console.log(b_days)
                                                    console.log(Total_Count)
                                                    if (Total_Count <= b_days) {
                                                        if (WeekDay_Count <= WeekdaysAllowed && WeekEnd_Count <= WeekEndsAllowed) {
                                                            console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')


                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                // var _Length=result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                    console.log('hi1')
                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                        if (Total_Count > Totalday_old) {
                                                                            let allDaysBookedBacktoOne = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                            let arrayofBookOne = []

                                                                            allDaysBookedBacktoOne.map((date) => arrayofBookOne.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));
                                                                            Schedule.findOne({ _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: arrayofBookOne }).then(results =>
                                                                            //   Schedule.findOne({_id:{$ne:scheduleid},Boat_Id:Boat_id,IsActive:true,$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                                            {
                                                                                console.log(Start_final_withoutTime);
                                                                                console.log(End_final_withoutTime);
                                                                                //   if(results==null||results._id==scheduleid)
                                                                                if (results == null) {
                                                                                    console.log('hi3')

                                                                                    //Add 
                                                                                    console.log('Admin')
                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                        {

                                                                                            Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                            Booking_ID: globalbookingid,
                                                                                            Boat_Name: req.body.Boat_Name,
                                                                                            Total_DaysBooked: Total_Count,
                                                                                            WeekDay_Count: WeekDay_Count,
                                                                                            WeekEnd_Count: WeekEnd_Count,
                                                                                            calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                            title: req.body.title,
                                                                                            body: req.body.body,
                                                                                            start: req.body.start,
                                                                                            end: req.body.end,
                                                                                            start_NoTime: Start_final_withoutTime,
                                                                                            end_NoTime: End_final_withoutTime,
                                                                                            goingDuration: req.body.goingDuration,
                                                                                            comingDuration: req.body.comingDuration,
                                                                                            isAllDay: req.body.isAllDay,
                                                                                            category: req.body.category,
                                                                                            dueDateClass: req.body.dueDateClass,
                                                                                            location: req.body.location,
                                                                                            attendees: req.body.attendees,
                                                                                            recurrenceRule: req.body.recurrenceRule,
                                                                                            isPending: req.body.isPending,
                                                                                            isFocused: req.body.isFocused,
                                                                                            Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                            isVisible: req.body.isVisible,
                                                                                            isReadOnly: req.body.isReadOnly,
                                                                                            isPrivate: req.body.isPrivate,
                                                                                            color: req.body.color,
                                                                                            bgColor: req.body.bgColor,
                                                                                            dragBgColor: req.body.dragBgColor,
                                                                                            borderColor: req.body.borderColor,
                                                                                            customStyle: req.body.customStyle,
                                                                                            raw: req.body.raw,
                                                                                            state: req.body.state,
                                                                                            Check_Status: req.body.Check_Status,
                                                                                            commends: req.body.commends,
                                                                                            Check_Month: LaunchPreMonth,
                                                                                            User_RoleType: req.body.User_RoleType,
                                                                                            User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                            Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                            Status: Module_status,
                                                                                            IsActive: req.body.IsActive,
                                                                                            Current_Time: moment(Date.now()),
                                                                                            Updated_time: moment(Date.now()),
                                                                                            start_CancelledDate: StartDate_Cancelled,
                                                                                            end_CancelledDate: end_date_old,
                                                                                            Booking_Type: bookingType,
                                                                                            cancaledDays

                                                                                        },

                                                                                        async function (err, data) {

                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, IsActive: true,Scheduleid:scheduleid }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                            /* Eidt 24 hours Rule*/


                                                                                            if (cancaledDays.length > 0) {

                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,

                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                        if (err) {
                                                                                                            return;
                                                                                                        }

                                                                                                    });

                                                                                            }


                                                                                            // Raga partial cancellation
                                                                                            console.log(data, 'successs')

                                                                                            //mail

                                                                                            const emailState = 'Successfully Edited.';
                                                                                            const emailContent = `Dear ${OwnerDetails.First_Name},<p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited by the Smart Boating Team</p>`;
                                                                                            const emailContentAdmin = `Dear Adminsistrator, <p>The Smart Boating Team has successfully edited a booking for ${OwnerDetails.First_Name} on  ${boatDetails.Boat_Name} at ${getCurrentTimeFormatted(start_Date_New)+" 9:00 AM"}</p>`
                                                                                            const emailDetailName = 'Booking Details'
                                                                                            const emailDetails = [
                                                                                                { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                                { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+"5:00 PM" },
                                                                                            ];
                                                                                            const emailNameAndLink = {
                                                                                                name: 'Login Link',
                                                                                                link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                            }




                                                                                            var mailOptions = {

                                                                                                from: "noreply.smartboatbooking@gmail.com",
                                                                                                to: OwnerDetails.Email,
                                                                                                subject: 'Successfully Edited',
                                                                                                html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)



                                                                                            };

                                                                                            transporter.sendMail(mailOptions, function (error, info) {

                                                                                            });

                                                                                            var mailOptionsAdmin = {

                                                                                                from: "noreply.smartboatbooking@gmail.com",
                                                                                                to: "admin@smartboating.com.au",
                                                                                                subject: 'Successfully Edited',
                                                                                                html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                            };

                                                                                            transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                            });
                                                                                            //mail

                                                                                            res.json({

                                                                                                status: true,
                                                                                                message: 'The booking has been successfully Updated'
                                                                                            })

                                                                                        })
                                                                                }
                                                                                else {
                                                                                    res.json({

                                                                                        status: true,
                                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                    })

                                                                                }



                                                                            })
                                                                            //Add
                                                                        }
                                                                        else {

                                                                            console.log('Admin')
                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                {

                                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                    Booking_ID: globalbookingid,
                                                                                    Boat_Name: req.body.Boat_Name,
                                                                                    Total_DaysBooked: Total_Count,
                                                                                    WeekDay_Count: WeekDay_Count,
                                                                                    WeekEnd_Count: WeekEnd_Count,
                                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                    title: req.body.title,
                                                                                    body: req.body.body,
                                                                                    start: req.body.start,
                                                                                    end: req.body.end,
                                                                                    start_NoTime: Start_final_withoutTime,
                                                                                    end_NoTime: End_final_withoutTime,
                                                                                    goingDuration: req.body.goingDuration,
                                                                                    comingDuration: req.body.comingDuration,
                                                                                    isAllDay: req.body.isAllDay,
                                                                                    category: req.body.category,
                                                                                    dueDateClass: req.body.dueDateClass,
                                                                                    location: req.body.location,
                                                                                    attendees: req.body.attendees,
                                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                                    isPending: req.body.isPending,
                                                                                    isFocused: req.body.isFocused,
                                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                    isVisible: req.body.isVisible,
                                                                                    isReadOnly: req.body.isReadOnly,
                                                                                    isPrivate: req.body.isPrivate,
                                                                                    color: req.body.color,
                                                                                    bgColor: req.body.bgColor,
                                                                                    dragBgColor: req.body.dragBgColor,
                                                                                    borderColor: req.body.borderColor,
                                                                                    customStyle: req.body.customStyle,
                                                                                    raw: req.body.raw,
                                                                                    state: req.body.state,
                                                                                    Check_Status: req.body.Check_Status,
                                                                                    commends: req.body.commends,
                                                                                    Check_Month: LaunchPreMonth,
                                                                                    User_RoleType: req.body.User_RoleType,
                                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                    Status: Module_status,
                                                                                    IsActive: req.body.IsActive,
                                                                                    Current_Time: moment(Date.now()),
                                                                                    Updated_time: moment(Date.now()),
                                                                                    Booking_Type: bookingType,
                                                                                    cancaledDays

                                                                                },

                                                                                async function (err, data) {

                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, IsActive: true,Scheduleid:scheduleid }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                    // Edit 24 hour rules 

                                                                                    if (cancaledDays.length > 0) {

                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                if (err) {
                                                                                                    return;
                                                                                                }

                                                                                            });

                                                                                    }
                                                                                    // Raga partial cancellation
                                                                                    console.log(data, 'successs else block')

                                                                                    //mail

                                                                                    const emailState = 'Successfully Edited.';
                                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}  has been succesfully edited</p>`;
                                                                                    const emailContentAdmin = `Dear Adminsistrator,<p> The owner ${OwnerDetails.First_Name} has successfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                                    const emailDetailName = 'Booking Details'
                                                                                    const emailDetails = [
                                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                                    ];
                                                                                    const emailNameAndLink = {
                                                                                        name: 'Login Link',
                                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                    }


                                                                                    var mailOptions = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: OwnerDetails.Email,
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)



                                                                                    };

                                                                                    transporter.sendMail(mailOptions, function (error, info) {

                                                                                    });

                                                                                    var mailOptionsAdmin = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: "admin@smartboating.com.au",
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                    };

                                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                    });
                                                                                    //mail

                                                                                    res.json({

                                                                                        status: true,
                                                                                        message: 'The booking has been successfully Updated'
                                                                                    })

                                                                                })

                                                                        }


                                                                    })


                                                                })


                                                            })

                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'Only ' + WeekdaysAllowed + ' WeekDays and ' + WeekEndsAllowed + ' WeekendDays are allowed Between launch Date And Pre-Launch Date'
                                                            })
                                                        }
                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date'
                                                        })
                                                    }
                                                })


                                            })
                                        })


                                }

                                //between Launch And PreLaunch


                                //After Launch before current date

                                if (check_Status == "2" && specialDayCheck == 0) {
                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                            {

                                                if (Cancelresults == null) {


                                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                        console.log(result.length, 'length')
                                                        // var _Length=result.length;

                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                if (Total_Count > Totalday_old) {


                                                                    Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: [{ $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: Start_final_withoutTime_New } }, { end: { $gte: Start_final_withoutTime_New } }] }, { start_NoTime: Start_final_withoutTime_New }, { start_NoTime: End_final_withoutTime }] }).then(results => {

                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })

                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }

                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return

                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){

                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })

                                                                                        }

                                                                                        if(isAvailableDay.type=="summer"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                            if(SummerConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                    if(updateSchedule){

                                                                                                        if (cancaledDays.length > 0) {

                                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                                    if (err) {
                                                                                                                        return;
                                                                                                                    }
    
                                                                                                                });
    
                                                                                                        }

                                                                                                    }
                                                                                                    

                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
                                                                                        else if(isAvailableDay.type=="winter"){
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                            if(WinterConsecutiveDays>=Total_Count){
                                                                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"winter");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                    if(updateSchedule){

                                                                                                        if (cancaledDays.length > 0) {

                                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                                    if (err) {
                                                                                                                        return;
                                                                                                                    }
    
                                                                                                                });
    
                                                                                                        }

                                                                                                    }
                                                                                                    

                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
    
                                                                                                }else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }
    
                                                                                        }
                                                                                        else if(isAvailableDay.type=="both"){
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
    
                                                                                            if(consecutiveCount>=Total_Count){
    
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                    
                                                                                                       
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        

                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    


                                                                                                        }

                                                             

                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            //var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
    
                                                                                                        }
                                                                                                        
                                                                                                        else{

                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }

                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){

                                                                                                        if (cancaledDays.length > 0) {

                                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                                    if (err) {
                                                                                                                        return;
                                                                                                                    }
    
                                                                                                                });
    
                                                                                                        }

                                                                                                    }
                                                                                                    

                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                            
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    

                                                                                         }




                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })

                                                                }
                                                                else { 


                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                        var WinterweekendDays = response.Winter_WeekEndDays;
 

                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                            let stopExecution = { stop: false }
                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,req.body.start, req.body.end).catch((error) => {
                                                                                console.log(error)
                                                                                stopExecution = error
                                                                            })


                                                                            if (stopExecution.stop) {
                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                            }

                                                                            let isNextDaysError = false
                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id, true).catch((error) => {
                                                                                    isNextDaysError = true
                                                                                    return res.json(error)
                                                                                })


                                                                                if (isNextDaysError) return


                                                                                var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                      
                                                                                var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
      
                                                                                let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                if(element){
      
                                                                                    var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                    var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                }else{
      
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'Consecutive days for this boat is Empty'
                                                                                    })
      
                                                                                }

                                                                             


                                                                                if(isAvailableDay.type=="summer"){
                                                                                    if(SummerConsecutiveDays >= Total_Count){

                                                                                        var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                        });
                                                                                        if ((PendingSummerWeekdays >= WeekDay_Count || PendingSummerWeekEnddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end
                                                                                        {
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {


                                                                                            });
                                                                                            const getyear = new Date(Start_final);
                                                                                            const Cancellationyear = getyear.getFullYear();
                                                                                            var Noofcancellation = Totalday_old - Total_Count;

                                                                                            var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                            })

                                                                                            
                                                                                            var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                            });

                                                                                            if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }
                                                                                                if(isAvailableDayBoth.type == "both"){

                                                                                                    var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    
                                                                                                    var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                    var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                    var WinterStrtDate = new Date(winterstrat);
                                                                                                    WinterStrtDate.toISOString();

                                                                                                    var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                    var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                    var WinterEDate = new Date(winterend);
                                                                                                    WinterEDate.toISOString();

                                                                                                    var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                    var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                    var SummerStrtDate = new Date(summerstrat);
                                                                                                    SummerStrtDate.toISOString();

                                                                                                    var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                    var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                    var SummerEDate = new Date(summerend);
                                                                                                    SummerEDate.toISOString();

                                                                               


                                                                                                    var winter_starrt_final = moment(req.body.start);
                                                                                                    var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                    console.log(Start_final_withoutTime.toISOString());
                                                                                                    var winter_starrt_End = moment(req.body.end);
                                                                                                    var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                   // console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                    let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                    

                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                    let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                    var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                              
                                                                                                    if (No_Of_LOA > 0){
    
                                                                                                        if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
                                                                                                        }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
    
                                                                                                        }
                                                                                                        if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
    
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
      
                                                                                                          }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
      
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
      
      
                                                                                                          }                                                                
    
                                                                                                   }

                                                                                                }
                                                                                                else{

                                                                                                    let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                    if (No_Of_LOA > 0){

                                                                                                        if((UseremovedDates.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
                                                                                                        }else if((UseremovedDates.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
    
                                                                                                        }
    
                                                                                                   }

                                                                                                }
                                                                                               
                                                                                                
                                                                                           
                                                                                           var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                            console.log(error)
                                                                                            //console.log(TotalCancellation)
                                                                                        })

                                                                                        var obj = Object();
                                                                                        obj.start = Start_final;
                                                                                        obj.end = End_final;

                                                                                        var datas = getDaysInMonth_Sheduler(obj);
                                                                                        console.log(datas)
                                                                                        var arr = [];

                                                                                        datas.forEach(function (item) {
                                                                                            Object.keys(item).forEach(function (key) {
                                                                                                arr.push(item[key]);
                                                                                                console.log(item[key]);
                                                                                            });
                                                                                        });
                                                                                        console.log(arr)
                                                                                        var index = arr.length - 1;
                                                                                        var Loa_Length = No_Of_LOA;
                                                                                        var WeekDay_Count_edit = 0;
                                                                                        var WeekEnd_Count_edit = 0;

                                                                                        while (Loa_Length > 0) {


                                                                                            console.log(arr[index]);
                                                                                            let day = arr[index];

                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                            }
                                                                                            else {
                                                                                                WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                            }

                                                                                            Loa_Length--;
                                                                                            index--;
                                                                                        }

                                                                                        var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                        var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                        {

                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                            PartialCancellation_Status: 1,
                                                                                            Updated_time: moment(Date.now()),

                                                                                        },

                                                                                        function (err, data) {
                                                                                        })

                                                                                        if (GetCancellationNumber.No_PartialCancellation) {

                                                                                            console.log("insde check status 3 in back to back 0")

                                                                                            console.log(Start_final, "Start_final", End_final, "End_final");


                                                                                            let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                            console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")

                                                                                            //update allocated cancellation days

                                                                                            //reassigning


                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                //console.log(result)
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;
                                                                                                let RemainingDays_wd = (SS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                let RemainingDays_we = (SE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;

                                                                                                console.log(SS_day, SE_day, 'summer ss and se days')

                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                    {

                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Summer_WeekDays: RemainingDays_wd,
                                                                                                        Summer_WeekEndDays:RemainingDays_we,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },
                                                                                                    {
                                                                                                        new: true
                                                                                                    },

                                                                                                    function (err, data) {

                                                                                                        console.log('GetCancelaltionBlock')
                                                                                                        console.log('updated owner booking')
                                                                                                    });
                                                                                            })

                                                                                            //reassigning
                                                                                        }

                                                                                        if(isAvailableDayBoth.type == "both"){

                                                                                            var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                            var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                            var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                            var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));

                                                                                            var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                            var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);

                                                                                            if(GetCancellationNumber.No_PartialCancellation){
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {

                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;

                                                                                                    if(GetCancellationNumber.No_PartialCancellation > cancaledDaysWinter.length){

                                                                                                        var winter_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysWinter.length;
                                                                                                        var summerLoa = cancaledDaysSummer.length-winter_Loa;
                                                                                                        
                                                                                            
                                                                                                    }else{
                                                                                                        var winter_Loa = cancaledDaysWinter.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                        var summerLoa = cancaledDaysSummer.length;   
                                                                                                    }

                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,summerLoa);
                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(SummerStrtDate, SummerEDate,cancaledDaysSummer.length)
                                                                                                    let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                    let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                    if(GetCancellationNumber.No_PartialCancellation > cancaledDaysWinter.length){

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end, cancaledDaysWinter.length);
                                                                                            
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                          {
                                                                                                  
                                                                                                              Boat_Id: Boat_id,
                                                                                                              Owner_Id: Owner_id,
                                                                                                              Winter_WeekDays: WS_day - UseremovedDatesWinter.outPutWeekday,
                                                                                                              Winter_WeekEndDays: WE_day - UseremovedDatesWinter.outPutWeekend,
                                                                                                              Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                              Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                              IsActive: true,
                                                                                                              Current_Time: moment(Date.now()),
                                                                                                              Updated_time: moment(Date.now())
                                                                                                          },
                                                                                                  
                                                                                                          function (err, data) {
                                                                                                  
                                                                                                              console.log('Completed the summer part in summer section')
                                                                                                          });
                                                                                            
                                                                                                    }else{

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end,winter_Loa);
                                                                                                        var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(WinterStrtDate, WinterEDate,cancaledDaysWinter.length)
    
                                                                                                        let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDatesWinter.outPutWeekday;
                                                                                                        let RemaingWeekEnDys_winter =  (WE_day - reAssignedWeekendCount)+UseremovedDatesWinter.outPutWeekend;

                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                            {
                                                                                                    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                    
                                                                                                            function (err, data) {
                                                                                                    
                                                                                                                console.log('Completed the summer and winter part')
                                                                                                            });

                                                                                                            let wintersuccess = await Do_approveCancel(req.body._id, winter_Loa, 1, winter_Loa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');

                                                                                                    }
                                                                                                           let summersuccess = await Do_approveCancel(req.body._id, summerLoa, 1, summerLoa, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
                                                                                                });    

                                                                                            }

                                                                                            else{
                                                                                                var winterLoa = cancaledDaysWinter.length;
                                                                                                var summer_Loa = cancaledDaysSummer.length;
                                                                                                var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, cancaledDaysWinter.length, 1, cancaledDaysWinter.length, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                let summersuccess = await Do_approveCancel(req.body._id, cancaledDaysSummer.length, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
                                                                                            
                                                                                            }



                                                                                            ////////////////////////////////////////////////////////////////////////////////////////////

                                                                                            
                                                                                           

                                                                                        }
                                                                                        else{

                                                                                            if (No_Of_LOA > 0) { console.log("Enterd in Auto approval LOA");

                                                                                            var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                            //console.log( UseremovedDates.outPutWeekday,UseremovedDates.outPutWeekend,"----------------JJJ");

                                                                                             DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);

                                                                                                           
                                                                                        }


                                                                                        }

                                                                                        
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: 0,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });
                                                                                         
                                                                                    
                                                                                    }else{

                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                          
                                                                                        })
                                                                                        var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: No_Of_LOA,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });

                                                                                            let stopExecutionboth = { stop: false };

                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                        
                                                                                                console.log(error)
                                                                                                stopExecutionboth = error
                                                                                            })
        
                                                                                           
                                                                                            if (stopExecutionboth.stop) {
                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                            }

                                                                                          

                                                                                            if(isAvailableDayBoth.type== "both"){

                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                
                                                                                                var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;

                                                                                                  
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                            Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                            Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('Completed the Summer part')
                                                                                                        });
                                                                                                })


                                                                                            }else{

                                                                                                var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;

                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                              
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                    console.log( WeekdayCancelled,SS_day,SS_day - WeekdayCancelled);

                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year},
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: SS_day - WeekdayCancelled,
                                                                                                            Summer_WeekEndDays: SE_day - WeekEndCancelled,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('Completed the Summer part')
                                                                                                        });
                                                                                                })

                                                                                            }

                  
                                                                                      

                                                                                    }

                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                    if(updateSchedule){

                                                                                        if (cancaledDays.length > 0) {

                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                    if (err) {
                                                                                                        return;
                                                                                                    }

                                                                                                });

                                                                                        }
                                                                                        let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                        let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                        if(MailSend){
  
                                                                                            res.json({
  
                                                                                                status: true,
                                                                                                message: 'The booking has been successfully Updated'
                                                                                            })
  
                                                                                        }
  
                                                                                        

                                                                                    }

                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
                                                                                        }

                                                                                    }
                                                                                    else {
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                            })

                                                                                        }
                                                                                }
                                                                                else if(isAvailableDay.type=="winter"){
                                                                                    if(WinterConsecutiveDays >= Total_Count){

                                                                                     

                                                                                        var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                        });
                                                                                        if ((PendingWinterWeekdays >= WeekDay_Count || PendingWinterWeekenddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end
                                                                                        {
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {


                                                                                            });
                                                                                            const getyear = new Date(Start_final);
                                                                                            const Cancellationyear = getyear.getFullYear();
                                                                                            var Noofcancellation = Totalday_old - Total_Count;

                                                                                           
                                                                                            var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                            })

                                                                                            
                                                                                            var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                            });

                                                                                            if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }

                                                                                                if(isAvailableDayBoth.type == "both"){

                                                                                                    var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    
                                                                                                    var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                    var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                    var WinterStrtDate = new Date(winterstrat);
                                                                                                    WinterStrtDate.toISOString();

                                                                                                    var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                    var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                    var WinterEDate = new Date(winterend);
                                                                                                    WinterEDate.toISOString();

                                                                                                    var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                    var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                    var SummerStrtDate = new Date(summerstrat);
                                                                                                    SummerStrtDate.toISOString();

                                                                                                    var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                    var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                    var SummerEDate = new Date(summerend);
                                                                                                    SummerEDate.toISOString();

                                                                               


                                                                                                    var winter_starrt_final = moment(req.body.start);
                                                                                                    var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                    console.log(Start_final_withoutTime.toISOString());
                                                                                                    var winter_starrt_End = moment(req.body.end);
                                                                                                    var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                    //console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                    let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                    

                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                    let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                    var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                              
                                                                                                    if (No_Of_LOA > 0){
    
                                                                                                        if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
                                                                                                        }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
    
                                                                                                        }
                                                                                                        if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
    
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
      
                                                                                                          }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
      
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
      
      
                                                                                                          }                                                                
    
                                                                                                   }

                                                                                                }else{

                                                                                                    let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                              
                                                                                                    if (No_Of_LOA > 0){
    
                                                                                                        if((UseremovedDates.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
                                                                                                        }else if((UseremovedDates.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
    
                                                                                                          return res.json({
                                                                                                              status: false,
                                                                                                              message: "You don't have enough days for LOA"
                                                                                                          }) 
    
    
                                                                                                        }
    
                                                                                                   }

                                                                                                }



       
                                                                                           var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                            console.log(error)
                                                                                            //console.log(TotalCancellation)
                                                                                        })

                                                                                        var obj = Object();
                                                                                        obj.start = Start_final;
                                                                                        obj.end = End_final;

                                                                                        var datas = getDaysInMonth_Sheduler(obj);
                                                                                        //console.log(datas)
                                                                                        var arr = [];

                                                                                        datas.forEach(function (item) {
                                                                                            Object.keys(item).forEach(function (key) {
                                                                                                arr.push(item[key]);
                                                                                                console.log(item[key]);
                                                                                            });
                                                                                        });
                                                                                        //console.log(arr)
                                                                                        var index = arr.length - 1;
                                                                                        var Loa_Length = No_Of_LOA;
                                                                                        var WeekDay_Count_edit = 0;
                                                                                        var WeekEnd_Count_edit = 0;

                                                                                        while (Loa_Length > 0) {


                                                                                            console.log(arr[index]);
                                                                                            let day = arr[index];

                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                            }
                                                                                            else {
                                                                                                WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                            }

                                                                                            Loa_Length--;
                                                                                            index--;
                                                                                        }

                                                                                        var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                        var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                        {

                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                            PartialCancellation_Status: 1,
                                                                                            Updated_time: moment(Date.now()),

                                                                                        },

                                                                                        function (err, data) {
                                                                                        })
                                                                                       

                                                                                        if (GetCancellationNumber.No_PartialCancellation) {

                                                                                            console.log("insde check status 3 in back to back 0 Winter")

                                                                                           // console.log(Start_final, "Start_final", End_final, "End_final");


                                                                                           
                                                                                            //update allocated cancellation days

                                                                                            //reassigning
                                                                                            
                                                                                            let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                            
                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                               
                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                var WE_day = result.Winter_WeekEndDays;
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;


                                                                                                if(isAvailableDayBoth.type == "winter"){

                                                                                                   

                                                                                                    let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                                    console.log(reAssignedWeekDaysCount,"reAssignedWeekDaysCount");
                                                                                                    console.log(reAssignedWeekendCount,"reAssignedWeekendCount");
                                                                                                    console.log(Noofcancellation,"Noofcancellation");
    

                                                                                                    let RemaingWeekDys =  (WS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                    let RemaingWeekEnDys =  (WE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;

                                                                                                    console.log("_____________________REE",RemaingWeekDys);
                                                                                                    console.log("_____________________WWW",RemaingWeekEnDys);
                                                                                                    //console.log(SS_day, SE_day, 'summer ss and se days')

                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: RemaingWeekDys,
                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
                                                                                                        {
                                                                                                            new: true
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            //console.log('GetCancelaltionBlock')
                                                                                                            //console.log('updated owner booking')
                                                                                                        });

                                                                                                }

                                                                                                
                                                                                               
                                                                                            })

                                                                                            //reassigning
                                                                                        }

                                                                                        

                                                                                            if(isAvailableDayBoth.type == "both"){

                                                                                                var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));

                                                                                                var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);

                                                                                                if (GetCancellationNumber.No_PartialCancellation)
                                                                                                {
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                               
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                    if(GetCancellationNumber.No_PartialCancellation > cancaledDaysSummer.length){

                                                                                                        var summer_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysSummer.length;
                                                                                                        var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                        

                                                                                                    }else{
                                                                                                        var summer_Loa = cancaledDaysSummer.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                        var winterLoa = cancaledDaysWinter.length;   
                                                                                                    }
                                                                                                    
                                                                                                    
                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                   
                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(WinterStrtDate, WinterEDate,cancaledDaysWinter.length)
                                                                                                    
                                                                                                    let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDatesWinter.outPutWeekday;
                                                                                                    let RemaingWeekEnDys_winter =  (WE_day - reAssignedWeekendCount)+UseremovedDatesWinter.outPutWeekend;
                                                                                                   
                                                                                                    if(GetCancellationNumber.No_PartialCancellation > cancaledDaysSummer.length){

                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);

                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                         {
                                                                                                 
                                                                                                             Boat_Id: Boat_id,
                                                                                                             Owner_Id: Owner_id,
                                                                                                             Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                             Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                             Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                             Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                             IsActive: true,
                                                                                                             Current_Time: moment(Date.now()),
                                                                                                             Updated_time: moment(Date.now())
                                                                                                         },
                                                                                                 
                                                                                                         function (err, data) {
                                                                                                 
                                                                                                             console.log('Completed the summer part')
                                                                                                         });

                                                                                                    }else{

                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end,summer_Loa);

                                                                                                        var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(SummerStrtDate, SummerEDate,cancaledDaysSummer.length)
                                                                                                    
                                                                                                        let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                        let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                            {
                                                                                                    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                    
                                                                                                            function (err, data) {
                                                                                                    
                                                                                                                console.log('Completed the summer and winter part')
                                                                                                            });
                                                                                                       
                                                                                                            let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');

                                                                                                    }

                                                                                                             

                                                                                                

                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                    
                                                                                                    
                                                                                       
                                                                                                    });

                                                                                                   
                                                                                                }
                                                                                                else{

                                                                                                    var winterLoa = cancaledDaysWinter.length;
                                                                                                    var summer_Loa = cancaledDaysSummer.length;
                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);
                                                                                                    if(winterLoa>0){

                                                                                                    

                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                       
 
                                                                                                     }
     
                                                                                                    
     
                                                                                                    
 
                                                                                                     if(summer_Loa>0) {
 
                                                                                                         let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
 
                                                                                                     }     

                                                                                                }

                                                                                                

                                                                                                

                                                                                                
                                                                                                   
                                                                                            

                                                                                                

                                                                                            }else{

                                                                                                var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                if (No_Of_LOA > 0) 

                                                                                                 DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);

                                                                                                               
                                                                                            


                                                                                            }

                                                                                        

                 

                                                                                        
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: 0,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });
                                                                                         
                                                                                    
                                                                                    }else{

                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                          
                                                                                        })
                                                                                        var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: No_Of_LOA,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });

                                                                                            let stopExecutionboth = { stop: false };

                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                        
                                                                                                console.log(error)
                                                                                                stopExecutionboth = error
                                                                                            })
        
                                                                                           
                                                                                            if (stopExecutionboth.stop) {
                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                            }

                                                                                          

                                                                                            if(isAvailableDayBoth.type== "both"){

                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                
                                                                                                var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;
                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;

                                                                                                  
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                            Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                            Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('Completed the Summer part')
                                                                                                        });
                                                                                                })


                                                                                            }else{

                                                                                                var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                          
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;

                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekdayCancelled,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEndCancelled,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('Completed the winter part')
                                                                                                        });
                                                                                                })

                                                                                            }


                                                                                            

           
                                                                                      

                                                                                    }

                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                    if(updateSchedule){

                                                                                        if (cancaledDays.length > 0) {

                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                    if (err) {
                                                                                                        return;
                                                                                                    }

                                                                                                });

                                                                                        }
                                                                                        let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                        let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                        if(MailSend){
  
                                                                                            res.json({
  
                                                                                                status: true,
                                                                                                message: 'The booking has been successfully Updated'
                                                                                            })
  
                                                                                        }
  
                                                                                        

                                                                                    }

                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
                                                                                        }

                                                                                    }
                                                                                    else {
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                            })

                                                                                        }

                                                                                }else if(isAvailableDay.type=="both"){

                                                                                    console.log("Entered in Backto back id 0 Both1");
                                                                                    
                                                                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                    if(isIncludedInSummer)
                                                                                    var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                    else
                                                                                    var TotalConcecutiveDays = WinterConsecutiveDays
                                                                                    if(TotalConcecutiveDays>=Total_Count){
                                                                                                
                                                                          var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                          var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                          var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                          var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                          if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                            {

                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                            
                                                                            },
                                                                            { new: true },
                                                                            function (err, data) {
                                                                            
                                                                            
                                                                            });
                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                {

                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                },
                                                                                { new: true },
                                                                                function (err, data) {


                                                                                });

                                                                                var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                });

                                                                                const getyear = new Date(Start_final);
                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                var Noofcancellation = Totalday_old - Total_Count;

                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                })

                                                                                
                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                });

                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                
                                          
                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                    
                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;

                                                                                    let stopExecutionboth = { stop: false };

                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                
                                                                                        console.log(error)
                                                                                        stopExecutionboth = error
                                                                                    })

                                                                                   
                                                                                    if (stopExecutionboth.stop) {
                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                    }

                                                                                    var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                 var summerflag =0;
                                                                                 var winterflag =0;
                                                                                 
                                                                                 
                                                                                    if((((isAvailableDayBoth.summer_Arr).length))!=(((isAvailableDay.summer_Arr).legth))){
                                                                                        var User_RemovedDatesSUmmer = getWeekDaysCancel(Summer_Sdate_old, Summer_Edate_old, Summer_Sdate, Summer_Edate,No_Of_LOA);
                                                                                        summerflag=1;
                                                                                    }
                                                                                    
                                                                                    if((((isAvailableDayBoth.winter_Arr).length))!=(((isAvailableDay.winter_Arr).length))){

                                                                                        var User_RemovedDatesWinter = getWeekDaysCancel(Winter_Sdate_old, Winter_Edate_old, Winter_Sdate, Winter_Edate,No_Of_LOA);
                                                                                        winterflag=1;
                                                                                    }
                                                                                    

                                                                                    if((No_Of_LOA>0)){
                                                                                        if(summerflag ==1){

                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                return res.json({
                                                                                                    status: false,
                                                                                                    message: "You don't have enough days for LOA"
                                                                                                }) 
                                                                                            }
                                                                                            else if((User_RemovedDatesSUmmer.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                return res.json({
                                                                                                    status: false,
                                                                                                    message: "You don't have enough days for LOA"
                                                                                                }) 
    
    
                                                                                            }

                                                                                        }

                                                                                        else if(winterflag==1){

                                                                                             if((User_RemovedDatesWinter.outPutWeekday>0) &&(PendingSummerWeekdays==0)&&(winterflag==1)){
                                                                                                return res.json({
                                                                                                    status: false,
                                                                                                    message: "You don't have enough days for LOA"
                                                                                                }) 
                                                                                            }
                                                                                             if((User_RemovedDatesWinter.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                return res.json({
                                                                                                    status: false,
                                                                                                    message: "You don't have enough days for LOA"
                                                                                                }) 
    
    
                                                                                            }

                                                                                        }
                                                                                        

                                                                                        
                                                                                    }
                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                        console.log(error)
                                                                                        //console.log(TotalCancellation)
                                                                                        })
                                                                                        
                                                                                        var obj = Object();
                                                                                        obj.start = Start_final;
                                                                                        obj.end = End_final;
                                                                                        
                                                                                        var datas = getDaysInMonth_Sheduler(obj);
                                                                                        console.log(datas)
                                                                                        var arr = [];
                                                                                        
                                                                                        datas.forEach(function (item) {
                                                                                        Object.keys(item).forEach(function (key) {
                                                                                          arr.push(item[key]);
                                                                                          console.log(item[key]);
                                                                                        });
                                                                                        });
                                                                                        console.log(arr)
                                                                                        var index = arr.length - 1;
                                                                                        var Loa_Length = No_Of_LOA;
                                                                                        var WeekDay_Count_edit = 0;
                                                                                        var WeekEnd_Count_edit = 0;
                                                                                        
                                                                                        while (Loa_Length > 0) {
                                                                                        
                                                                                        
                                                                                        console.log(arr[index]);
                                                                                        let day = arr[index];
                                                                                        
                                                                                        if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                          WeekDay_Count_edit = WeekDay_Count_edit + 1;
                                                                                        
                                                                                        }
                                                                                        else {
                                                                                          WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
                                                                                        
                                                                                        }
                                                                                        
                                                                                        Loa_Length--;
                                                                                        index--;
                                                                                        }
                                                                                        
                                                                                        var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                        var WeekEnd_Count_edits = WeekEnd_Count_edit;
                                                                                        
                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                        {
                                                                                        
                                                                                        WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                        WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                        Total_Edit_Loa: No_Of_LOA,
                                                                                        PartialCancellation_Status: 1,
                                                                                        Updated_time: moment(Date.now()),
                                                                                        
                                                                                        },
                                                                                        
                                                                                        function (err, data) {
                                                                                        })

                                                                                        if (GetCancellationNumber.No_PartialCancellation) {

                                                                                            console.log("insde check status 3 in back to back 0 Both")

                                                                                            
                                                                                           
                                                                                            
                                                                                           if(isAvailableDayBoth.type == 'both'){

                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                            
                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-winterWeekdayWeekend.weekdaycnt            ;
                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                      
                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                var WE_day = result.Winter_WeekEndDays;
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;

                                                                                              
                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                    {

                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                        Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                        Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                        Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },

                                                                                                    function (err, data) {

                                                                                                        console.log('Completed the Summer part')
                                                                                                    });
                                                                                            })


                                                                                              

                                                                                           }
                                                                                            
                                                                                            
                                                                                            let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)
                                                                                            
                                                                                            //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")
                                                                                            
                                                                                            //update allocated cancellation days
                                                                                            
                                                                                            //reassigning

                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                             
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;
                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                var WE_day = result.Winter_WeekEndDays;
                                                                                              
                                                                                                let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+User_RemovedDatesSUmmer.outPutWeekday;
                                                                                                let RemaingWeekEnDys_sumer =  (SE_day - reAssignedWeekendCount)+User_RemovedDatesSUmmer.outPutWeekend;

                                                                                                let RemaingWeekDys =  (WS_day - reAssignedWeekDaysCount)+User_RemovedDatesWinter.outPutWeekday;
                                                                                                let RemaingWeekEnDys =  (WE_day - reAssignedWeekendCount)+User_RemovedDatesWinter.outPutWeekend;
                                                                                                //console.log(SS_day, SE_day, 'summer ss and se days')
                                                                                              
                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                    {
                                                                                              
                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                        Summer_WeekEndDays:RemaingWeekEnDys_sumer,
                                                                                                        Winter_WeekDays: RemaingWeekDys,
                                                                                                        Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },
                                                                                                    {
                                                                                                        new: true
                                                                                                    },
                                                                                              
                                                                                                    function (err, data) {
                                                                                              
                                                                                                        //console.log('GetCancelaltionBlock')
                                                                                                        //console.log('updated owner booking')
                                                                                                    });
                                                                                              })
                                                                                            
                                                                              
                                                                                            
                                                                                            //reassigning
                                                                                            }

                                                                                    if (No_Of_LOA > 0) { console.log("Enterd in Auto approval LOA Both");
                                                                                    console.log(User_RemovedDatesSUmmer,"-------------------User_RemovedDatesSUmmer");
                                                                                   
                                                                                    if(summerflag==1)
                                                                                    
                                                                                    DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesSUmmer.outPutWeekday, User_RemovedDatesSUmmer.outPutWeekend,req.body.start,req.body.end,MonthBookingStatus,exp_year,anni_month)
                                                                                    if(winterflag ==1)
                                                                                    DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesWinter.outPutWeekday, User_RemovedDatesWinter.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month)
                                                                                }

                                                                                manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                    {
                                                                                      No_PartialCancellation: 0,
                                                                                      Current_Time: moment(Date.now()),
                                                                                      Updated_time: moment(Date.now())
                                                                                    },
                                                                                    
                                                                                    function (err, data) {
                                                                                    
                                                                                    });
                                                                                        

                                                                                }
                                                                                else{

                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                      
                                                                                    })
                                                                                    var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                        {
                                                                                            No_PartialCancellation: No_Of_LOA,
                                                                                            Current_Time: moment(Date.now()),
                                                                                            Updated_time: moment(Date.now())
                                                                                        },

                                                                                        function (err, data) {

                                                                                        });

                                                                                        let stopExecutionboth = { stop: false }
                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecutionboth = error
                                                                                        })
    
                                                                                       
                                                                                        if (stopExecutionboth.stop) {
                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                        }

                                                                                        

                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                            var WeekdayCancelled_summer = Weekdays_prev - summerWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEndCancelled_summer = WeekEndDays_prev - summerWeekdayWeekend.weekendCnt;

                                                                                            
                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;

                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                    {

                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Summer_WeekDays: SS_day - WeekdayCancelled_summer,
                                                                                                        Summer_WeekEndDays: SE_day - WeekEndCancelled_summer,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },

                                                                                                    function (err, data) {

                                                                                                        console.log('Completed the winter part')
                                                                                                    });
                                                                                            })

                                                                                          
                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                            var WeekdayCancelled_winter = Weekdays_prev - winterWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEndCancelled_winter = WeekEndDays_prev - winterWeekdayWeekend.weekendCnt;

                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                var WE_day = result.Winter_WeekEndDays;

                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                    {

                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Winter_WeekDays: WS_day - WeekdayCancelled_winter,
                                                                                                        Winter_WeekEndDays: WE_day - WeekEndCancelled_winter,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },

                                                                                                    function (err, data) {

                                                                                                        console.log('Completed the winter part')
                                                                                                    });
                                                                                            })

                                                                                           

                                                                                        }else if(isAvailableDayBoth.type=="both"){

                                                                                            console.log("-----------JIIIO---------------");
                                                                                            
                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                var WE_day = result.Winter_WeekEndDays;
                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                var SE_day = result.Summer_WeekEndDays;


                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                {

                                                                                                    Boat_Id: Boat_id,
                                                                                                    Owner_Id: Owner_id,
                                                                                                    Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                    Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                    Summer_WeekDays: SS_day - WeekDay_Count_edit_summer,
                                                                                                    Summer_WeekEndDays: SE_day - WeekEnd_Count_edit_summer,
                                                                                                    IsActive: true,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                    console.log('Completed both part')
                                                                                                });
                                                                                            });


                                                 



                                                                                        }


                                
                                                                                  

                                                                                }

                                                                                
          
                                                                                let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                if(updateSchedule){
                                                                                    if (cancaledDays.length > 0) {

                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                        CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                        CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                        CancelDaysbefore24.save(function (err, saved) {
                                                                                                if (err) {
                                                                                                    return;
                                                                                                }

                                                                                            });
                                                                                    
                                                                                }
                                                                                let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
                                                                                if(MailSend){

                                                                                    res.json({
                                                                            
                                                                                        status: true,
                                                                                        message: 'The booking has been successfully Updated'
                                                                                    })
                                                                            
                                                                                }
                                                                            }


                                                                          }else{
                                                                              res.json({
                                                                                  status: false,
                                                                                  message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                              })

                                                                          }
                                                                          
                                                                          

                                                                                    }


                                                                                }



                                                                        });
                                                                    })


                                                                }

                                                            })




                                                        });//else inside function owner





                                                    });

                                                }
                                                else {

                                                   
                                                    var todaysdate = moment();
                                                   
                                                    var canceldate = moment(Cancelresults.Updated_time)
                                                    var dif = moment.duration(todaysdate.diff(canceldate));
                                                  
                                                    var Hrdif = Math.round(dif.asHours());

                                                   


                                                    if (Hrdif > 24) {

                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                    if (Total_Count > Totalday_old) {
                                                                        Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: [{ $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: Start_final_withoutTime_New } }, { end: { $gte: Start_final_withoutTime_New } }] }, { start_NoTime: Start_final_withoutTime_New }, { start_NoTime: End_final_withoutTime }] }).then(results => {

                                                                            if (results == null) {
    
    
    
                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;
    
                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},
    
                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
    
                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
    
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
    
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
    
    
                                                                                            if (isNextDaysError) return
    
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
    
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
    
                                                                                            }
    
                                                                                            if(isAvailableDay.type=="summer"){
    
                                                                                                if(SummerConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
                                                                                            else if(isAvailableDay.type=="winter"){
        
                                                                                                if(WinterConsecutiveDays>=Total_Count){
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
        
                                                                                                                Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
        
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
        
        
                                                                                                            });
        
                                                                                                            var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"winter");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
        
                                                                                                    }else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
                                                                                                }
        
                                                                                            }
                                                                                            else if(isAvailableDay.type=="both"){
        
                                                                                                if(isAvailableDay.bookingType == "Summer booking")
                                                                                                var consecutiveCount = SummerConsecutiveDays;
                                                                                                else
                                                                                                var consecutiveCount = WinterConsecutiveDays;
        
                                                                                                if(consecutiveCount>=Total_Count){
        
                                                                                                
                                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                                var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                                var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                                
                                                                                                if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
        
                                                                                                                Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
        
        
                                                                                                            });
        
                                                                                                            var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                            var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                  
                                                                                                            var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                            var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
    
                                                                                                            let stopExecutionboth = { stop: false }
                                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                                console.log(error)
                                                                                                                stopExecutionboth = error
                                                                                                            })
                        
                                                                                                           
                                                                                                            if (stopExecutionboth.stop) {
                                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                            }
    
                                                                                                            
    
                                                                                                            if(isAvailableDayBoth.type=="summer"){
                                                                                                                var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                                var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
    
                                                                                                            }else if(isAvailableDayBoth.type=="winter"){
    
                                                                                                                var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
    
                                                                                                            }else if(isAvailableDayBoth.type=="both"){
                                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                                var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
        
    
    
                                                                                                            }
    
                                                                 
    
                                                                                                            if(MonthBookingStatus ==1){
                                                                                                                
                                                                                                                //var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                                
                                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
        
                                                                                                            }
                                                                                                            
                                                                                                            else{
    
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                            }
    
                                                                                                            let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                            if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                                
        
                                                                                                }else{
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
                                                                                                
                                                                                                
                                                                                                }else{
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
                                                                                                
        
                                                                                            }
    
    
    
    
                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }
    
                                                                        })
                                                                       

                                    
                                                                    }
                                                                    //////////////////////////////////////////////////////////////////////////////////////
                                                                    else {

                                                                        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;
    
                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},
    
                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
    
    
                                                                                
                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })
    
                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }
    
                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })
    
    
                                                                                    if (isNextDaysError) return
    
                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){
    
                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{
    
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })
    
                                                                                    }
    
                                                                                    if(isAvailableDay.type=="summer"){
    
                                                                                        if(SummerConsecutiveDays>=Total_Count){
    
                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            })
    
                                                                                            //count of weekday and week end
    
                                                                                            if ((PendingSummerWeekdays >= WeekDay_Count || PendingSummerWeekEnddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation)>0)){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
    
                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
    
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;
                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })
                                                                                              
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                })
    
                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    //console.log(new Date(req.body.start).toISOString( ));
                                                                                                    //console.log(Startdate_old, Enddate_old, new Date(req.body.start), new Date(req.body.end),No_Of_LOA);
                                                                                                    let User_RemovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);
    
                                                                                                    if(No_Of_LOA>0){
                                                                                                        if((User_RemovedDates.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
                                                                                                        }
                                                                                                        else if((User_RemovedDates.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
    
    
                                                                                                        }
                                                                                                    }
    
                                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                        console.log(error)
                                                                                                        //console.log(TotalCancellation)
                                                                                                    })
    
                                                                                                    //get days and weeks 
                                                                                                    var obj = Object();
                                                                                                    obj.start = Start_final;
                                                                                                    obj.end = End_final;
    
                                                                                                    var datas = getDaysInMonth_Sheduler(obj);
                                                                                                    console.log(datas)
                                                                                                    var arr = [];
    
                                                                                                    datas.forEach(function (item) {
                                                                                                        Object.keys(item).forEach(function (key) {
                                                                                                            arr.push(item[key]);
                                                                                                            console.log(item[key]);
                                                                                                        });
                                                                                                    });
                                                                                                    //console.log(arr)
                                                                                                    var index = arr.length - 1;
                                                                                                    var Loa_Length = No_Of_LOA;
                                                                                                    var WeekDay_Count_edit = 0;
                                                                                                    var WeekEnd_Count_edit = 0;
                                                                                                    while (Loa_Length > 0) {
    
    
                                                                                                        console.log(arr[index]);
                                                                                                        let day = arr[index];
    
                                                                                                        if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                            WeekDay_Count_edit = WeekDay_Count_edit + 1;
    
                                                                                                        }
                                                                                                        else {
                                                                                                            WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
    
                                                                                                        }
    
                                                                                                        Loa_Length--;
                                                                                                        index--;
                                                                                                    }
                                                                                                    var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                                    var WeekEnd_Count_edits = WeekEnd_Count_edit;
    
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                        {
    
                                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                                            PartialCancellation_Status: 1,
                                                                                                            Updated_time: moment(Date.now()),
    
                                                                                                        },
    
                                                                                                        function (err, data) {
                                                                                                        })
    
    
    
                                                                                                    if (GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                        console.log("insde check status 2 in back to back 0");
    
                                                                                                       
    
                                                                                                        let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)
    
                                                                                                       // console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount::", "reAssignedWeekendCount::")
    
                                                                                                        //update allocated cancellation days
    
                                                                                                        //reassigning
    
                                                                                                       // console.log("HERE---",User_RemovedDates.outPutWeekday);
    
    
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                            console.log(result.Summer_WeekDays,"result.Summer_WeekDays");
                                                                                                           
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
                                                                                                            let RemainingDays_wd = (SS_day - reAssignedWeekDaysCount)+User_RemovedDates.outPutWeekday;
                                                                                                            let RemainingDays_we = (SE_day - reAssignedWeekendCount)+User_RemovedDates.outPutWeekend;
    
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                {
    
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: RemainingDays_wd,
                                                                                                                    Summer_WeekEndDays: RemainingDays_we,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
    
                                                                                                                function (err, data) {
    
                                                                                                                    console.log('BAckto backid 0 Check status 2')
                                                                                                                });
                                                                                                        })
    
                                                                                                        //reassigning
                                                                                                    }
    
                                                                                                    if (No_Of_LOA > 0) {
    
                                                                                                        DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDates.outPutWeekday, User_RemovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month)
    
    
                                                                                                    }
    
    
    
                                                                                                    //get days and weeks 
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                        {
                                                                                                            No_PartialCancellation: 0,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                        });
    
    
                                                                                                }
    
                                                                                                else {
                                                                                                    console.log("+++ENTER++");
    
                                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                        console.log(error)
                                                                                                        //console.log(TotalCancellation)
                                                                                                    })
    
                                                                                                    var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                        {
                                                                                                            No_PartialCancellation: No_Of_LOA,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                        });
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    //reassigning
                                                                                                    var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
    
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                        console.log(result)
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: SS_day - WeekdayCancelled,
                                                                                                                Summer_WeekEndDays: SE_day - WeekEndCancelled,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Back to back 0 check2 Summer')
                                                                                                            });
                                                                                                    })
    
                                                                                                    //reassigning
                                                                                                }
    
                                                                                               let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                if(updateSchedule){
    
                                                                                                    if (cancaledDays.length > 0) {
    
                                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                                if (err) {
                                                                                                                    return;
                                                                                                                }
    
                                                                                                            });
    
                                                                                                    }
    
                                                                                                }
                                                                                                
    
                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                if(MailSend){
    
                                                                                                    res.json({
    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
    
                                                                                                }
    
                                                                                                
    
                                                                                                
                                                                                             }
                                                                                            else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }else{
    
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
    
                                                                                    }
    
                                                                                    else if(isAvailableDay.type=="winter"){
    
                                                                                        if(WinterConsecutiveDays>=Total_Count){
    
                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            })
    
                                                                                            //count of weekday and week end
    
                                                                                            if ((PendingWinterWeekdays >= WeekDay_Count || PendingWinterWeekenddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation)>0)){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
    
                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
    
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;
                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })
                                                                                              
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                })
    
                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    //console.log(new Date(req.body.start).toISOString( ));
                                                                                                    //console.log(Startdate_old, Enddate_old, new Date(req.body.start), new Date(req.body.end),No_Of_LOA);
                                                                                                    let User_RemovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);
    
                                                                                                    if(No_Of_LOA>0){
                                                                                                        if((User_RemovedDates.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
                                                                                                        }
                                                                                                        else if((User_RemovedDates.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                            return res.json({
                                                                                                                status: false,
                                                                                                                message: "You don't have enough days for LOA"
                                                                                                            }) 
    
    
                                                                                                        }
                                                                                                    }
    
                                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                        console.log(error)
                                                                                                        //console.log(TotalCancellation)
                                                                                                    })
    
                                                                                                    //get days and weeks 
                                                                                                    var obj = Object();
                                                                                                    obj.start = Start_final;
                                                                                                    obj.end = End_final;
    
                                                                                                    var datas = getDaysInMonth_Sheduler(obj);
                                                                                                    console.log(datas)
                                                                                                    var arr = [];
    
                                                                                                    datas.forEach(function (item) {
                                                                                                        Object.keys(item).forEach(function (key) {
                                                                                                            arr.push(item[key]);
                                                                                                            console.log(item[key]);
                                                                                                        });
                                                                                                    });
                                                                                                    //console.log(arr)
                                                                                                    var index = arr.length - 1;
                                                                                                    var Loa_Length = No_Of_LOA;
                                                                                                    var WeekDay_Count_edit = 0;
                                                                                                    var WeekEnd_Count_edit = 0;
                                                                                                    while (Loa_Length > 0) {
    
    
                                                                                                        console.log(arr[index]);
                                                                                                        let day = arr[index];
    
                                                                                                        if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                            WeekDay_Count_edit = WeekDay_Count_edit + 1;
    
                                                                                                        }
                                                                                                        else {
                                                                                                            WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
    
                                                                                                        }
    
                                                                                                        Loa_Length--;
                                                                                                        index--;
                                                                                                    }
                                                                                                    var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                                    var WeekEnd_Count_edits = WeekEnd_Count_edit;
    
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                        {
    
                                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                                            PartialCancellation_Status: 1,
                                                                                                            Updated_time: moment(Date.now()),
    
                                                                                                        },
    
                                                                                                        function (err, data) {
                                                                                                        })
    
    
    
                                                                                                    if (GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                        console.log("insde check status 2 in back to back 0");
    
                                                                                                       
    
                                                                                                        let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)
    
                                                                                                      
    
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                            
                                                                                                           
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
    
                                                                                                            let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                            let RemaingWeekDys_weekend =  (WE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;
    
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                {
    
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                    Winter_WeekEndDays: RemaingWeekDys_weekend,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
    
                                                                                                                function (err, data) {
    
                                                                                                                    console.log('Winter BAckto backid 0 Check status 2')
                                                                                                                });
                                                                                                        })
    
                                                                                                        //reassigning
                                                                                                    }
    
                                                                                                    if (No_Of_LOA > 0) {
    
                                                                                                        DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDates.outPutWeekday, User_RemovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month)
    
    
                                                                                                    }
    
    
    
                                                                                                    //get days and weeks 
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                        {
                                                                                                            No_PartialCancellation: 0,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                        });
    
    
                                                                                                }
    
                                                                                                else {
                                                                                                    console.log("+++ENTER++");
    
                                                                                                    var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                        console.log(error)
                                                                                                        //console.log(TotalCancellation)
                                                                                                    })
    
                                                                                                    var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                        {
                                                                                                            No_PartialCancellation: No_Of_LOA,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                        });
    
                                                                                                    //update allocated cancellation days
    
                                                                                                    //reassigning
                                                                                                    var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
    
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                      
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekdayCancelled,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEndCancelled,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Back to back 0 check2 Summer')
                                                                                                            });
                                                                                                    })
    
                                                                                                    //reassigning
                                                                                                }
    
                                                                                               let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                if(updateSchedule){
    
                                                                                                    if (cancaledDays.length > 0) {
    
                                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                                if (err) {
                                                                                                                    return;
                                                                                                                }
    
                                                                                                            });
    
                                                                                                    }
    
                                                                                                }
                                                                                                
    
                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                if(MailSend){
    
                                                                                                    res.json({
    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
    
                                                                                                }
    
                                                                                                
    
                                                                                                
                                                                                             }
                                                                                            else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }else{
    
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
    
                                                                                    }
    
                                                                                 else if(isAvailableDay.type=="both"){
    
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;
    
                                                                                    if(consecutiveCount>=Total_Count){
        
                                                                                                
                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                        var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                        
    
                                                                                        if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
    
                                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
    
                                                                                                    //partial cancellation
                                                                                                    const getyear = new Date(Start_final);
                                                                                                    const Cancellationyear = getyear.getFullYear();
                                                                                                    var Noofcancellation = Totalday_old - Total_Count;
                                                                                                    
                                                                                                    //partial cancellation
    
    
                                                                                                    var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                    })
                                                                                                  
                                                                                                    var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                    })
                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                      
                                                                                                    if (Noofcancellation > GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                        var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                        //console.log(new Date(req.body.start).toISOString( ));
                                                                                                        //console.log(Startdate_old, Enddate_old, new Date(req.body.start), new Date(req.body.end),No_Of_LOA);
                                                                                                        let User_RemovedDatesSUmmer = getWeekDaysCancel(Startdate_old, Enddate_old, Summer_Sdate, Summer_Edate,No_Of_LOA);
                                                                                                        let User_RemovedDatesWinter = getWeekDaysCancel(Startdate_old, Enddate_old, Winter_Sdate, Winter_Edate,No_Of_LOA);
    
                                                                                                        if(No_Of_LOA>0){
                                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
                                                                                                            }
                                                                                                            else if((User_RemovedDatesSUmmer.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
    
    
                                                                                                            }
    
                                                                                                            else if((User_RemovedDatesWinter.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
                                                                                                            }
                                                                                                            else if((User_RemovedDatesWinter.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
    
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
    
    
                                                                                                            }
                                                                                                        }
    
                                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                            console.log(error)
                                                                                                            //console.log(TotalCancellation)
                                                                                                        })
    
                                                                                                        //get days and weeks 
                                                                                                        var obj = Object();
                                                                                                        obj.start = Start_final;
                                                                                                        obj.end = End_final;
    
                                                                                                        var datas = getDaysInMonth_Sheduler(obj);
                                                                                                        console.log(datas)
                                                                                                        var arr = [];
    
                                                                                                        datas.forEach(function (item) {
                                                                                                            Object.keys(item).forEach(function (key) {
                                                                                                                arr.push(item[key]);
                                                                                                                console.log(item[key]);
                                                                                                            });
                                                                                                        });
                                                                                                        console.log(arr)
                                                                                                        var index = arr.length - 1;
                                                                                                        var Loa_Length = No_Of_LOA;
                                                                                                        var WeekDay_Count_edit = 0;
                                                                                                        var WeekEnd_Count_edit = 0;
                                                                                                        while (Loa_Length > 0) {
    
    
                                                                                                            console.log(arr[index]);
                                                                                                            let day = arr[index];
    
                                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                                WeekDay_Count_edit = WeekDay_Count_edit + 1;
    
                                                                                                            }
                                                                                                            else {
                                                                                                                WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
    
                                                                                                            }
    
                                                                                                            Loa_Length--;
                                                                                                            index--;
                                                                                                        }
                                                                                                        var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                                        var WeekEnd_Count_edits = WeekEnd_Count_edit;
    
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                            {
    
                                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                                PartialCancellation_Status: 1,
                                                                                                                Updated_time: moment(Date.now()),
    
                                                                                                            },
    
                                                                                                            function (err, data) {
                                                                                                            })
    
    
    
                                                                                                        if (GetCancellationNumber.No_PartialCancellation) {
    
                                                                                                            console.log("insde check status 2 in back to back 0");
    
                                                                                                           
    
                                                                                                           let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)
    
                                                                                                            //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount::", "reAssignedWeekendCount::")
    
                                                                                                            //update allocated cancellation days
    
                                                                                                            //reassigning
    
                                                                                                           // console.log("HERE---",User_RemovedDates.outPutWeekday);
    
    
                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                console.log(result.Summer_WeekDays,"result.Summer_WeekDays");
                                                                                                               
                                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                                var SE_day = result.Summer_WeekEndDays;
                                                                                                                let RemainingDays_wd = (SS_day - reAssignedWeekDaysCount)+User_RemovedDatesSUmmer.outPutWeekday;
                                                                                                                let RemainingDays_we = (SE_day - reAssignedWeekendCount)+User_RemovedDatesSUmmer.outPutWeekend;
    
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                    {
    
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Summer_WeekDays: RemainingDays_wd,
                                                                                                                        Summer_WeekEndDays: RemainingDays_we,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
    
                                                                                                                    function (err, data) {
    
                                                                                                                        console.log('Both backid 0 Check status 2')
                                                                                                                    });
                                                                                                            })
    
                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                            
                                                                                                           
                                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                                var WE_day = result.Winter_WeekEndDays;
        
                                                                                                                let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+User_RemovedDatesWinter.outPutWeekday;
                                                                                                                let RemaingWeekDys_weekend =  (WE_day - reAssignedWeekendCount)+User_RemovedDatesWinter.outPutWeekend;
        
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                    {
        
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                        Winter_WeekEndDays: RemaingWeekDys_weekend,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
        
                                                                                                                    function (err, data) {
        
                                                                                                                        console.log('Both BAckto backid 0 Check status 2')
                                                                                                                    });
                                                                                                            })
    
                                                                                                            //reassigning
                                                                                                        }
    
                                                                                                        if (No_Of_LOA > 0) {
    
                                                                                                            DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesSUmmer.outPutWeekday, User_RemovedDatesSUmmer.outPutWeekend,Summer_Sdate,Summer_Edate,MonthBookingStatus,exp_year,anni_month)
                                                                                                            DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesWinter.outPutWeekday, User_RemovedDatesWinter.outPutWeekend, Winter_Sdate, Winter_Edate,MonthBookingStatus,exp_year,anni_month)
    
                                                                                                            //automatically approve cancellation
    
                                                                                                            }
    
    
    
                                                                                                        //get days and weeks 
    
                                                                                                        //update allocated cancellation days
    
                                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                            {
                                                                                                                No_PartialCancellation: 0,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                            });
    
    
                                                                                                    }
    
                                                                                                    /*var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                      
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - WeekEndDays_prev;
    
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - WeekEndDays_prev;*/
    
    
    
                                                                                                    
    
                                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                if(updateSchedule){
    
                                                                                                    if (cancaledDays.length > 0) {
    
                                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                                if (err) {
                                                                                                                    return;
                                                                                                                }
    
                                                                                                            });
    
                                                                                                    }
    
                                                                                                }
                                                                                                
    
                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                if(MailSend){
    
                                                                                                    res.json({
    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
    
                                                                                                }
    
                                                                                                        
    
                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
                                                                                        
                                                                                        
                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
    
    
    
                                                                                 }   
    
                                                                                   
    
                                                                            });
                                                                        })
                                                                      

                                                                    }


                                                                })



                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {
                                                        res.json({
                                                            status: false,
                                                            message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                        })
                                                    }

                                                }
                                            })
                                        })


                                }



                                //between Launch And PreLuanch
                                if (check_Status == "3" && specialDayCheck == 0) {



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            var _Length = result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                    if (Total_Count > Totalday_old) {
                                                        let getAllDaysChek3 = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                        let getAarrayDatesCheck3 = []

                                                        getAllDaysChek3.map((date) => getAarrayDatesCheck3.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                        Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: getAarrayDatesCheck3 }).then(results =>

                                                        // Schedule.findOne({isBookingPending:false,_id:{$ne:scheduleid},Boat_Id:Boat_id,IsActive:true,$or:[{$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]},{$and:[{start:{$lte:Start_final_withoutTime_New}},{end:{$gte:Start_final_withoutTime_New}}]},{start_NoTime:Start_final_withoutTime_New},{start_NoTime:End_final_withoutTime}]}).then(results=>
                                                        {
                                                            if (results == null) {


                                                                //Add 
                                                                console.log('Admin')
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                    {



                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                        Booking_ID: globalbookingid,
                                                                        Boat_Name: req.body.Boat_Name,
                                                                        Total_DaysBooked: Total_Count,
                                                                        WeekDay_Count: WeekDay_Count,
                                                                        WeekEnd_Count: WeekEnd_Count,
                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                        title: req.body.title,
                                                                        body: req.body.body,
                                                                        start: req.body.start,
                                                                        end: req.body.end,
                                                                        start_NoTime: Start_final_withoutTime,
                                                                        end_NoTime: End_final_withoutTime,
                                                                        goingDuration: req.body.goingDuration,
                                                                        comingDuration: req.body.comingDuration,
                                                                        isAllDay: req.body.isAllDay,
                                                                        category: req.body.category,
                                                                        dueDateClass: req.body.dueDateClass,
                                                                        location: req.body.location,
                                                                        attendees: req.body.attendees,
                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                        isPending: req.body.isPending,
                                                                        isFocused: req.body.isFocused,
                                                                        isVisible: req.body.isVisible,
                                                                        isReadOnly: req.body.isReadOnly,
                                                                        isPrivate: req.body.isPrivate,
                                                                        color: req.body.color,
                                                                        bgColor: req.body.bgColor,
                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                        Check_Status: req.body.Check_Status,
                                                                        commends: req.body.commends,
                                                                        dragBgColor: req.body.dragBgColor,
                                                                        borderColor: req.body.borderColor,
                                                                        customStyle: req.body.customStyle,
                                                                        raw: req.body.raw,
                                                                        state: req.body.state,
                                                                        User_RoleType: req.body.User_RoleType,
                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                        Status: Module_status,
                                                                        IsActive: req.body.IsActive,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now()),
                                                                        start_CancelledDate: StartDate_Cancelled,
                                                                        end_CancelledDate: end_date_old,
                                                                        Booking_Type: bookingType,
                                                                        cancaledDays

                                                                    },

                                                                    function (err, data) {

                                                                        //mail        

                                                                        const emailState = 'Successfully Edited.';
                                                                        const emailContent = `Dear ${OwnerDetails.First_Name}, <p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited by the Smart Boating Team</p>`;
                                                                        const emailContentAdmin = `Dear Adminsistrator,<p>The Smart Boating Team has successfully edited a booking for ${OwnerDetails.First_Name} on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                        const emailDetailName = 'Booking Details'
                                                                        const emailDetails = [
                                                                            { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                            { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                        ];
                                                                        const emailNameAndLink = {
                                                                            name: 'Login Link',
                                                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                        }


                                                                        var mailOptionsAdmin = {

                                                                            from: "noreply.smartboatbooking@gmail.com",
                                                                            to: "admin@smartboating.com.au",
                                                                            subject: 'Successfully Edited',
                                                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                        };

                                                                        transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                        });
                                                                        //mail

                                                                        res.json({

                                                                            status: true,
                                                                            message: 'The admin booking has been successfully Updated'
                                                                        })
                                                                    })


                                                            }
                                                            else {
                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }



                                                        })
                                                        //Add
                                                    }
                                                    else {

                                                        //Add 
                                                        console.log('Admin')
                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                            {



                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                Booking_ID: globalbookingid,
                                                                Boat_Name: req.body.Boat_Name,
                                                                Total_DaysBooked: Total_Count,
                                                                WeekDay_Count: WeekDay_Count,
                                                                WeekEnd_Count: WeekEnd_Count,
                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                title: req.body.title,
                                                                body: req.body.body,
                                                                start: req.body.start,
                                                                end: req.body.end,
                                                                start_NoTime: Start_final_withoutTime,
                                                                end_NoTime: End_final_withoutTime,
                                                                goingDuration: req.body.goingDuration,
                                                                comingDuration: req.body.comingDuration,
                                                                isAllDay: req.body.isAllDay,
                                                                category: req.body.category,
                                                                dueDateClass: req.body.dueDateClass,
                                                                location: req.body.location,
                                                                attendees: req.body.attendees,
                                                                recurrenceRule: req.body.recurrenceRule,
                                                                isPending: req.body.isPending,
                                                                isFocused: req.body.isFocused,
                                                                isVisible: req.body.isVisible,
                                                                isReadOnly: req.body.isReadOnly,
                                                                isPrivate: req.body.isPrivate,
                                                                color: req.body.color,
                                                                bgColor: req.body.bgColor,
                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                Check_Status: req.body.Check_Status,
                                                                commends: req.body.commends,
                                                                dragBgColor: req.body.dragBgColor,
                                                                borderColor: req.body.borderColor,
                                                                customStyle: req.body.customStyle,
                                                                raw: req.body.raw,
                                                                state: req.body.state,
                                                                User_RoleType: req.body.User_RoleType,
                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                Status: Module_status,
                                                                IsActive: req.body.IsActive,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now()),
                                                                start_CancelledDate: StartDate_Cancelled,
                                                                end_CancelledDate: end_date_old,
                                                                Booking_Type: bookingType,
                                                                cancaledDays

                                                            },

                                                            function (err, data) {

                                                                //mail

                                                                const emailState = 'Successfully Edited.';
                                                                const emailContent = `Dear ${OwnerDetails.First_Name}, <p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited </p>`;
                                                                const emailContentAdmin = `Dear Adminsistrator,The owner ${OwnerDetails.First_Name} has sucessfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}`
                                                                const emailDetailName = 'Booking Details'
                                                                const emailDetails = [
                                                                    { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                    { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                ];
                                                                const emailNameAndLink = {
                                                                    name: 'Login Link',
                                                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                }


                                                                var mailOptionsAdmin = {

                                                                    from: "noreply.smartboatbooking@gmail.com",
                                                                    to: "admin@smartboating.com.au",
                                                                    subject: 'Successfully Edited',
                                                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                };

                                                                transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                });
                                                                //mail

                                                                res.json({

                                                                    status: true,
                                                                    message: 'The admin booking has been successfully Updated'
                                                                })
                                                            })

                                                    }

                                                })


                                            })


                                        })
                                    }

                                    else//For Owner
                                    {
                                         

                                         
                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {
                                                Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                                {

                                                    if (Cancelresults == null) {


                                                        console.log('cancellation0::' + end_Date);



                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                   
                                                                    if (Total_Count > Totalday_old) {

                                                                        let allDaysBookedZero = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                        let arrayofBookZero = []

                                                                        allDaysBookedZero.map((date) => arrayofBookZero.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                                        Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: arrayofBookZero }).then(results =>

                                                                        // Schedule.findOne({isBookingPending:false,_id:{$ne:scheduleid},Boat_Id:Boat_id,IsActive:true,$or:[{$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]},{$and:[{start:{$lte:Start_final_withoutTime_New}},{end:{$gte:Start_final_withoutTime_New}}]},{start_NoTime:Start_final_withoutTime_New},{start_NoTime:End_final_withoutTime}]}).then(results=>
                                                                        {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                                        let stopExecution = { stop: false }
                                                                                       // console.log(start_Date, end_Date,"----------SAAAA");

                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })

                                                                                        //console.log(isAvailableDay.type,"-----------ISSS");
    
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
    
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
    
    
                                                                                            if (isNextDaysError) return
    
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
    
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            if(isAvailableDay.type=="summer"){

                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                                if(SummerConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }

                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                                                                
    
                                                                                                if(WinterConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"winter");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }

                                                                
                                                                                         else if(isAvailableDay.type=="both"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                                                                
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
    
                                                                                            if(consecutiveCount>=Total_Count){
    
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,end_date_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                    
                                                                                                       
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        

                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    


                                                                                                        }

                                                             

                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                            
    
    
                                                                                                        }
                                                                                                        
                                                                                                        else{

                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }

                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){

                                                                                                        if (cancaledDays.length > 0) {

                                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                                    if (err) {
                                                                                                                        return;
                                                                                                                    }
    
                                                                                                                });
    
                                                                                                        }

                                                                                                    }
                                                                                                    

                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                            
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    

                                                                                         }



                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })

                                                                    }
                                                                    else {

                                                                        var getBookedyear = new Date(req.body.start);
                                                                        var YearOne = getBookedyear.getFullYear();
                                                                        var getBookedyear = new Date(req.body.start);
                                                                        var YearOne = getBookedyear.getFullYear();
                                                                        var MonthOne = getBookedyear.getMonth()+1;
                                                                        var nextYearBook = (parseInt(YearOne)+1);
                                                                        if(MonthOne<anni_month)
                                                                        var exp_year = ""+YearOne+anni_month;
                                                                        else
                                                                        var exp_year =""+nextYearBook+anni_month;
                                                            

                                                                       

                                    
                                                                        console.log("ENTER ELE PART Backtobackid 0");


                                                                        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;
     

                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,req.body.start, req.body.end).catch((error) => {
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })

                                                                                


                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id, true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return


                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                          
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
          
                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){
          
                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{
          
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })
          
                                                                                    }

                                                                                 


                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        console.log("------------------------Free partial Summer----------------");
                                                                                        if(SummerConsecutiveDays >= Total_Count){

                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            });
                                                                                            if ((PendingSummerWeekdays >= WeekDay_Count || PendingSummerWeekEnddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end
                                                                                            {
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;

                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })

                                                                                                
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                });

                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    let stopExecutionboth = { stop: false };

                                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                        console.log(error)
                                                                                                        stopExecutionboth = error
                                                                                                    })
                
                                                                                                   
                                                                                                    if (stopExecutionboth.stop) {
                                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                    }
                                                                                                    if(isAvailableDayBoth.type == "both"){

                                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                        var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                        var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                        var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        
                                                                                                        var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                        var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                        var WinterStrtDate = new Date(winterstrat);
                                                                                                        WinterStrtDate.toISOString();

                                                                                                        var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                        var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                        var WinterEDate = new Date(winterend);
                                                                                                        WinterEDate.toISOString();

                                                                                                        var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                        var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                        var SummerStrtDate = new Date(summerstrat);
                                                                                                        SummerStrtDate.toISOString();

                                                                                                        var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                        var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                        var SummerEDate = new Date(summerend);
                                                                                                        SummerEDate.toISOString();

                                                                                   


                                                                                                        var winter_starrt_final = moment(req.body.start);
                                                                                                        var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime.toISOString());
                                                                                                        var winter_starrt_End = moment(req.body.end);
                                                                                                        var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                       // console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                        let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                        

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                        let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                        var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
                                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
                                                                                                              }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
          
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
          
                                                                                                              }                                                                
        
                                                                                                       }

                                                                                                    }
                                                                                                    else{

                                                                                                        let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                        if (No_Of_LOA > 0){

                                                                                                            if((UseremovedDates.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDates.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
        
                                                                                                       }

                                                                                                    }
                                                                                                   
                                                                                                    
                                                                                               
                                                                                               var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                console.log(error)
                                                                                                //console.log(TotalCancellation)
                                                                                            })

                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;

                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            console.log(datas)
                                                                                            var arr = [];

                                                                                            datas.forEach(function (item) {
                                                                                                Object.keys(item).forEach(function (key) {
                                                                                                    arr.push(item[key]);
                                                                                                    console.log(item[key]);
                                                                                                });
                                                                                            });
                                                                                            console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;

                                                                                            while (Loa_Length > 0) {


                                                                                                console.log(arr[index]);
                                                                                                let day = arr[index];

                                                                                                if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                    WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                }
                                                                                                else {
                                                                                                    WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                }

                                                                                                Loa_Length--;
                                                                                                index--;
                                                                                            }

                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {

                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                PartialCancellation_Status: 1,
                                                                                                Updated_time: moment(Date.now()),

                                                                                            },

                                                                                            function (err, data) {
                                                                                            })

                                                                                            console.log(isAvailableDayBoth.type,"------------------------FOOOOO");

                                                                                            if (GetCancellationNumber.No_PartialCancellation && isAvailableDayBoth.type =="summer") {

                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var MonthOne = getBookedyear.getMonth()+1;
                                                                                                var nextYearBook = (parseInt(YearOne)+1);
                                                                                                if(MonthOne<anni_month)
                                                                                                var exp_year = ""+YearOne+anni_month;
                                                                                                else
                                                                                                var exp_year =""+nextYearBook+anni_month;

                                                                                                console.log("insde check status 3 in back to back 0")

                                                                                                //console.log(Start_final, "Start_final", End_final, "End_final");


                                                                                                let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                                //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")

                                                                                                var cancaledDaysSummer = getAllCanceledDates(Startdate_old, Enddate_old, req.body.start, req.body.end);
                                                                                               // var UseremovedDateSummer_reassign = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);


                                                                                                //update allocated cancellation days

                                                                                                //reassigning


                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                    //console.log(result)
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                    let RemainingDays_wd = (SS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                    let RemainingDays_we = (SE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;

                                                                                                    console.log(SS_day, SE_day, 'summer ss and se days')

                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: RemainingDays_wd,
                                                                                                            Summer_WeekEndDays:RemainingDays_we,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
                                                                                                        {
                                                                                                            new: true
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('GetCancelaltionBlock')
                                                                                                            console.log('updated owner booking')
                                                                                                        });
                                                                                                })

                                                                                                //reassigning
                                                                                            }

                                                                                            if(isAvailableDayBoth.type == "both"){

                                                                                                var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));

                                                                                                var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                

                                                                                                if(GetCancellationNumber.No_PartialCancellation){
                                                                                                    if(AnniversaryStaus == 0){

                                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
    
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                        if(GetCancellationNumber.No_PartialCancellation >= cancaledDaysWinter.length){

                                                                                                            var winter_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysWinter.length;
                                                                                                            var summerLoa = cancaledDaysSummer.length-winter_Loa;

                                                                                                           

                                                                                                            
                                                                                                
                                                                                                        }else{
                                                                                                            var winter_Loa = cancaledDaysWinter.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                            var summerLoa = cancaledDaysSummer.length;   
                                                                                                        }

                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,summerLoa);
                                                                                                        var SummerReassign = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);
                                                                                                        console.log(UseremovedDatesSummer.outPutWeekday,UseremovedDatesSummer.outPutWeekend,"----------UseremovedDatesSummer");
                                                                                                        console.log(SummerReassign,"----------SummerReassign");
                                                                                                       
                                                                                                        var RemaingWeekDys_summer =  (SS_day - SummerReassign.outPutWeekday)+UseremovedDatesSummer.outPutWeekday;
                                                                                                        var RemaingWeekEnDys_summer =  (SE_day - SummerReassign.outPutWeekend)+UseremovedDatesSummer.outPutWeekend;

                                                                                                        
                                                                                                        //console.log(RemaingWeekDys_summer,RemaingWeekEnDys_summer,"-----------------REAAAA");
                                                                                                        
                                                                                                        if(GetCancellationNumber.No_PartialCancellation >= cancaledDaysWinter.length){

                                                                                                            var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end, cancaledDaysWinter.length);
                                                                                                
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                              {
                                                                                                      
                                                                                                                  Boat_Id: Boat_id,
                                                                                                                  Owner_Id: Owner_id,
                                                                                                                  Winter_WeekDays: WS_day - UseremovedDatesWinter.outPutWeekday,
                                                                                                                  Winter_WeekEndDays: WE_day - UseremovedDatesWinter.outPutWeekend,
                                                                                                                  Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                  Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                  IsActive: true,
                                                                                                                  Current_Time: moment(Date.now()),
                                                                                                                  Updated_time: moment(Date.now())
                                                                                                              },
                                                                                                      
                                                                                                              function (err, data) {
                                                                                                      
                                                                                                                  console.log('Completed the summer part in summer section')
                                                                                                              });
                                                                                                
                                                                                                        }else{

                                                                                                            var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end,winter_Loa);
                                                                                                            var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(WinterStrtDate, WinterEDate,cancaledDaysWinter.length)
        
                                                                                                            let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDatesWinter.outPutWeekday;
                                                                                                            let RemaingWeekEnDys_winter =  (WE_day - reAssignedWeekendCount)+UseremovedDatesWinter.outPutWeekend;

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                {
                                                                                                        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                    Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                    Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                    Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
                                                                                                        
                                                                                                                function (err, data) {
                                                                                                        
                                                                                                                    console.log('Completed the summer and winter part')
                                                                                                                });

                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, winter_Loa, 1, winter_Loa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');

                                                                                                        }
                                                                                                               let summersuccess = await Do_approveCancel(req.body._id, summerLoa, 1, summerLoa, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
                                                                                                    }); 
                                                                                                    
                                                                                                }

                                                                                                else{

                                                                                                           var Start_final_yearOne = moment(Startdate_old);
                                                                                                            var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                            let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                            var start_mydate = new Date(Startdate_old);
                                                                                                            var getMonthEndyear = new Date(Enddate_old);
                                                                                                            var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                            var exp_year =""+nextyear+anni_month;
                                                                                                            var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                            let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                            let YearOne_End_Date = lastday;
                                                                                                            var End_final_yearTwo = moment(Enddate_old);
                                                                                                            var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                            let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                            let YearTwo_Start_Date = firstDayTwo;
                                                                                                            let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                            var stopExecutionOne = { stop: false }
                                                                                                            var isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionOne = error
                                                                                                            });

                                                                                                            if(isAvailableDayYearOne.type == "winter"){

                                                                                                                let cancaledDaysWinter = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                                /*let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                                var yaerOneLoa = getBetweenScheduleDatesOne.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerOneLoa = cancaledDaysWinter.length;

                                                                                                                var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;
        
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                                //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                   
                                                                                                                     //let RemaingWeekDys =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                                     // let RemaingWeekEnDys =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                                                                                                                     let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                                     let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
                    
                    
                                                                                                                        console.log("_____________________YearOneWeek",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearOneWeeend",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                

                                                                                                                if(pendingLoas<0){



                                                                                                                    var UseremovedDates_winter = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_winter.outPutWeekday, UseremovedDates_winter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                                }

                                                                                                                
                
                                                                                                             
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearOne.type=="summer"){

                                                                                                                
                                                                                                                let cancaledDaysSummer = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                                let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                /*if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                                var yaerOneLoa = getBetweenScheduleDatesOne.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerOneLoa = cancaledDaysSummer.length;

                                                                                                                var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;
        
        
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                                var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                                   
                                                                                                                    var S_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (S_day - UseremovedDatesSummer_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                                      let RemaingWeekEnDys =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                    
                                                                                                                        console.log("_____________________YearOneSumer",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Summer_WeekDays: RemaingWeekDys,
                                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                
                                                                                                                if(pendingLoas<0){

                                                                                                                    var UseremovedDates_summer = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                                }

                                                                                                                
                
                                                                                                             }

                                                                                                             
                                                                                                            else if(isAvailableDayYearOne.type == "both"){

                                                                                                                var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                                var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                                var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]

                                                                                                                var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);

                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(async(result) => {
                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                    if(pendingLoas>0){

                                                                                                                        if(pendingLoas >= cancaledDaysWinter.length){

                                                                                                                            var winter_Loa = pendingLoas-cancaledDaysWinter.length;
                                                                                                                            var summer_Loa = cancaledDaysSummer.length-winter_Loa;
  
                                                                                                                           
                                                                                                                            
                
                                                                                                                        }else{
                                                                                                                            var winter_Loa = cancaledDaysWinter.length-pendingLoas;
                                                                                                                            var summer_Loa = cancaledDaysSummer.length;  
                                                                                                                          
                                                                                                                        }
  
                                                                                                                    }
  
                                                                                                                    else{
  
                                                                                                                        summer_Loa = cancaledDaysSummer.length;
                                                                                                                        winter_Loa = cancaledDaysWinter.length;
  
                                                                                                                    }     
                                                                                                                
                                                                                                                var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end,summer_Loa);
                                                                                                                
                                                                                                               
                                                                                                               
                                                                                                                var UseremovedDateSummer_reassign = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                               
                                                                                                                var RemaingWeekDys_summer =  (SS_day - UseremovedDateSummer_reassign.outPutWeekday);
                                                                                                                var RemaingWeekEnDys_smmer =  (SE_day - UseremovedDateSummer_reassign.outPutWeekend);
        
                                                                                                               
                                                                                                                if(pendingLoas >= cancaledDaysWinter.length){
        
                                                                                                                    
                                                                                                                   
                                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start,req.body.end, cancaledDaysWinter.length);
        
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                                     {
                                                                                                             
                                                                                                                         Boat_Id: Boat_id,
                                                                                                                         Owner_Id: Owner_id,
                                                                                                                         Winter_WeekDays: WS_day - UseremovedDatesWinter.outPutWeekday,
                                                                                                                         Winter_WeekEndDays: WE_day - UseremovedDatesWinter.outPutWeekend,
                                                                                                                         Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                         Summer_WeekEndDays:RemaingWeekEnDys_smmer,
                                                                                                                         IsActive: true,
                                                                                                                         Current_Time: moment(Date.now()),
                                                                                                                         Updated_time: moment(Date.now())
                                                                                                                     },
                                                                                                             
                                                                                                                     function (err, data) {
                                                                                                             
                                                                                                                         console.log('Completed the summer part')
                                                                                                                     });
        
                                                                                                                }else{
        
                                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start,req.body.end,winter_Loa);
                                                                                                                    var UseremovedDatesWinter_reassign = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                                    //var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_One, Summer_Edate_One,cancaledDaysSummer.length)
                                                                                                                   // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                                    let RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday);
                                                                                                                    let RemaingWeekEnDys_winter=  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend);
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                                        {
                                                                                                                
                                                                                                                            Boat_Id: Boat_id,
                                                                                                                            Owner_Id: Owner_id,
                                                                                                                            Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                            Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                            Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                            IsActive: true,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now())
                                                                                                                        },
                                                                                                                
                                                                                                                        function (err, data) {
                                                                                                                
                                                                                                                            console.log('Completed the summer and winter part')
                                                                                                                        });
                                                                                                                   
                                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, winter_Loa, 1, cancaledDaysWinter.length, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
        
                                                                                                                }
        
                                                                                                                         
        
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');
        
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                   
                                                                                                                });

                                                                                                            }

                                                                                                            //// Year Two ///

                                                                                                            var stopExecutionTwo = { stop: false }
                                                                                                            var isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionTwo = error
                                                                                                            })

                                                                                                            
                                                                                                                
                                                                                                            if(isAvailableDayYearTwo.type == "winter"){

                                                                                                                let cancaledDaysWinterTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                                /*let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                                var yaerTwoLoa = getBetweenScheduleDatesTwo.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerTwoLoa = cancaledDaysWinterTwo.length;

                                                                                                                if(pendingLoas>0)

                                                                                                                var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                                else
                                                                                                                var RemaingLoas =yaerTwoLoa;
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                                //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                                      let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
                    
                                                                                                                        console.log("_____________________YearTwo",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwo",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                if(RemaingLoas>0){

                                                                                                                    var UseremovedDates_winter_two = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_winter_two.outPutWeekday, UseremovedDates_winter_two.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                    
                                                               

                                                                                                                }

                                                                                                                                                                 
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "summer"){

                                                                                                                let cancaledDaysSummerTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                               /* let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                                var yaerTwoLoa = getBetweenScheduleDatesTwo.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerTwoLoa = cancaledDaysSummerTwo.length;
        
                                                                                                                if(pendingLoas>0)

                                                                                                                var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                                else
                                                                                                                var RemaingLoas =yaerTwoLoa;
                                                                                                            
                                                                                                
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                                //var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                   
                                                                                                                    var S_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (S_day - UseremovedDates.outPutWeekday);
                                                                                                                      let RemaingWeekEnDys =  (SE_day - UseremovedDates.outPutWeekend);
                    
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Summer_WeekDays: RemaingWeekDys,
                                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                if(RemaingLoas>0){

                                                                                                                    var UseremovedDates_summer = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
                

                                                                                                                }

                                                                                                                
                                                                                                             
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "both"){

                                                                                                                var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                                var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                                var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]

                                                                                                                var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);

                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                    console.log(pendingLoas,"----------------------pendingLoas")
                                                                                                                    console.log(cancaledDaysSummer.length,"-----------------cancaledDaysSummer.length)");

                                                                                                                    if(pendingLoas>0){

                                                                                                                        if(pendingLoas >= cancaledDaysWinter.length){

                                                                                                                            var winter_Loa = pendingLoas-cancaledDaysWinter.length;
                                                                                                                            var summer_Loa = cancaledDaysSummer.length-winter_Loa;

                                                                                                                           
                                                                                                                            
                
                                                                                                                        }else{

                                                                                                                            var winter_Loa = cancaledDaysWinter.length-pendingLoas;
                                                                                                                            var summer_Loa = cancaledDaysSummer.length;   
                                                                                                                            
                                                                                                                        }

                                                                                                                    }

                                                                                                                    else{

                                                                                                                        summer_Loa = cancaledDaysSummer.length;
                                                                                                                        winter_Loa = cancaledDaysWinter.length;

                                                                                                                    }
                                                                                                                   
                                                                                                                    
                                                                                                                    var RemaingLoas_both = pendingLoas-(summer_Loa+winter_Loa);

                                                                                                                console.log(summer_Loa,winter_Loa,"------------oooo");

                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end,summer_Loa);

                                                                                                              
                                                                                                                
                                                                                                                //var RemaingWeekDys_winter = WS_day-UseremovedDatesWinter.outPutWeekday;
                                                                                                                //var RemaingWeekEnDys_winter = WE_day-UseremovedDatesWinter.outPutWeekend;
                                                                                                               
                                                                                                                var UseremovedDatesSummer_reassign = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                               
                                                                                                                var RemaingWeekDys_summer =  (SS_day - UseremovedDatesSummer_reassign.outPutWeekday);
                                                                                                                var RemaingWeekEnDys_summer =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend);
                                                                                                                console.log(pendingLoas,"----------OKKkpendingLoas");
        
                                                                                                               
                                                                                                                if(pendingLoas >= cancaledDaysWinter.length){
        
                                                                                                                    
                                                                                                                   
                                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start,req.body.end, cancaledDaysWinter.length);
        
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                     {
                                                                                                             
                                                                                                                         Boat_Id: Boat_id,
                                                                                                                         Owner_Id: Owner_id,
                                                                                                                         Winter_WeekDays: WS_day - UseremovedDatesWinter.outPutWeekday,
                                                                                                                         Winter_WeekEndDays: WE_day - UseremovedDatesWinter.outPutWeekend,
                                                                                                                         Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                         Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                         IsActive: true,
                                                                                                                         Current_Time: moment(Date.now()),
                                                                                                                         Updated_time: moment(Date.now())
                                                                                                                     },
                                                                                                             
                                                                                                                     function (err, data) {
                                                                                                             
                                                                                                                         console.log('Completed the summer part')
                                                                                                                     });
        
                                                                                                                }else{
        
                                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start,req.body.end,winter_Loa);
                                                                                                                    
        
                                                                                                                   // var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_Two, Summer_Edate_Two,cancaledDaysSummer.length)
                                                                                                                   // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                                    //let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                                    //let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                                    let RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter.outPutWeekday);
                                                                                                                    let RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter.outPutWeekend);
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                        {
                                                                                                                
                                                                                                                            Boat_Id: Boat_id,
                                                                                                                            Owner_Id: Owner_id,
                                                                                                                            Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                            Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                            Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                            IsActive: true,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now())
                                                                                                                        },
                                                                                                                
                                                                                                                        function (err, data) {
                                                                                                                
                                                                                                                            console.log('Completed the summer and winter part')
                                                                                                                        });
                                                                                                                   
                                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, winter_Loa, 1, cancaledDaysWinter.length, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
        
                                                                                                                }
        
                                                                                                                         
        
                                                                                                            
        
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, summer_Loa, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
                                                                                                                
                                                                                                                
                                                                                                   
                                                                                                                });


                                                                                                            }

                                                                                                            /// ENd year two//

                                                                                   

                                                                                                }

                                                                                                }

                                                                                                else{

                                                                                                    if(AnniversaryStaus ==0){

                                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;

                                                                                                        var winterLoa = cancaledDaysWinter.length;
                                                                                                        var summer_Loa = cancaledDaysSummer.length;
                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, cancaledDaysWinter.length, 1, cancaledDaysWinter.length, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                        let summersuccess = await Do_approveCancel(req.body._id, cancaledDaysSummer.length, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');

                                                                                                    }
                                                                                                    else{


                                                                                                        var Start_final_yearOne = moment(Startdate_old);
                                                                                                        var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                        let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                        var start_mydate = new Date(Startdate_old);
                                                                                                        var getMonthEndyear = new Date(Enddate_old);
                                                                                                        var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                        var exp_year =""+nextyear+anni_month;
                                                                                                        var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                        let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                        let YearOne_End_Date = lastday;
                                                                                                        var End_final_yearTwo = moment(Enddate_old);
                                                                                                        var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                        let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                        let YearTwo_Start_Date = firstDayTwo;
                                                                                                        let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                        let cancaledDaysOne = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);
                                                                                                        


                                                                                                       var yaerOneLoa = cancaledDaysOne.length;

                                                                                                        let stopExecutionOne = { stop: false }
                                                                                                        let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                            console.log(error)
                                                                                                            stopExecutionOne = error
                                                                                                        })

                                                                                                        if(isAvailableDayYearOne.type=="both"){

                                                                                                            var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                            var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                            var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                            var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]
                                                                                                            var cancaledDaysWinterOne = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                            var cancaledDaysSummerOne = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);
                                                                                                            var winterLoaOne = cancaledDaysWinterOne.length;
                                                                                                            var summer_LoaOne = cancaledDaysSummerOne.length;
                                                                                                            var UseremovedDatesWinter_yearOne = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,winterLoa);
                                                                                                            var UseremovedDatesSummer_yearOne = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end, summer_LoaOne);
                                                                                                            if(winterLoaOne>0){
                                                                                                                 let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearOne.outPutWeekday, UseremovedDatesWinter_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
                                                                                                            
        
                                                                                                            }
            
                                                                                                            if(summer_LoaOne>0) {
        
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearOne.outPutWeekday, UseremovedDatesSummer_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');
        
                                                                                                            }     
        

                                                                                                        }


                                                                                                        else{

                                                                                                           

                                                                                                            var UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);

                                                                                                            if(isAvailableDayYearOne.type=="winter"){

                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                            }else{

                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                            }

                                                                                                           
                                                                                                            
                                                                                                            

                                                                                                        }

                                                                                                        //// Year YWO ////

                                                                                                        let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                       let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                                       if(getBetweenScheduleDatesTwo.length==cancaledDaysTwo.length)

                                                                                                       var yaertwoLoa = getBetweenScheduleDatesTwo.length;

                                                                                                       else

                                                                                                       var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;

                                                                                                        let stopExecutionTwo = { stop: false }
                                                                                                        let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                            console.log(error)
                                                                                                            stopExecutionTwo = error
                                                                                                        })


                                                                                                        if(isAvailableDayYearTwo.type=="both"){

                                                                                                            var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                            var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                            var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                            var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]
                                                                                                            var cancaledDaysWinterTwo = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                                            var cancaledDaysSummerTwo = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);
                                                                                                            var winterLoaTwo = cancaledDaysWinterTwo.length;
                                                                                                            var summer_LoaTwo = cancaledDaysSummerTwo.length;
                                                                                                            var UseremovedDatesWinter_yearTwo = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,winterLoaTwo);
                                                                                                            var UseremovedDatesSummer_yearTwo = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start,req.body.end, summer_LoaTwo);
                                                                                                            if(winterLoaTwo>0){
                                                                                                                 let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearTwo.outPutWeekday, UseremovedDatesWinter_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                                                                                                            
        
                                                                                                            }
            
                                                                                                            if(summer_LoaTwo>0) {
        
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearTwo.outPutWeekday, UseremovedDatesSummer_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
        
                                                                                                            }     

                                                                                                        }


                                                                                                        else{

                                                                                                            var UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                                            if(isAvailableDayYearTwo.type=="winter"){

                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');

                                                                                                            }else{

                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');

                                                                                                            }

                                                                                                        }


                                                                                                        

                                                                                                    }
                                                                                                    ///////////
                                                                                                   
                                                                                                
                                                                                                }



                                                                                                ////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                
                                                                                               

                                                                                            }
                                                                                            else{

                                                                                                 var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var MonthOne = getBookedyear.getMonth()+1;
                                                                                                var nextYearBook = (parseInt(YearOne)+1);
                                                                                                if(MonthOne<anni_month)
                                                                                                var exp_year = ""+YearOne+anni_month;
                                                                                                else
                                                                                                var exp_year =""+nextYearBook+anni_month;
                                                                                               

                                                                                                if (No_Of_LOA > 0) { 
                                                                                                    
                                                                                                    console.log("Enterd in Auto approval LOA-----HERE");

                                                                                               

                                                                                                var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                //console.log( UseremovedDates.outPutWeekday,UseremovedDates.outPutWeekend,"----------------JJJ");

                                                                                                //console.log(exp_year,"=====================exp_year");

                                                                                                 DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);

                                                                                                               
                                                                                            }


                                                                                            }

                                                                                            
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: 0,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });
                                                                                             
                                                                                        
                                                                                        }else{

                                                                                            var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                              
                                                                                            })
                                                                                            var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: No_Of_LOA,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });

                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }

                                                                                              

                                                                                                if(isAvailableDayBoth.type== "both"){

                                                                                                    

                                                                                                    if(AnniversaryStaus == 0){

                                                                                                        

                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        
                                                                                                        var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                        var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                  
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
    
                                                                                                          
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                    Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                    Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                    Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the Summer part of both in Summer')
                                                                                                                });
                                                                                                        })

                                                                                                    }

                                                                                                    else{

                                                                                                        

                                                                                                        var Start_final_yearOne = moment(Startdate_old);
                                                                                                        var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                        let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                    
                                                                                                      var start_mydate = new Date(Startdate_old);
                                                                                                      var getMonthEndyear = new Date(Enddate_old);
                                                                                                      var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                      var exp_year =""+nextyear+anni_month;
                                                                                                      var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                      let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                      let YearOne_End_Date = lastday;

                                                                                                      let cancaledDays = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                      let getBetweenScheduleDates = getDaysBetweenDatesYearFirst(YearOne_Start_Date,YearOne_End_Date);
                                                                                                      console.log(getBetweenScheduleDates,"----------getBetweenScheduleDates")
                                                                                                      console.log(YearOne_Start_Date,YearOne_End_Date,"----------YearOne_End_Date")

                                                                                                      if(getBetweenScheduleDates.length == cancaledDays.length)

                                                                                                      var yaerOneLoa = getBetweenScheduleDates.length;

                                                                                                      else

                                                                                                      var yaerOneLoa = getBetweenScheduleDates.length-cancaledDays.length;
                                                                                                      
                                                                                                     // var yaerOneLoa =cancaledDays.length;
                                                                                                      var User_RemovedDatesYearOne = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                      console.log(User_RemovedDatesYearOne,"----------------User_RemovedDatesYearOne");
                                                                                                      console.log(yaerOneLoa,"-------------------yaerOneLoaSummer");

                                                                                                      let stopExecutionOne = { stop: false }
                                                                                                      let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                          console.log(error)
                                                                                                          stopExecutionOne = error
                                                                                                      })

                                                                                                                                                                  
                                                                                                      if(isAvailableDayYearOne.type =="winter"){

                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: WS_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                    Winter_WeekEndDays: WE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the year One Winetr part')
                                                                                                                });

                                                                                                        });

                                                                                                    }

                                                                                                    else if(isAvailableDayYearOne.type =="summer"){

                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                            var S_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: S_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                    Summer_WeekEndDays: SE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the year One Summer part')
                                                                                                                });

                                                                                                        });

                                                                                                    }

                                                                                                    
                                                                                                    else if(isAvailableDayYearOne.type =="both"){


                                                                                                          
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.summer_Arr));
                                                                                                        var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.winter_Arr));
                                                                                                        if(getBetweenScheduleDates.length == cancaledDays.length){

                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;

                                                                                                        }else{
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt- User_RemovedDatesYearOne.outPutWeekday;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-User_RemovedDatesYearOne.outPutWeekend;
                                                                                                        }
                                                                                                       
                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp}).then(result => {
                                                                                                                  
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
    
                                                                                                          
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                    Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                    Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                    Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the Both year one part')
                                                                                                                });
                                                                                                        })
  
  
  
                                                                                                        }

                                                                                                        ///// Year Two /////

                                                                                                var End_final_yearTwo = moment(Enddate_old);
                                                                                                var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                              let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                              let YearTwo_Start_Date = firstDayTwo;
                                                                                              let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                              let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                              let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                              /*if(getBetweenScheduleDatesTwo.length==cancaledDaysTwo.length)

                                                                                              var yaertwoLoa = getBetweenScheduleDatesTwo.length;

                                                                                              else

                                                                                              var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;*/

                                                                                              var yaertwoLoa = cancaledDaysTwo.length;

                                                                                              var User_RemovedDatesYearTwo = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                              console.log(yaertwoLoa,"-------------------yaerTwoLoa");

                                                                                              let stopExecutionTwo = { stop: false }
                                                                                              let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                  console.log(error)
                                                                                                  stopExecutionTwo = error
                                                                                              })

                                                                                              if(isAvailableDayYearTwo.type =="winter"){

                                                                                                  OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                              
                                                                                                      var WS_day = result.Winter_WeekDays;
                                                                                                      var WE_day = result.Winter_WeekEndDays;
                                                                                              
                                                                                                      OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                          {
                                                                                              
                                                                                                              Boat_Id: Boat_id,
                                                                                                              Owner_Id: Owner_id,
                                                                                                              Winter_WeekDays: WS_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                              Winter_WeekEndDays: WE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                              IsActive: true,
                                                                                                              Current_Time: moment(Date.now()),
                                                                                                              Updated_time: moment(Date.now())
                                                                                                          },
                                                                                              
                                                                                                          function (err, data) {
                                                                                              
                                                                                                              console.log('Completed the year two Winetr part')
                                                                                                          });
                                                                                              
                                                                                                  });
                                                                                              
                                                                                              }

                                                                                              else if(isAvailableDayYearTwo.type =="summer"){

                                                                                                  OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                              
                                                                                                      var S_day = result.Summer_WeekDays;
                                                                                                      var SE_day = result.Summer_WeekEndDays;
                                                                                              
                                                                                                      OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                          {
                                                                                              
                                                                                                              Boat_Id: Boat_id,
                                                                                                              Owner_Id: Owner_id,
                                                                                                              Summer_WeekDays: S_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                              Summer_WeekEndDays: SE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                              IsActive: true,
                                                                                                              Current_Time: moment(Date.now()),
                                                                                                              Updated_time: moment(Date.now())
                                                                                                          },
                                                                                              
                                                                                                          function (err, data) {
                                                                                              
                                                                                                              console.log('Completed the year Two Summer part')
                                                                                                          });
                                                                                              
                                                                                                  });
                                                                                              
                                                                                              }

                                                                                              else if(isAvailableDayYearTwo.type =="both"){


  
                                                                                                  var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.summer_Arr));
                                                                                                  var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.winter_Arr));

                                                                                                  if(getBetweenScheduleDatesTwo.length==cancaledDaysTwo.length){

                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;

                                                                                                  }else{

                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-User_RemovedDatesYearTwo.outPutWeekday;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt- User_RemovedDatesYearTwo.outPutWeekend;
                                                                                                  }
                                                                                                  
                                                                                                 
                                                                                                  var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                  var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                  OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).then(result => {
                                                                                                            
                                                                                                      var WS_day = result.Winter_WeekDays;
                                                                                                      var WE_day = result.Winter_WeekEndDays;
                                                                                                      var SS_day = result.Summer_WeekDays;
                                                                                                      var SE_day = result.Summer_WeekEndDays;
                                                                                                  
                                                                                                    
                                                                                                      OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                          {
                                                                                                  
                                                                                                              Boat_Id: Boat_id,
                                                                                                              Owner_Id: Owner_id,
                                                                                                              Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                              Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                              Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                              Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                              IsActive: true,
                                                                                                              Current_Time: moment(Date.now()),
                                                                                                              Updated_time: moment(Date.now())
                                                                                                          },
                                                                                                  
                                                                                                          function (err, data) {
                                                                                                  
                                                                                                              console.log('Completed the Both year two part')
                                                                                                          });
                                                                                                  })
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  }


                                                                                              /// End Year two ///



                                                                                                    }

                                                                                              


                                                                                                }else{

                                                                                                    console.log("-------------------------------");

                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;

                                                                                                    console.log(exp_year,"-----------EXPPPP::");

                                                                                                    var UseremovedDates_Summer = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start,req.body.end,Noofcancellation);

                                                                                                    
                                                                                        

                                                                                                    //var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    //var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
    
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                  
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                        //console.log( WeekdayCancelled,WeekEndCancelled);
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year},
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                //Summer_WeekDays:  SS_day-WeekdayCancelled,
                                                                                                                //Summer_WeekEndDays:SE_day- WeekEndCancelled,
                                                                                                                Summer_WeekDays:  SS_day-UseremovedDates_Summer.outPutWeekday,
                                                                                                                Summer_WeekEndDays:SE_day- UseremovedDates_Summer.outPutWeekend,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the Summer part')
                                                                                                            });
                                                                                                    })

                                                                                                }

                      
                                                                                          

                                                                                        }

                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                        if(updateSchedule){

                                                                                            if (cancaledDays.length > 0) {

                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                        if (err) {
                                                                                                            return;
                                                                                                        }

                                                                                                    });

                                                                                            }
                                                                                            let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                            let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                            if(MailSend){
      
                                                                                                res.json({
      
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
      
                                                                                            }
      
                                                                                            

                                                                                        }

                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }

                                                                                        }
                                                                                        else {
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                })

                                                                                            }
                                                                                    }
                                                                                    else if(isAvailableDay.type=="winter"){ 

                                                                                        console.log("------------------------Free partial Winter----------------");
                                                                                        if(WinterConsecutiveDays >= Total_Count){

                                                                                         

                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            });
                                                                                            if ((PendingWinterWeekdays >= WeekDay_Count || PendingWinterWeekenddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end
                                                                                            {
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;

                                                                                               
                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })

                                                                                                
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                });

                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    let stopExecutionboth = { stop: false };

                                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                        console.log(error)
                                                                                                        stopExecutionboth = error
                                                                                                    })
                
                                                                                                   
                                                                                                    if (stopExecutionboth.stop) {
                                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                    }
                                                                                                   

                                                                                                    if(isAvailableDayBoth.type == "both"){

                                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                        var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                        var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                        var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        
                                                                                                        var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                        var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                        var WinterStrtDate = new Date(winterstrat);
                                                                                                        WinterStrtDate.toISOString();

                                                                                                        var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                        var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                        var WinterEDate = new Date(winterend);
                                                                                                        WinterEDate.toISOString();

                                                                                                        var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                        var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                        var SummerStrtDate = new Date(summerstrat);
                                                                                                        SummerStrtDate.toISOString();

                                                                                                        var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                        var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                        var SummerEDate = new Date(summerend);
                                                                                                        SummerEDate.toISOString();

                                                                                   


                                                                                                        var winter_starrt_final = moment(req.body.start);
                                                                                                        var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime.toISOString());
                                                                                                        var winter_starrt_End = moment(req.body.end);
                                                                                                        var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                       // console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                        let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                        

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                        let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                        var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
                                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
                                                                                                              }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
          
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
          
                                                                                                              }                                                                
        
                                                                                                       }

                                                                                                    }else{

                                                                                                        let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDates.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDates.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
        
                                                                                                       }

                                                                                                    }
    


           
                                                                                               var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                console.log(error)
                                                                                                //console.log(TotalCancellation)
                                                                                            })

                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;

                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            //console.log(datas)
                                                                                            var arr = [];

                                                                                            datas.forEach(function (item) {
                                                                                                Object.keys(item).forEach(function (key) {
                                                                                                    arr.push(item[key]);
                                                                                                    console.log(item[key]);
                                                                                                });
                                                                                            });
                                                                                            //console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;

                                                                                            while (Loa_Length > 0) {


                                                                                                console.log(arr[index]);
                                                                                                let day = arr[index];

                                                                                                if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                    WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                }
                                                                                                else {
                                                                                                    WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                }

                                                                                                Loa_Length--;
                                                                                                index--;
                                                                                            }

                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {

                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                PartialCancellation_Status: 1,
                                                                                                Updated_time: moment(Date.now()),

                                                                                            },

                                                                                            function (err, data) {
                                                                                            })
                                                                                            

                                                                                            if (GetCancellationNumber.No_PartialCancellation &&isAvailableDayBoth.type == "winter") {

                                                                                                console.log("insde check status 3 in back to back 0 Winter")

                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                                var MonthOne = getBookedyear.getMonth()+1;
                                                                                                var nextYearBook = (parseInt(YearOne)+1);
                                                                                                if(MonthOne<anni_month)
                                                                                                var exp_year = ""+YearOne+anni_month;
                                                                                                else
                                                                                                var exp_year =""+nextYearBook+anni_month;

                                                                                             

                                                                                                //reassigning
                                                                                                let cancaledDaysWinter = getAllCanceledDates(Startdate_old, Enddate_old, req.body.start, req.body.end);
                                                                                                
                                                                                                let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);
                                                                                                //var UseremovedDatesWinter_reassign = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,cancaledDaysWinter.length);

                                                                                                let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                                    console.log(reAssignedWeekDaysCount,"reAssignedWeekDaysCount");
                                                                                                    console.log(reAssignedWeekendCount,"reAssignedWeekendCount");
                                                                                                    console.log(Noofcancellation,"Noofcancellation");
    

                                                                                                    
                                                                                                

                                                                                                
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                   
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                    // let RemaingWeekDys =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                     // let RemaingWeekEnDys =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                                                                                                     let RemaingWeekDys =  (WS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                    let RemaingWeekEnDys =  (WE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;

    
                                                                                                        console.log("_____________________REE",RemaingWeekDys);
                                                                                                        console.log("_____________________WWW",RemaingWeekEnDys);
                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                            {
                                                                                                                new: true
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                //console.log('updated owner booking')
                                                                                                            });

                                                                                                    

                                                                                                    
                                                                                                   
                                                                                                })

                                                                                             

          

                                                                                                //reassigning
                                                                                            }

                                                                                            

                                                                                                if(isAvailableDayBoth.type == "both"){

                                                                                                   

                                                                                                    var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
    
                                                                                                    var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                    var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);

                                                                                                   

                                                                                                    if (GetCancellationNumber.No_PartialCancellation)
                                                                                                    {

                                                                                                       

                                                                                                        if(AnniversaryStaus==0){

                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                                            if(MonthOne<anni_month)
                                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                                            else
                                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                                                                                                                       
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                                   
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
                                                                                                        if(GetCancellationNumber.No_PartialCancellation >= cancaledDaysSummer.length){

                                                                                                            var summer_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysSummer.length;
                                                                                                            var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                            

                                                                                                        }else{
                                                                                                            var summer_Loa = cancaledDaysSummer.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                            var winterLoa = cancaledDaysWinter.length;   
                                                                                                        }
                                                                                                        
                                                                                                        
                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                        
                                                                                                       
                                                                                                       
                                                                                                        var UseremovedDatesWinter_reassign = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                       
                                                                                                        var RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday)+UseremovedDatesWinter.outPutWeekday;
                                                                                                        var RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend)+UseremovedDatesWinter.outPutWeekend;

                                                                                                       
                                                                                                        if(GetCancellationNumber.No_PartialCancellation >= cancaledDaysSummer.length){

                                                                                                            
                                                                                                           
                                                                                                            var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                             {
                                                                                                     
                                                                                                                 Boat_Id: Boat_id,
                                                                                                                 Owner_Id: Owner_id,
                                                                                                                 Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                                 Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                                 Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                 Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                 IsActive: true,
                                                                                                                 Current_Time: moment(Date.now()),
                                                                                                                 Updated_time: moment(Date.now())
                                                                                                             },
                                                                                                     
                                                                                                             function (err, data) {
                                                                                                     
                                                                                                                 console.log('Completed the summer part')
                                                                                                             });

                                                                                                        }else{

                                                                                                            var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end,summer_Loa);

                                                                                                            var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(SummerStrtDate, SummerEDate,cancaledDaysSummer.length)
                                                                                                           // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                            let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                            let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                {
                                                                                                        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                    Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                    Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                    Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
                                                                                                        
                                                                                                                function (err, data) {
                                                                                                        
                                                                                                                    console.log('Completed the summer and winter part')
                                                                                                                });
                                                                                                           
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');

                                                                                                        }

                                                                                                                 

                                                                                                    

                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                        
                                                                                                        
                                                                                           
                                                                                                        });

                                                                                                        }

                                                                                                        else{

                                                                                                            var Start_final_yearOne = moment(Startdate_old);
                                                                                                            var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                            let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                            var start_mydate = new Date(Startdate_old);
                                                                                                            var getMonthEndyear = new Date(Enddate_old);
                                                                                                            var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                            var exp_year =""+nextyear+anni_month;
                                                                                                            var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                            let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                            let YearOne_End_Date = lastday;
                                                                                                            var End_final_yearTwo = moment(Enddate_old);
                                                                                                            var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                            let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                            let YearTwo_Start_Date = firstDayTwo;
                                                                                                            let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                            var stopExecutionOne = { stop: false }
                                                                                                            var isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionOne = error
                                                                                                            })

                                                                                                            if(isAvailableDayYearOne.type == "winter"){

                                                                                                                let cancaledDaysWinter = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                                /*let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                                var yaerOneLoa = getBetweenScheduleDatesOne.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerOneLoa = cancaledDaysWinter.length;

                                                                                                                var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;
        
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                                //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                   
                                                                                                                     //let RemaingWeekDys =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                                     // let RemaingWeekEnDys =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                                                                                                                     let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                                     let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
                    
                    
                                                                                                                        console.log("_____________________YearOneWeek",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearOneWeeend",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                

                                                                                                                if(pendingLoas<0){



                                                                                                                    var UseremovedDates_winter = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_winter.outPutWeekday, UseremovedDates_winter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                                }

                                                                                                                
                
                                                                                                             
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearOne.type=="summer"){

                                                                                                                
                                                                                                                let cancaledDaysSummer = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                                let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                /*if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                                var yaerOneLoa = getBetweenScheduleDatesOne.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerOneLoa = cancaledDaysSummer.length;

                                                                                                                var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;
        
        
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                                var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                                   
                                                                                                                    var S_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (S_day - UseremovedDatesSummer_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                                      let RemaingWeekEnDys =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                    
                                                                                                                        console.log("_____________________YearOneSumer",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Summer_WeekDays: RemaingWeekDys,
                                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                
                                                                                                                if(pendingLoas<0){

                                                                                                                    var UseremovedDates_summer = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                                }

                                                                                                                
                
                                                                                                             

                                                                                                            }

                                                                                                            else if(isAvailableDayYearOne.type == "both"){

                                                                                                                var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                                var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                                var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]

                                                                                                                var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);

                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(async(result) => {
                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                    if(pendingLoas>0){

                                                                                                                        if(pendingLoas >= cancaledDaysSummer.length){
  
                                                                                                                            var summer_Loa = pendingLoas-cancaledDaysSummer.length;
                                                                                                                            var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                                            
                
                                                                                                                        }else{
                                                                                                                            var summer_Loa = cancaledDaysSummer.length-pendingLoas;
                                                                                                                            var winterLoa = cancaledDaysWinter.length;   
                                                                                                                        }
  
                                                                                                                    }
  
                                                                                                                    else{
  
                                                                                                                        summer_Loa = cancaledDaysSummer.length;
                                                                                                                        winterLoa = cancaledDaysWinter.length;
  
                                                                                                                    }     
                                                                                                                
                                                                                                                var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,winterLoa);
                                                                                                                
                                                                                                               
                                                                                                               
                                                                                                                var UseremovedDatesWinter_reassign = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                               
                                                                                                                var RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday);
                                                                                                                var RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend);
        
                                                                                                               
                                                                                                                if(pendingLoas >= cancaledDaysSummer.length){
        
                                                                                                                    
                                                                                                                   
                                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end, cancaledDaysSummer.length);
        
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                                     {
                                                                                                             
                                                                                                                         Boat_Id: Boat_id,
                                                                                                                         Owner_Id: Owner_id,
                                                                                                                         Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                                         Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                                         Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                         Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                         IsActive: true,
                                                                                                                         Current_Time: moment(Date.now()),
                                                                                                                         Updated_time: moment(Date.now())
                                                                                                                     },
                                                                                                             
                                                                                                                     function (err, data) {
                                                                                                             
                                                                                                                         console.log('Completed the summer part')
                                                                                                                     });
        
                                                                                                                }else{
        
                                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end,summer_Loa);
                                                                                                                    var UseremovedDatesSummer_reassign = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                                    //var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_One, Summer_Edate_One,cancaledDaysSummer.length)
                                                                                                                   // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                                    let RemaingWeekDys_summer =  (SS_day - UseremovedDatesSummer_reassign.outPutWeekday);
                                                                                                                    let RemaingWeekEnDys_summer =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend);
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                                        {
                                                                                                                
                                                                                                                            Boat_Id: Boat_id,
                                                                                                                            Owner_Id: Owner_id,
                                                                                                                            Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                            Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                            Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                            IsActive: true,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now())
                                                                                                                        },
                                                                                                                
                                                                                                                        function (err, data) {
                                                                                                                
                                                                                                                            console.log('Completed the summer and winter part')
                                                                                                                        });
                                                                                                                   
                                                                                                                        let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');
        
                                                                                                                }
        
                                                                                                                         
        
                                                                                                            
        
                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
                                                                                                                
                                                                                                                
                                                                                                   
                                                                                                                });

                                                                                                            }


                                                                                                                /////  Year Two ////
                                                                                                                var stopExecutionTwo = { stop: false }
                                                                                                                var isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                                    console.log(error)
                                                                                                                    stopExecutionTwo = error
                                                                                                                })

                                                                                                                console.log(isAvailableDayYearTwo.type,"------------isAvailableDayYearTwokkk");

                                                                                                                
                                                                                                            if(isAvailableDayYearTwo.type == "winter"){

                                                                                                                let cancaledDaysWinterTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                                /*let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                                var yaerTwoLoa = getBetweenScheduleDatesTwo.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerTwoLoa = cancaledDaysWinterTwo.length;

                                                                                                                if(pendingLoas>0)

                                                                                                                var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                                else
                                                                                                                var RemaingLoas =yaerTwoLoa;
                                                                                                            
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                                //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                                      let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
                    
                                                                                                                        console.log("_____________________YearTwo",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwo",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                if(RemaingLoas>0){

                                                                                                                    var UseremovedDates_winter_two = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_winter_two.outPutWeekday, UseremovedDates_winter_two.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                    
                                                               

                                                                                                                }

                                                                                                                                                                 
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "summer"){

                                                                                                                let cancaledDaysSummerTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                               /* let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                                var yaerTwoLoa = getBetweenScheduleDatesTwo.length;
        
                                                                                                                else*/
        
                                                                                                                var yaerTwoLoa = cancaledDaysSummerTwo.length;
        
                                                                                                                if(pendingLoas>0)

                                                                                                                var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                                else
                                                                                                                var RemaingLoas =yaerTwoLoa;
                                                                                                            
                                                                                                
                                                                                                
                                                                                                                let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                                //var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                                
                
                                                                                                                
                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                   
                                                                                                                    var S_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                   
                                                                                                                     let RemaingWeekDys =  (S_day - UseremovedDates.outPutWeekday);
                                                                                                                      let RemaingWeekEnDys =  (SE_day - UseremovedDates.outPutWeekend);
                    
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekDys);
                                                                                                                        console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
                    
                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                                            {
                    
                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Summer_WeekDays: RemaingWeekDys,
                                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },
                                                                                                                            {
                                                                                                                                new: true
                                                                                                                            },
                    
                                                                                                                            function (err, data) {
                    
                                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                                //console.log('updated owner booking')
                                                                                                                            });
                
                                                                                                                    
                
                                                                                                                    
                                                                                                                   
                                                                                                                })

                                                                                                                if(RemaingLoas>0){

                                                                                                                    var UseremovedDates_summer = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
                

                                                                                                                }

                                                                                                                
                                                                                                             
                

                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "both"){

                                                                                                                var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                                var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                                var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]

                                                                                                                var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);

                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                                   
                                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                                    console.log(pendingLoas,"----------------------pendingLoas")
                                                                                                                    console.log(cancaledDaysSummer.length,"-----------------cancaledDaysSummer.length)");

                                                                                                                    if(pendingLoas>0){

                                                                                                                        if(pendingLoas >= cancaledDaysSummer.length){

                                                                                                                            var summer_Loa = pendingLoas-cancaledDaysSummer.length;
                                                                                                                            var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                                            
                
                                                                                                                        }else{
                                                                                                                            var summer_Loa = cancaledDaysSummer.length-pendingLoas;
                                                                                                                            var winterLoa = cancaledDaysWinter.length;   
                                                                                                                        }

                                                                                                                    }

                                                                                                                    else{

                                                                                                                        summer_Loa = cancaledDaysSummer.length;
                                                                                                                        winterLoa = cancaledDaysWinter.length;

                                                                                                                    }
                                                                                                                   
                                                                                                                    
                                                                                                                    var RemaingLoas_both = pendingLoas-(summer_Loa+winterLoa);

                                                                                                                

                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,winterLoa);

                                                                                                                
                                                                                                               
                                                                                                                var UseremovedDatesWinter_reassign = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                               
                                                                                                                var RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday);
                                                                                                                var RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend);
                                                                                                                //console.log(RemaingWeekDys_winter,RemaingWeekEnDys_winter,"----------OKKk");
        
                                                                                                               
                                                                                                                if(pendingLoas >= cancaledDaysSummer.length){
        
                                                                                                                    
                                                                                                                   
                                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_One, req.body.start,req.body.end, cancaledDaysSummer.length);
        
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                     {
                                                                                                             
                                                                                                                         Boat_Id: Boat_id,
                                                                                                                         Owner_Id: Owner_id,
                                                                                                                         Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                                         Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                                         Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                         Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                         IsActive: true,
                                                                                                                         Current_Time: moment(Date.now()),
                                                                                                                         Updated_time: moment(Date.now())
                                                                                                                     },
                                                                                                             
                                                                                                                     function (err, data) {
                                                                                                             
                                                                                                                         console.log('Completed the summer part')
                                                                                                                     });
        
                                                                                                                }else{
        
                                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start,req.body.end,summer_Loa);
                                                                                                                    
                                                                                                                    var UseremovedDatesSummer_reassign = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                                    //var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_Two, Summer_Edate_Two,cancaledDaysSummer.length)
                                                                                                                   // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                                    //let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                                    //let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                                    let RemaingWeekDys_summer =  (SS_day - UseremovedDatesSummer_reassign.outPutWeekday);
                                                                                                                    let RemaingWeekEnDys_summer =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend);
                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                        {
                                                                                                                
                                                                                                                            Boat_Id: Boat_id,
                                                                                                                            Owner_Id: Owner_id,
                                                                                                                            Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                            Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                            Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                            IsActive: true,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now())
                                                                                                                        },
                                                                                                                
                                                                                                                        function (err, data) {
                                                                                                                
                                                                                                                            console.log('Completed the summer and winter part')
                                                                                                                        });
                                                                                                                   
                                                                                                                        let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
        
                                                                                                                }
        
                                                                                                                         
        
                                                                                                            
        
                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                                                                                                                
                                                                                                                
                                                                                                   
                                                                                                                });


                                                                                                            }

                                                                                                                

                                                                                                                
                                                                                                                //// End yaer two ////
            


                                                                 
                                                                                                                

                                                                                                           


              

                                                                                                        }

                             


                                                                                                    
                                        

                                                                                                       
                                                                                                    }

                                                                                                    /////////////////////////////////////////////////////////////////////////////////
                                                                                                    else{

                                                                                                        if(AnniversaryStaus ==0){

                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                                            if(MonthOne<anni_month)
                                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                                            else
                                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                                            var winterLoa = cancaledDaysWinter.length;
                                                                                                            var summer_Loa = cancaledDaysSummer.length;
                                                                                                            var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                            var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);
                                                                                                            if(winterLoa>0){

                                                                                                            

                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                            
        
                                                                                                            }
            
                                                                                                            
         
                                                                                                        
     
                                                                                                            if(summer_Loa>0) {
        
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
        
                                                                                                            }     
                                                                                                        }
                                                                                                        else{


                                                                                                            var Start_final_yearOne = moment(Startdate_old);
                                                                                                            var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                            let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                            var start_mydate = new Date(Startdate_old);
                                                                                                            var getMonthEndyear = new Date(Enddate_old);
                                                                                                            var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                            var exp_year =""+nextyear+anni_month;
                                                                                                            var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                            let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                            let YearOne_End_Date = lastday;
                                                                                                            var End_final_yearTwo = moment(Enddate_old);
                                                                                                            var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                            let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                            let YearTwo_Start_Date = firstDayTwo;
                                                                                                            let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                            let cancaledDaysOne = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);
                                                                                                            

   
                                                                                                           var yaerOneLoa = cancaledDaysOne.length;
   
                                                                                                            let stopExecutionOne = { stop: false }
                                                                                                            let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionOne = error
                                                                                                            })

                                                                                                            if(isAvailableDayYearOne.type=="both"){

                                                                                                                var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                                var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                                var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]
                                                                                                                var cancaledDaysWinterOne = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummerOne = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);
                                                                                                                var winterLoaOne = cancaledDaysWinterOne.length;
                                                                                                                var summer_LoaOne = cancaledDaysSummerOne.length;
                                                                                                                var UseremovedDatesWinter_yearOne = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,winterLoa);
                                                                                                                var UseremovedDatesSummer_yearOne = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end, summer_LoaOne);
                                                                                                                if(winterLoaOne>0){
                                                                                                                     let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearOne.outPutWeekday, UseremovedDatesWinter_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
                                                                                                                
            
                                                                                                                }
                
                                                                                                                if(summer_LoaOne>0) {
            
                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearOne.outPutWeekday, UseremovedDatesSummer_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');
            
                                                                                                                }     
            

                                                                                                            }


                                                                                                            else{

                                                                                                               

                                                                                                                var UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);

                                                                                                                if(isAvailableDayYearOne.type=="winter"){

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                                }else{

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                                }

                                                                                                               
                                                                                                                
                                                                                                                

                                                                                                            }

                                                                                                            //// Year YWO ////

                                                                                                            let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                           let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                                           if(getBetweenScheduleDatesTwo.length==cancaledDaysTwo.length)

                                                                                                           var yaertwoLoa = getBetweenScheduleDatesTwo.length;
   
                                                                                                           else
   
                                                                                                           var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;
   
                                                                                                            let stopExecutionTwo = { stop: false }
                                                                                                            let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionTwo = error
                                                                                                            })


                                                                                                            if(isAvailableDayYearTwo.type=="both"){

                                                                                                                var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                                var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                                var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]
                                                                                                                var cancaledDaysWinterTwo = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                                                var cancaledDaysSummerTwo = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);
                                                                                                                var winterLoaTwo = cancaledDaysWinterTwo.length;
                                                                                                                var summer_LoaTwo = cancaledDaysSummerTwo.length;
                                                                                                                var UseremovedDatesWinter_yearTwo = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,winterLoaTwo);
                                                                                                                var UseremovedDatesSummer_yearTwo = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start,req.body.end, summer_LoaTwo);
                                                                                                                if(winterLoaTwo>0){
                                                                                                                     let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearTwo.outPutWeekday, UseremovedDatesWinter_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                                                                                                                
            
                                                                                                                }
                
                                                                                                                if(summer_LoaTwo>0) {
            
                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearTwo.outPutWeekday, UseremovedDatesSummer_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
            
                                                                                                                }     

                                                                                                            }


                                                                                                            else{

                                                                                                                var UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                                                if(isAvailableDayYearTwo.type=="winter"){

                                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');

                                                                                                                }else{

                                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');

                                                                                                                }

                                                                                                            }


                                                                                                            

                                                                                                        }

                                                                                                        

                                                                                                    }

                                                                                                    

                                                                                                    
    
                                                                                                    
                                                                                                       
                                                                                                
    
                                                                                                    
    
                                                                                                }else{

                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;
    
                                                                                                    var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);
    
                                                                                                    if (No_Of_LOA > 0) 
    
                                                                                                     DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);
    
                                                                                                                   
                                                                                                
    
    
                                                                                                }

                                                                                            

                     

                                                                                            
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: 0,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });
                                                                                             
                                                                                        
                                                                                        }else{

                                                                                            var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                              
                                                                                            })
                                                                                            var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: No_Of_LOA,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });

                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }

                                                                                              

                                                                                                if(isAvailableDayBoth.type== "both"){

                                                                                                    if(AnniversaryStaus == 0){

                                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                                        var MonthOne = getBookedyear.getMonth()+1;
                                                                                                        var nextYearBook = (parseInt(YearOne)+1);
                                                                                                        if(MonthOne<anni_month)
                                                                                                        var exp_year = ""+YearOne+anni_month;
                                                                                                        else
                                                                                                        var exp_year =""+nextYearBook+anni_month;

                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        
                                                                                                        var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                        
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).then(result => {
                                                                                                                  
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
    
                                                                                                          
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                    Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                    Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                    Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the Summer part')
                                                                                                                });
                                                                                                        })

                                                                                                    }

                                                                                                    else{

                                                                                                        var Start_final_yearOne = moment(Startdate_old);
                                                                                                        var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                        let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                      
                                                                                                        var start_mydate = new Date(Startdate_old);
                                                                                                        var getMonthEndyear = new Date(Enddate_old);
                                                                                                        var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                        var exp_year =""+nextyear+anni_month;
                                                                                                        var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                        let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                        let YearOne_End_Date = lastday;

                                                                                                       
                                                                                                        let cancaledDays = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                        let getBetweenScheduleDates = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                        
                                                                                                        if(getBetweenScheduleDates.length==cancaledDays.length)

                                                                                                        var yaerOneLoa = getBetweenScheduleDates.length;

                                                                                                        else

                                                                                                        
                                                                                                        var yaerOneLoa = getBetweenScheduleDates.length-cancaledDays.length;

                                                                                                       

                                                                                                        var User_RemovedDatesYearOne = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                        console.log(yaerOneLoa,"-------------------yaerOneLoa");

                                                                                                        let stopExecutionOne = { stop: false }
                                                                                                        let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                            console.log(error)
                                                                                                            stopExecutionOne = error
                                                                                                        })
                                                                                                      
                                                                                                        if(isAvailableDayYearOne.type =="winter"){

                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                                var WE_day = result.Winter_WeekEndDays;
    
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                    {
            
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Winter_WeekDays: WS_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                        Winter_WeekEndDays: WE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
            
                                                                                                                    function (err, data) {
            
                                                                                                                        console.log('Completed the year One Winetr part')
                                                                                                                    });
    
                                                                                                            });

                                                                                                        }

                                                                                                        else if(isAvailableDayYearOne.type =="summer"){

                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                                var S_day = result.Summer_WeekDays;
                                                                                                                var SE_day = result.Summer_WeekEndDays;
    
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                    {
            
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Summer_WeekDays: S_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                        Summer_WeekEndDays: SE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
            
                                                                                                                    function (err, data) {
            
                                                                                                                        console.log('Completed the year One Summer part')
                                                                                                                    });
    
                                                                                                            });

                                                                                                        }

                                                                                                        else if(isAvailableDayYearOne.type =="both"){


                                                                                                            
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.summer_Arr));
                                                                                                        var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.winter_Arr));
                                                                                                        
                                                                                                        var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;
                                                                                                        if(getBetweenScheduleDates.length==cancaledDays.length){

                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;

                                                                                                        }
                                                                                                        else{
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-User_RemovedDatesYearOne.outPutWeekday;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-User_RemovedDatesYearOne.outPutWeekend;
                                                                                                        }
                                                                                                        
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp}).then(result => {
                                                                                                                  
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
    
                                                                                                          
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                {
        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                    Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                    Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                    Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
        
                                                                                                                function (err, data) {
        
                                                                                                                    console.log('Completed the Both year one part')
                                                                                                                });
                                                                                                        })



                                                                                                        }

                                                                                                     ///// Year Two /////

                                                                                                     var End_final_yearTwo = moment(Enddate_old);
                                                                                                     var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                     let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                     let YearTwo_Start_Date = firstDayTwo;
                                                                                                     let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);
                                                                                                console.log(cancaledDaysTwo,"------------------cancaledDaysTwo");

                                                                                                let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                              /* if(getBetweenScheduleDatesTwo.length == cancaledDaysTwo.length)
                                                                                               var yaertwoLoa = getBetweenScheduleDatesTwo.length;
                                                                                               else
                                                                                                var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;*/

                                                                                                var yaertwoLoa = cancaledDaysTwo.length;

                                                                                                var User_RemovedDatesYearTwo = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                                console.log(yaertwoLoa,"-------------------yaerTwoLoa--");

                                                                                                let stopExecutionTwo = { stop: false }
                                                                                                let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                    console.log(error)
                                                                                                    stopExecutionTwo = error
                                                                                                })

                                                                                                if(isAvailableDayYearTwo.type =="winter"){

                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
                                                                                                
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                                Winter_WeekEndDays: WE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                
                                                                                                            function (err, data) {
                                                                                                
                                                                                                                console.log('Completed the year two Winetr part')
                                                                                                            });
                                                                                                
                                                                                                    });
                                                                                                
                                                                                                }

                                                                                                else if(isAvailableDayYearTwo.type =="summer"){

                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                
                                                                                                        var S_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
                                                                                                
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: S_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                                Summer_WeekEndDays: SE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                
                                                                                                            function (err, data) {
                                                                                                
                                                                                                                console.log('Completed the year Two Summer part')
                                                                                                            });
                                                                                                
                                                                                                    });
                                                                                                
                                                                                                }

                                                                                                else if(isAvailableDayYearTwo.type =="both"){


    
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.winter_Arr));
                                                                                                    
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;
                                                                                                    if(getBetweenScheduleDatesTwo.length == cancaledDaysTwo.length){
                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                    }
                                                                                                    else{

                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-User_RemovedDatesYearTwo.outPutWeekday;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-User_RemovedDatesYearTwo.outPutWeekend;

                                                                                                    }
                                                                                                   
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                    
                                                                                                      
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
                                                                                                    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                    
                                                                                                            function (err, data) {
                                                                                                    
                                                                                                                console.log('Completed the Both year two part')
                                                                                                            });
                                                                                                    })
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    }


                                                                                                /// End Year two ///


                                                                                                       

                                                                                                    }

                                                                                                   


                                                                                                }
                                                                                                else{

                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;

                                                                                                    var UseremovedDates_Winter = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start,req.body.end,Noofcancellation);

                                                                                                    //var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    //var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                //Winter_WeekDays:  WS_day-WeekdayCancelled,
                                                                                                               // Winter_WeekEndDays:  WE_day-WeekEndCancelled,
                                                                                                                Winter_WeekDays:  WS_day-UseremovedDates_Winter.outPutWeekday,
                                                                                                                Winter_WeekEndDays:  WE_day-UseremovedDates_Winter.outPutWeekend,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the winter part')
                                                                                                            });
                                                                                                    })

                                                                                                }



                                                                                               

                                                                                                

               
                                                                                          

                                                                                        }

                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                        if(updateSchedule){

                                                                                            if (cancaledDays.length > 0) {

                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                        if (err) {
                                                                                                            return;
                                                                                                        }

                                                                                                    });

                                                                                            }
                                                                                            let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                            let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                            if(MailSend){
      
                                                                                                res.json({
      
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
      
                                                                                            }
      
                                                                                            

                                                                                        }

                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }

                                                                                        }
                                                                                        else {
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                })

                                                                                            }

                                                                                    }
                                                                                    
                                                                                    else if(isAvailableDay.type=="both"){

                                                                                        console.log("Entered in Backto back id 0 Both3");
                                                                                        
                                                                                        let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                        if(isIncludedInSummer)
                                                                                        var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                        else
                                                                                        var TotalConcecutiveDays = WinterConsecutiveDays
                                                                                        if(TotalConcecutiveDays>=Total_Count){
                                                                                                    
                                                                              var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                              var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                              var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                              var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                              if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                {

                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                
                                                                                },
                                                                                { new: true },
                                                                                function (err, data) {
                                                                                
                                                                                
                                                                                });
                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                    {

                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                    },
                                                                                    { new: true },
                                                                                    function (err, data) {


                                                                                    });

                                                                                    var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                    });

                                                                                    const getyear = new Date(Start_final);
                                                                                    const Cancellationyear = getyear.getFullYear();
                                                                                    var Noofcancellation = Totalday_old - Total_Count;

                                                                                    var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                    })

                                                                                    
                                                                                    var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                    });

                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                    
                                              
                                                                                    if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                        
                                                                                        var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;

                                                                                        let stopExecutionboth = { stop: false };

                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                    
                                                                                            console.log(error)
                                                                                            stopExecutionboth = error
                                                                                        })
    
                                                                                       
                                                                                        if (stopExecutionboth.stop) {
                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                        }

                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]

                                                                                    var NewSummerDays = getDaysBetweenDates(Summer_Sdate,Summer_Edate);
                                                                                    var OldSummerDays = getDaysBetweenDates(Summer_Sdate_old,Summer_Edate_old);
                                                                                    
                                                                                    var NewWinterDays = getDaysBetweenDates(Winter_Sdate,Winter_Edate);
                                                                                    var OldWinterDays = getDaysBetweenDates(Winter_Sdate_old,Winter_Edate_old);

                                                                                    var summerLOA = OldSummerDays.length-NewSummerDays.length;
                                                                                    var winterLOA = OldWinterDays.length-NewWinterDays.length;
                                                                                    var RemaingLoa = GetCancellationNumber.No_PartialCancellation-summerLOA;
                                                                                   
                                                                                    if(RemaingLoa>0)
                                                                                    var Remaing_winter_loa = Math.abs(GetCancellationNumber.No_PartialCancellation-winterLOA)
                                                                                    else
                                                                                    var Remaing_winter_loa = winterLOA;
                                                                                    var Remaing_summer_loa=Math.abs(RemaingLoa);

                                                                                    console.log(Remaing_summer_loa,Remaing_winter_loa,"-------------------LAAA");

                                                                                     
                                                                                     var summerflag =0;
                                                                                     var winterflag =0;
                                                                                     
                                                                                     
                                                                                        if((((isAvailableDayBoth.summer_Arr).length))!=(((isAvailableDay.summer_Arr).legth))){
                                                                                            var User_RemovedDatesSUmmer = getWeekDaysCancel(Summer_Sdate_old, Summer_Edate_old, Summer_Sdate, Summer_Edate,Remaing_summer_loa);
                                                                                            summerflag=1;
                                                                                        }
                                                                                        
                                                                                        if((((isAvailableDayBoth.winter_Arr).length))!=(((isAvailableDay.winter_Arr).length))){

                                                                                            var User_RemovedDatesWinter = getWeekDaysCancel(Winter_Sdate_old, Winter_Edate_old, Winter_Sdate, Winter_Edate,Remaing_winter_loa);
                                                                                            winterflag=1;
                                                                                        }
                                                                                        

                                                                                        if((No_Of_LOA>0)){
                                                                                            if(summerflag ==1){

                                                                                                if((User_RemovedDatesSUmmer.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
                                                                                                }
                                                                                                else if((User_RemovedDatesSUmmer.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
        
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
        
        
                                                                                                }

                                                                                            }

                                                                                            else if(winterflag==1){

                                                                                                 if((User_RemovedDatesWinter.outPutWeekday>0) &&(PendingSummerWeekdays==0)&&(winterflag==1)){
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
                                                                                                }
                                                                                                 if((User_RemovedDatesWinter.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
        
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
        
        
                                                                                                }

                                                                                            }
                                                                                            
    
                                                                                            
                                                                                        }
                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                            console.log(error)
                                                                                            //console.log(TotalCancellation)
                                                                                            })
                                                                                            
                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;
                                                                                            
                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            console.log(datas)
                                                                                            var arr = [];
                                                                                            
                                                                                            datas.forEach(function (item) {
                                                                                            Object.keys(item).forEach(function (key) {
                                                                                              arr.push(item[key]);
                                                                                              console.log(item[key]);
                                                                                            });
                                                                                            });
                                                                                            console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;
                                                                                            
                                                                                            while (Loa_Length > 0) {
                                                                                            
                                                                                            
                                                                                            console.log(arr[index]);
                                                                                            let day = arr[index];
                                                                                            
                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                              WeekDay_Count_edit = WeekDay_Count_edit + 1;
                                                                                            
                                                                                            }
                                                                                            else {
                                                                                              WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
                                                                                            
                                                                                            }
                                                                                            
                                                                                            Loa_Length--;
                                                                                            index--;
                                                                                            }
                                                                                            
                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;
                                                                                            
                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {
                                                                                            
                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                            PartialCancellation_Status: 1,
                                                                                            Updated_time: moment(Date.now()),
                                                                                            
                                                                                            },
                                                                                            
                                                                                            function (err, data) {
                                                                                            })

                                                                                            if (GetCancellationNumber.No_PartialCancellation) {

                                                                                                console.log("insde check status 3 in back to back 0 Both")

                                                                                                
                                                                                               
                                                                                                
                                                                                               if(isAvailableDayBoth.type == 'both'){

                                                                                                

                                                                                                if(AnniversaryStaus ==0){

                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                                    var YearOne = getBookedyear.getFullYear();
                                                                                                    var MonthOne = getBookedyear.getMonth()+1;
                                                                                                    var nextYearBook = (parseInt(YearOne)+1);
                                                                                                    if(MonthOne<anni_month)
                                                                                                    var exp_year = ""+YearOne+anni_month;
                                                                                                    else
                                                                                                    var exp_year =""+nextYearBook+anni_month;

                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-winterWeekdayWeekend.weekdaycnt            ;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
    
                                                                                                      
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the Summer part')
                                                                                                            });
                                                                                                    })

                                                                                                    var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_old, Winter_Edate_old, req.body.start, req.body.end);
                                                                                                    var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_old, Summer_Edate_old, req.body.start, req.body.end);

                                                                                                             console.log(cancaledDaysWinter.length,cancaledDaysSummer.length);
                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_old, Summer_Edate_old, cancaledDaysSummer.length)
                                                                                                    var summerreassign_weekday = reAssignedWeekDaysCount;
                                                                                                    var summerreassign_weekend = reAssignedWeekendCount;

                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Winter_Sdate_old, Winter_Edate_old, cancaledDaysWinter.length)

                                                                                                    var winterreassign_weekday = reAssignedWeekDaysCount;
                                                                                                    var winterreassign_weekend = reAssignedWeekendCount;
                                                                                                     
                                                                                                     console.log(summerreassign_weekday,summerreassign_weekend,"--------suMRE");
                                                                                                     console.log(winterreassign_weekday,winterreassign_weekend,"--------WINYREE");
                                                                                                    console.log(User_RemovedDatesSUmmer,User_RemovedDatesWinter,"---------------USER") 
                                                                                                    //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")
                                                                                                    
                                                                                                    //update allocated cancellation days
                                                                                                    
                                                                                                    //reassigning
    
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                     
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                      
                                                                                                        let RemaingWeekDys_summer =  (SS_day - summerreassign_weekday)+User_RemovedDatesSUmmer.outPutWeekday;
                                                                                                       
                                                                                                        let RemaingWeekEnDys_sumer =  (SE_day - summerreassign_weekend)+User_RemovedDatesSUmmer.outPutWeekend;
                                                                                                        //let RemaingWeekEnDys_sumer =  (SE_day - summerreassign_weekend);
    
                                                                                                        let RemaingWeekDys =  (WS_day - winterreassign_weekday)+User_RemovedDatesWinter.outPutWeekday;
                                                                                                        let RemaingWeekEnDys =  (WE_day - winterreassign_weekend)+User_RemovedDatesWinter.outPutWeekend;
                                                                                                       // let RemaingWeekDys =  (WS_day - winterreassign_weekday);
                                                                                                        //let RemaingWeekEnDys =  (WE_day - winterreassign_weekend);
                                                                                                      
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
                                                                                                      
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                Summer_WeekEndDays:RemaingWeekEnDys_sumer,
                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                            {
                                                                                                                new: true
                                                                                                            },
                                                                                                      
                                                                                                            function (err, data) {
                                                                                                      
                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                //console.log('updated owner booking')
                                                                                                            });
                                                                                                      })
    
    
                                                                                                      
    
                                                                                                   }
                                                                                                    
                                                                                                   ///////////////OOOOOOOOOOOOOOOOOOOOOOOOOOO 

                                                                                                   else{ console.log("kkkkk------------------");

                                                                                                   var No_Of_LOA =0;

                                                                                                   var Start_final_yearOne = moment(Startdate_old);
                                                                                                   var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                   let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                   var start_mydate = new Date(Startdate_old);
                                                                                                   var getMonthEndyear = new Date(Enddate_old);
                                                                                                   var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                   var exp_year =""+nextyear+anni_month;
                                                                                                   var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                   let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                   let YearOne_End_Date = lastday;
                                                                                                   var End_final_yearTwo = moment(Enddate_old);
                                                                                                   var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                   let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                   let YearTwo_Start_Date = firstDayTwo;
                                                                                                   let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                   
                                                                                                   var stopExecutionOne = { stop: false }
                                                                                                   var isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                       console.log(error)
                                                                                                       stopExecutionOne = error
                                                                                                   })

                                                                                                   if(isAvailableDayYearOne.type == "winter"){

                                                                                                       let cancaledDaysWinter = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                       /*let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                       if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                       var yaerOneLoa = getBetweenScheduleDatesOne.length;

                                                                                                       else*/

                                                                                                       var yaerOneLoa = cancaledDaysWinter.length;

                                                                                                       var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;

                                                                                                   
                                                                                       
                                                                                                       let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                       //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                       
       
                                                                                                       
                                                                                                       OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                          
                                                                                                           var WS_day = result.Winter_WeekDays;
                                                                                                           var WE_day = result.Winter_WeekEndDays;
                                                                                                          
                                                                                                            //let RemaingWeekDys =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                            // let RemaingWeekEnDys =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
                                                                                                            let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                            let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
           
           
                                                                                                               console.log("_____________________YearOneWeek",RemaingWeekDys);
                                                                                                               console.log("_____________________YearOneWeeend",RemaingWeekEnDys);
                                                                                                               //console.log(SS_day, SE_day, 'summer ss and se days')
           
                                                                                                               OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                   {
           
                                                                                                                       Boat_Id: Boat_id,
                                                                                                                       Owner_Id: Owner_id,
                                                                                                                       Winter_WeekDays: RemaingWeekDys,
                                                                                                                       Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                       IsActive: true,
                                                                                                                       Current_Time: moment(Date.now()),
                                                                                                                       Updated_time: moment(Date.now())
                                                                                                                   },
                                                                                                                   {
                                                                                                                       new: true
                                                                                                                   },
           
                                                                                                                   function (err, data) {
           
                                                                                                                       //console.log('GetCancelaltionBlock')
                                                                                                                       //console.log('updated owner booking')
                                                                                                                   });
       
                                                                                                           
       
                                                                                                           
                                                                                                          
                                                                                                       })

                                                                                                       

                                                                                                       if(pendingLoas<0){



                                                                                                           var UseremovedDates_winter = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                           let wintersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_winter.outPutWeekday, UseremovedDates_winter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                       }

                                                                                                       
       
                                                                                                    
       

                                                                                                   }

                                                                                                   else if(isAvailableDayYearOne.type=="summer"){

                                                                                                       
                                                                                                       let cancaledDaysSummer = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                       let getBetweenScheduleDatesOne = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                       /*if(getBetweenScheduleDatesOne.length==cancaledDaysWinter.length)

                                                                                                       var yaerOneLoa = getBetweenScheduleDatesOne.length;

                                                                                                       else*/

                                                                                                       var yaerOneLoa = cancaledDaysSummer.length;

                                                                                                       var pendingLoas = GetCancellationNumber.No_PartialCancellation-yaerOneLoa;


                                                                                                   
                                                                                       
                                                                                                       let UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                       var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                       
       
                                                                                                       
                                                                                                       OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                                                          
                                                                                                           var S_day = result.Summer_WeekDays;
                                                                                                           var SE_day = result.Summer_WeekEndDays;
                                                                                                          
                                                                                                            let RemaingWeekDys =  (S_day - UseremovedDatesSummer_reassign.outPutWeekday)+UseremovedDates.outPutWeekday;
                                                                                                             let RemaingWeekEnDys =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend)+UseremovedDates.outPutWeekend;
           
                                                                                                               console.log("_____________________YearOneSumer",RemaingWeekDys);
                                                                                                               console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                               //console.log(SS_day, SE_day, 'summer ss and se days')
           
                                                                                                               OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                   {
           
                                                                                                                       Boat_Id: Boat_id,
                                                                                                                       Owner_Id: Owner_id,
                                                                                                                       Summer_WeekDays: RemaingWeekDys,
                                                                                                                       Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                       IsActive: true,
                                                                                                                       Current_Time: moment(Date.now()),
                                                                                                                       Updated_time: moment(Date.now())
                                                                                                                   },
                                                                                                                   {
                                                                                                                       new: true
                                                                                                                   },
           
                                                                                                                   function (err, data) {
           
                                                                                                                       //console.log('GetCancelaltionBlock')
                                                                                                                       //console.log('updated owner booking')
                                                                                                                   });
       
                                                                                                           
       
                                                                                                           
                                                                                                          
                                                                                                       })

                                                                                                       
                                                                                                       if(pendingLoas<0){

                                                                                                           var UseremovedDates_summer = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,Math.abs(pendingLoas));

                                                                                                           let summersuccess = await Do_approveCancel(req.body._id, Math.abs(pendingLoas), 1, Math.abs(pendingLoas), UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                       }

                                                                                                       
       
                                                                                                    

                                                                                                   }

                                                                                                   else if(isAvailableDayYearOne.type == "both"){

                                                                                                       var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                       var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                       var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                       var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]

                                                                                                       var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                       var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);

                                                                                                       OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(async(result) => {
                                                                                          
                                                                                                           var WS_day = result.Winter_WeekDays;
                                                                                                           var WE_day = result.Winter_WeekEndDays;
                                                                                                           var SS_day = result.Summer_WeekDays;
                                                                                                           var SE_day = result.Summer_WeekEndDays;
                                                                                                           if(pendingLoas>0){

                                                                                                               if(pendingLoas >= cancaledDaysSummer.length){

                                                                                                                   var summer_Loa = pendingLoas-cancaledDaysSummer.length;
                                                                                                                   var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                                   
       
                                                                                                               }else{
                                                                                                                   var summer_Loa = cancaledDaysSummer.length-pendingLoas;
                                                                                                                   var winterLoa = cancaledDaysWinter.length;   
                                                                                                               }

                                                                                                           }

                                                                                                           else{

                                                                                                               summer_Loa = cancaledDaysSummer.length;
                                                                                                               winterLoa = cancaledDaysWinter.length;

                                                                                                           }     
                                                                                                       
                                                                                                       var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,winterLoa);
                                                                                                       
                                                                                                      
                                                                                                      
                                                                                                       var UseremovedDatesWinter_reassign = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                      
                                                                                                       var RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday);
                                                                                                       var RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend);

                                                                                                      
                                                                                                       if(pendingLoas >= cancaledDaysSummer.length){

                                                                                                           
                                                                                                          
                                                                                                           var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end, cancaledDaysSummer.length);

                                                                                                           OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                            {
                                                                                                    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                                Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                                Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                    
                                                                                                            function (err, data) {
                                                                                                    
                                                                                                                console.log('Completed the summer part')
                                                                                                            });

                                                                                                       }else{

                                                                                                           var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end,summer_Loa);
                                                                                                           var UseremovedDatesSummer_reassign = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                           //var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_One, Summer_Edate_One,cancaledDaysSummer.length)
                                                                                                          // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                           let RemaingWeekDys_summer =  (SS_day - UseremovedDatesSummer_reassign.outPutWeekday);
                                                                                                           let RemaingWeekEnDys_summer =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend);
                                                                                                           OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp  },
                                                                                                               {
                                                                                                       
                                                                                                                   Boat_Id: Boat_id,
                                                                                                                   Owner_Id: Owner_id,
                                                                                                                   Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                   Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                   Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                   Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                   IsActive: true,
                                                                                                                   Current_Time: moment(Date.now()),
                                                                                                                   Updated_time: moment(Date.now())
                                                                                                               },
                                                                                                       
                                                                                                               function (err, data) {
                                                                                                       
                                                                                                                   console.log('Completed the summer and winter part')
                                                                                                               });
                                                                                                          
                                                                                                               let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                       }

                                                                                                                

                                                                                                   

                                                                                                       let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
                                                                                                       
                                                                                                       
                                                                                          
                                                                                                       });

                                                                                                   }


                                                                                                   /////  Year Two ////
                                                                                                   var stopExecutionTwo = { stop: false }
                                                                                                   var isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                       console.log(error)
                                                                                                       stopExecutionTwo = error
                                                                                                   })

                                                                                                   console.log(isAvailableDayYearTwo.type,"------------isAvailableDayYearTwokkk");

                                                                                                   
                                                                                               if(isAvailableDayYearTwo.type == "winter"){

                                                                                                   let cancaledDaysWinterTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                   /*let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                   if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                   var yaerTwoLoa = getBetweenScheduleDatesTwo.length;

                                                                                                   else*/

                                                                                                   var yaerTwoLoa = cancaledDaysWinterTwo.length;

                                                                                                   if(pendingLoas>0)

                                                                                                   var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                   else
                                                                                                   var RemaingLoas =yaerTwoLoa;
                                                                                               
                                                                                   
                                                                                                   let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                   //var UseremovedDatesWinter_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                   
   
                                                                                                   
                                                                                                   OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                      
                                                                                                       var WS_day = result.Winter_WeekDays;
                                                                                                       var WE_day = result.Winter_WeekEndDays;
                                                                                                      
                                                                                                        let RemaingWeekDys =  (WS_day - UseremovedDates.outPutWeekday);
                                                                                                         let RemaingWeekEnDys =  (WE_day - UseremovedDates.outPutWeekend);
       
                                                                                                           console.log("_____________________YearTwo",RemaingWeekDys);
                                                                                                           console.log("_____________________YearTwo",RemaingWeekEnDys);
                                                                                                           //console.log(SS_day, SE_day, 'summer ss and se days')
       
                                                                                                           OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                               {
       
                                                                                                                   Boat_Id: Boat_id,
                                                                                                                   Owner_Id: Owner_id,
                                                                                                                   Winter_WeekDays: RemaingWeekDys,
                                                                                                                   Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                   IsActive: true,
                                                                                                                   Current_Time: moment(Date.now()),
                                                                                                                   Updated_time: moment(Date.now())
                                                                                                               },
                                                                                                               {
                                                                                                                   new: true
                                                                                                               },
       
                                                                                                               function (err, data) {
       
                                                                                                                   //console.log('GetCancelaltionBlock')
                                                                                                                   //console.log('updated owner booking')
                                                                                                               });
   
                                                                                                       
   
                                                                                                       
                                                                                                      
                                                                                                   })

                                                                                                   if(RemaingLoas>0){

                                                                                                       var UseremovedDates_winter_two = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                       let wintersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_winter_two.outPutWeekday, UseremovedDates_winter_two.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
       
                                                  

                                                                                                   }

                                                                                                                                                    
   

                                                                                               }

                                                                                               else if(isAvailableDayYearTwo.type == "summer"){

                                                                                                   let cancaledDaysSummerTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                                  /* let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                   if(getBetweenScheduleDatesTwo.length==cancaledDaysWinterTwo.length)

                                                                                                   var yaerTwoLoa = getBetweenScheduleDatesTwo.length;

                                                                                                   else*/

                                                                                                   var yaerTwoLoa = cancaledDaysSummerTwo.length;

                                                                                                   if(pendingLoas>0)

                                                                                                   var RemaingLoas = yaerTwoLoa-pendingLoas;

                                                                                                   else
                                                                                                   var RemaingLoas =yaerTwoLoa;
                                                                                               
                                                                                   
                                                                                   
                                                                                                   let UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaerTwoLoa);
                                                                                                   //var UseremovedDatesSummer_reassign = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,cancaledDaysWinterTwo.length);
                                                                                                   
   
                                                                                                   
                                                                                                   OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                      
                                                                                                       var S_day = result.Summer_WeekDays;
                                                                                                       var SE_day = result.Summer_WeekEndDays;
                                                                                                      
                                                                                                        let RemaingWeekDys =  (S_day - UseremovedDates.outPutWeekday);
                                                                                                         let RemaingWeekEnDys =  (SE_day - UseremovedDates.outPutWeekend);
       
                                                                                                           console.log("_____________________YearTwoSumer",RemaingWeekDys);
                                                                                                           console.log("_____________________YearTwoSumer",RemaingWeekEnDys);
                                                                                                           //console.log(SS_day, SE_day, 'summer ss and se days')
       
                                                                                                           OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                               {
       
                                                                                                                   Boat_Id: Boat_id,
                                                                                                                   Owner_Id: Owner_id,
                                                                                                                   Summer_WeekDays: RemaingWeekDys,
                                                                                                                   Summer_WeekEndDays:RemaingWeekEnDys,
                                                                                                                   IsActive: true,
                                                                                                                   Current_Time: moment(Date.now()),
                                                                                                                   Updated_time: moment(Date.now())
                                                                                                               },
                                                                                                               {
                                                                                                                   new: true
                                                                                                               },
       
                                                                                                               function (err, data) {
       
                                                                                                                   //console.log('GetCancelaltionBlock')
                                                                                                                   //console.log('updated owner booking')
                                                                                                               });
   
                                                                                                       
   
                                                                                                       
                                                                                                      
                                                                                                   })

                                                                                                   if(RemaingLoas>0){

                                                                                                       var UseremovedDates_summer = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,RemaingLoas);

                                                                                                       let summersuccess = await Do_approveCancel(req.body._id, RemaingLoas, 1, RemaingLoas, UseremovedDates_summer.outPutWeekday, UseremovedDates_summer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');
   

                                                                                                   }

                                                                                                   
                                                                                                
   

                                                                                               }

                                                                                               else if(isAvailableDayYearTwo.type == "both"){

                                                                                                   var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                   var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                   var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                   var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]

                                                                                                   var cancaledDaysWinter = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                                   var cancaledDaysSummer = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);

                                                                                                   OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                      
                                                                                                       var WS_day = result.Winter_WeekDays;
                                                                                                       var WE_day = result.Winter_WeekEndDays;
                                                                                                       var SS_day = result.Summer_WeekDays;
                                                                                                       var SE_day = result.Summer_WeekEndDays;
                                                                                                       console.log(pendingLoas,"----------------------pendingLoas")
                                                                                                       console.log(cancaledDaysSummer.length,"-----------------cancaledDaysSummer.length)");

                                                                                                       if(pendingLoas>0){

                                                                                                           if(pendingLoas >= cancaledDaysSummer.length){

                                                                                                               var summer_Loa = pendingLoas-cancaledDaysSummer.length;
                                                                                                               var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                               
   
                                                                                                           }else{
                                                                                                               var summer_Loa = cancaledDaysSummer.length-pendingLoas;
                                                                                                               var winterLoa = cancaledDaysWinter.length;   
                                                                                                           }

                                                                                                       }

                                                                                                       else{

                                                                                                           summer_Loa = cancaledDaysSummer.length;
                                                                                                           winterLoa = cancaledDaysWinter.length;

                                                                                                       }
                                                                                                      
                                                                                                       
                                                                                                       var RemaingLoas_both = pendingLoas-(summer_Loa+winterLoa);

                                                                                                   

                                                                                                   
                                                                                                   
                                                                                                   
                                                                                                   var UseremovedDatesWinter = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,winterLoa);

                                                                                                   
                                                                                                  
                                                                                                   var UseremovedDatesWinter_reassign = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                  
                                                                                                   var RemaingWeekDys_winter =  (WS_day - UseremovedDatesWinter_reassign.outPutWeekday);
                                                                                                   var RemaingWeekEnDys_winter =  (WE_day - UseremovedDatesWinter_reassign.outPutWeekend);
                                                                                                   //console.log(RemaingWeekDys_winter,RemaingWeekEnDys_winter,"----------OKKk");

                                                                                                  
                                                                                                   if(pendingLoas >= cancaledDaysSummer.length){

                                                                                                       
                                                                                                      
                                                                                                       var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_One, req.body.start,req.body.end, cancaledDaysSummer.length);

                                                                                                       OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                        {
                                                                                                
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                            Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                            Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
                                                                                                
                                                                                                        function (err, data) {
                                                                                                
                                                                                                            console.log('Completed the summer part')
                                                                                                        });

                                                                                                   }else{

                                                                                                       var UseremovedDatesSummer = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start,req.body.end,summer_Loa);
                                                                                                       
                                                                                                       var UseremovedDatesSummer_reassign = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                       //var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_Two, Summer_Edate_Two,cancaledDaysSummer.length)
                                                                                                      // console.log(reAssignedWeekDaysCount,reAssignedWeekendCount,"-----------------------OKKKK3333");
                                                                                                       //let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                       //let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                       let RemaingWeekDys_summer =  (SS_day - UseremovedDatesSummer_reassign.outPutWeekday);
                                                                                                       let RemaingWeekEnDys_summer =  (SE_day - UseremovedDatesSummer_reassign.outPutWeekend);
                                                                                                       OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                           {
                                                                                                   
                                                                                                               Boat_Id: Boat_id,
                                                                                                               Owner_Id: Owner_id,
                                                                                                               Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                               Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                               Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                               Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                               IsActive: true,
                                                                                                               Current_Time: moment(Date.now()),
                                                                                                               Updated_time: moment(Date.now())
                                                                                                           },
                                                                                                   
                                                                                                           function (err, data) {
                                                                                                   
                                                                                                               console.log('Completed the summer and winter part')
                                                                                                           });
                                                                                                      
                                                                                                           let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');

                                                                                                   }

                                                                                                            

                                                                                               

                                                                                                   let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                                                                                                   
                                                                                                   
                                                                                      
                                                                                                   });


                                                                                               }

                                                                                                   

                                                                                                   
                                                                                                   //// End yaer two ////




                                             
                                    


                                                                                               }

                                                                                                 

                                                                                                }

                                                   
                                      
                                                                                                
                                                                                  
                                                                                                
                                                                                                //reassigning
                                                                                                }

                                                                                        if (No_Of_LOA > 0) { console.log("Enterd in Auto approval LOA Both");
                                                                                      
                                                                                        if(AnniversaryStaus == 0){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                            console.log(summerflag,winterflag,"---------flags");

                                                                                                if(summerflag==1)
                                                                                                
                                                                                                DoApproveCancellation(req.body._id, Remaing_summer_loa, 1, Remaing_summer_loa, User_RemovedDatesSUmmer.outPutWeekday, User_RemovedDatesSUmmer.outPutWeekend,req.body.start,req.body.end,MonthBookingStatus,exp_year,anni_month)
                                                                                                if(winterflag ==1)
                                                                                                DoApproveCancellation(req.body._id, Remaing_winter_loa, 1, Remaing_winter_loa, User_RemovedDatesWinter.outPutWeekday, User_RemovedDatesWinter.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month)

                                                                                        }

                                                                                        else{

                                                                                            var Start_final_yearOne = moment(Startdate_old);
                                                                                            var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                            let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                            var start_mydate = new Date(Startdate_old);
                                                                                            var getMonthEndyear = new Date(Enddate_old);
                                                                                            var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                            var exp_year =""+nextyear+anni_month;
                                                                                            var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                            let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                            let YearOne_End_Date = lastday;
                                                                                            var End_final_yearTwo = moment(Enddate_old);
                                                                                            var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                            let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                            let YearTwo_Start_Date = firstDayTwo;
                                                                                            let YearTwo_End_Date = End_final_withoutTime_yeartwo;
                                                                                            let cancaledDaysOne = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);
                                                                                            var yaerOneLoa = cancaledDaysOne.length;
                                                                                            let stopExecutionOne = { stop: false }
                                                                                            let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                            console.log(error)
                                                                                            stopExecutionOne = error
                                                                                            })
                                                                                            if(isAvailableDayYearOne.type=="both"){

                                                                                                var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]
                                                                                                var cancaledDaysWinterOne = getAllCanceledDates(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end);
                                                                                                var cancaledDaysSummerOne = getAllCanceledDates(Summer_Sdate_One, Summer_Edate_One, req.body.start, req.body.end);
                                                                                                var winterLoaOne = cancaledDaysWinterOne.length;
                                                                                                var summer_LoaOne = cancaledDaysSummerOne.length;
                                                                                                var UseremovedDatesWinter_yearOne = getWeekDaysCancel(Winter_Sdate_One, Winter_Edate_One, req.body.start, req.body.end,winterLoa);
                                                                                                var UseremovedDatesSummer_yearOne = getWeekDaysCancel(Summer_Sdate_One, Summer_Edate_One, req.body.start,req.body.end, summer_LoaOne);
                                                                                                if(winterLoaOne>0){
                                                                                                     let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearOne.outPutWeekday, UseremovedDatesWinter_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');
                                                                                                

                                                                                                }

                                                                                                if(summer_LoaOne>0) {

                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearOne.outPutWeekday, UseremovedDatesSummer_yearOne.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                }     


                                                                                            }


                                                                                            else{

                                                                                               

                                                                                                var UseremovedDates = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);

                                                                                                if(isAvailableDayYearOne.type=="winter"){

                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'winter');

                                                                                                }else{

                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, yaerOneLoa, 1, yaerOneLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,startexp,'summer');

                                                                                                }

                                                                                               
                                                                                                
                                                                                                

                                                                                            }


                                                                                         //// Year YWO ////

                                                                                        let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                        let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                        if(getBetweenScheduleDatesTwo.length==cancaledDaysTwo.length)

                                                                                        var yaertwoLoa = getBetweenScheduleDatesTwo.length;

                                                                                        else

                                                                                        var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;

                                                                                        let stopExecutionTwo = { stop: false }
                                                                                        let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                            console.log(error)
                                                                                            stopExecutionTwo = error
                                                                                        })

                                                                                        if(isAvailableDayYearTwo.type=="both"){
                                                              
                                                                                            var Summer_Sdate_Two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                            var Summer_Edate_Two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                            var Winter_Sdate_Two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                            var Winter_Edate_Two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]
                                                                                            var cancaledDaysWinterTwo = getAllCanceledDates(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end);
                                                                                            var cancaledDaysSummerTwo = getAllCanceledDates(Summer_Sdate_Two, Summer_Edate_Two, req.body.start, req.body.end);
                                                                                            var winterLoaTwo = cancaledDaysWinterTwo.length;
                                                                                            var summer_LoaTwo = cancaledDaysSummerTwo.length;
                                                                                            var UseremovedDatesWinter_yearTwo = getWeekDaysCancel(Winter_Sdate_Two, Winter_Edate_Two, req.body.start, req.body.end,winterLoaTwo);
                                                                                            var UseremovedDatesSummer_yearTwo = getWeekDaysCancel(Summer_Sdate_Two, Summer_Edate_Two, req.body.start,req.body.end, summer_LoaTwo);
                                                                                            if(winterLoaTwo>0){
                                                                                                 let wintersuccess = await Do_approveCancel(req.body._id, winterLoaOne, 1, winterLoaOne, UseremovedDatesWinter_yearTwo.outPutWeekday, UseremovedDatesWinter_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');
                                                                                            

                                                                                            }

                                                                                            if(summer_LoaTwo>0) {

                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_LoaOne, 1, summer_LoaOne, UseremovedDatesSummer_yearTwo.outPutWeekday, UseremovedDatesSummer_yearTwo.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');

                                                                                            }     

                                                                                        }
                                                              
                                                              
                                                                                        else{
                                                              
                                                                                            var UseremovedDates = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                            if(isAvailableDayYearTwo.type=="winter"){

                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'winter');

                                                                                            }else{

                                                                                                let summersuccess = await Do_approveCancel(req.body._id, yaertwoLoa, 1, yaertwoLoa, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend,req.body.start, req.body.end,0,anni_month,exp_year,'summer');

                                                                                            }

                                                                                        }

                                                                                    /////////////////////////////////////// YEAAAA /////////////////////////
                                                              
                                                                                                                                                              

                                                                                        }
                                                                                       
                                                                                        
                                                                                    }

                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                        {
                                                                                          No_PartialCancellation: 0,
                                                                                          Current_Time: moment(Date.now()),
                                                                                          Updated_time: moment(Date.now())
                                                                                        },
                                                                                        
                                                                                        function (err, data) {
                                                                                        
                                                                                        });
                                                                                            

                                                                                    }
                                                                                    else{ 

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                        var MonthOne = getBookedyear.getMonth()+1;
                                                                                        var nextYearBook = (parseInt(YearOne)+1);
                                                                                        if(MonthOne<anni_month)
                                                                                        var exp_year = ""+YearOne+anni_month;
                                                                                        else
                                                                                        var exp_year =""+nextYearBook+anni_month;

                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                          
                                                                                        })
                                                                                        var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: No_Of_LOA,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });

                                                                                            let stopExecutionboth = { stop: false }
                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                
                                                                                                console.log(error)
                                                                                                stopExecutionboth = error
                                                                                            })
        
                                                                                           
                                                                                            if (stopExecutionboth.stop) {
                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                            }

                                                                                            

                                                                                            if(isAvailableDayBoth.type=="summer"){
                                                                                                var WeekdayCancelled_summer = Weekdays_prev - summerWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEndCancelled_summer = WeekEndDays_prev - summerWeekdayWeekend.weekendCnt;
    
                                                                                                
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                              
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
    
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {
    
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: SS_day - WeekdayCancelled_summer,
                                                                                                            Summer_WeekEndDays: SE_day - WeekEndCancelled_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                            console.log('Completed the winter part')
                                                                                                        });
                                                                                                })

                                                                                              
                                                                                            }else if(isAvailableDayBoth.type=="winter"){

                                                                                                var WeekdayCancelled_winter = Weekdays_prev - winterWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEndCancelled_winter = WeekEndDays_prev - winterWeekdayWeekend.weekendCnt;
    
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                              
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
    
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {
    
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekdayCancelled_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEndCancelled_winter,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                            console.log('Completed the winter part')
                                                                                                        });
                                                                                                })

                                                                                               

                                                                                            }else if(isAvailableDayBoth.type=="both"){

                                                                                                if(AnniversaryStaus == 0){

                                                                                                     

                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    //console.log(summerWeekdayWeekendPrev,winterWeekdayWeekendPrev,"-------PREV");
                                                                                                    //console.log(summerWeekdayWeekend,winterWeekdayWeekend,"----------NOW");
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;

                                                                                                   /* console.log(WeekDay_Count_edit_summer,"s_W");
                                                                                                    console.log(WeekEnd_Count_edit_summer,"s_E");
                                                                                                    console.log(WeekDay_Count_edit_winter,"W_E");
                                                                                                    console.log(WeekEnd_Count_edit_winter,"W_E");*/
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                  
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                        
    
        
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {
    
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                            Summer_WeekDays: SS_day - WeekDay_Count_edit_summer,
                                                                                                            Summer_WeekEndDays: SE_day - WeekEnd_Count_edit_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                            console.log('Completed both part')
                                                                                                        });
                                                                                                    });
    
      

                                                                                                }
                                                                                                else{

                                                                                                    var Start_final_yearOne = moment(Startdate_old);
                                                                                                    var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                    let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                  
                                                                                                    var start_mydate = new Date(Startdate_old);
                                                                                                    var getMonthEndyear = new Date(Enddate_old);
                                                                                                    var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                    var exp_year =""+nextyear+anni_month;
                                                                                                    var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                    let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                    let YearOne_End_Date = lastday;
                                                                                                    let cancaledDays = getAllCanceledDates(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end);

                                                                                                        let getBetweenScheduleDates = getDaysBetweenDatesYearFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                        
                                                                                                        if(getBetweenScheduleDates.length==cancaledDays.length)

                                                                                                        var yaerOneLoa = getBetweenScheduleDates.length;

                                                                                                        else

                                                                                                        var yaerOneLoa = getBetweenScheduleDates.length-cancaledDays.length;

                                                                                                        var User_RemovedDatesYearOne = getWeekDaysCancel(YearOne_Start_Date, YearOne_End_Date, req.body.start, req.body.end,yaerOneLoa);
                                                                                                        console.log(yaerOneLoa,"-------------------yaerOneLoa");
                                                                                                        let stopExecutionOne = { stop: false }
                                                                                                        let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                            console.log(error)
                                                                                                            stopExecutionOne = error
                                                                                                        })

                                                                                                        if(isAvailableDayYearOne.type =="winter"){

                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                                var WE_day = result.Winter_WeekEndDays;
    
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                    {
            
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Winter_WeekDays: WS_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                        Winter_WeekEndDays: WE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
            
                                                                                                                    function (err, data) {
            
                                                                                                                        console.log('Completed the year One Winetr part')
                                                                                                                    });
    
                                                                                                            });

                                                                                                        }

                                                                                                        
                                                                                                        else if(isAvailableDayYearOne.type =="summer"){

                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {

                                                                                                                var S_day = result.Summer_WeekDays;
                                                                                                                var SE_day = result.Summer_WeekEndDays;
    
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                    {
            
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Summer_WeekDays: S_day - User_RemovedDatesYearOne.outPutWeekday,
                                                                                                                        Summer_WeekEndDays: SE_day - User_RemovedDatesYearOne.outPutWeekend,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
            
                                                                                                                    function (err, data) {
            
                                                                                                                        console.log('Completed the year One Summer part')
                                                                                                                    });
    
                                                                                                            });

                                                                                                        }

                                                                                                        else if(isAvailableDayYearOne.type =="both"){


                                                                                                            
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearOne.winter_Arr));
                                                                                                            
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                            
                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp}).then(result => {
                                                                                                                      
                                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                                var WE_day = result.Winter_WeekEndDays;
                                                                                                                var SS_day = result.Summer_WeekDays;
                                                                                                                var SE_day = result.Summer_WeekEndDays;
        
                                                                                                              
                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                                                                    {
            
                                                                                                                        Boat_Id: Boat_id,
                                                                                                                        Owner_Id: Owner_id,
                                                                                                                        Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                        Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                        Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                        Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                        IsActive: true,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },
            
                                                                                                                    function (err, data) {
            
                                                                                                                        console.log('Completed the Both year one part')
                                                                                                                    });
                                                                                                            })
    
    
    
                                                                                                            }


                                                                                                            
                                                                                                ///// Year Two /////

                                                                                                var End_final_yearTwo = moment(Enddate_old);
                                                                                                var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                let YearTwo_Start_Date = firstDayTwo;
                                                                                                let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                           let cancaledDaysTwo = getAllCanceledDates(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end);

                                                                                           let getBetweenScheduleDatesTwo = getDaysBetweenDatesYearFirst(YearTwo_Start_Date, YearTwo_End_Date);

                                                                                          if(getBetweenScheduleDatesTwo.length == cancaledDaysTwo.length)
                                                                                          var yaertwoLoa = getBetweenScheduleDatesTwo.length;
                                                                                          else
                                                                                           var yaertwoLoa = getBetweenScheduleDatesTwo.length-cancaledDaysTwo.length;

                                                                                           var User_RemovedDatesYearTwo = getWeekDaysCancel(YearTwo_Start_Date, YearTwo_End_Date, req.body.start, req.body.end,yaertwoLoa);
                                                                                           console.log(yaertwoLoa,"-------------------yaerTwoLoa");

                                                                                           let stopExecutionTwo = { stop: false }
                                                                                           let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                               console.log(error)
                                                                                               stopExecutionTwo = error
                                                                                           })

                                                                                           if(isAvailableDayYearTwo.type =="winter"){

                                                                                               OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                           
                                                                                                   var WS_day = result.Winter_WeekDays;
                                                                                                   var WE_day = result.Winter_WeekEndDays;
                                                                                           
                                                                                                   OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                       {
                                                                                           
                                                                                                           Boat_Id: Boat_id,
                                                                                                           Owner_Id: Owner_id,
                                                                                                           Winter_WeekDays: WS_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                           Winter_WeekEndDays: WE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                           IsActive: true,
                                                                                                           Current_Time: moment(Date.now()),
                                                                                                           Updated_time: moment(Date.now())
                                                                                                       },
                                                                                           
                                                                                                       function (err, data) {
                                                                                           
                                                                                                           console.log('Completed the year two Winetr part')
                                                                                                       });
                                                                                           
                                                                                               });
                                                                                           
                                                                                           }

                                                                                           else if(isAvailableDayYearTwo.type =="summer"){

                                                                                               OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                           
                                                                                                   var S_day = result.Summer_WeekDays;
                                                                                                   var SE_day = result.Summer_WeekEndDays;
                                                                                           
                                                                                                   OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                       {
                                                                                           
                                                                                                           Boat_Id: Boat_id,
                                                                                                           Owner_Id: Owner_id,
                                                                                                           Summer_WeekDays: S_day - User_RemovedDatesYearTwo.outPutWeekday,
                                                                                                           Summer_WeekEndDays: SE_day - User_RemovedDatesYearTwo.outPutWeekend,
                                                                                                           IsActive: true,
                                                                                                           Current_Time: moment(Date.now()),
                                                                                                           Updated_time: moment(Date.now())
                                                                                                       },
                                                                                           
                                                                                                       function (err, data) {
                                                                                           
                                                                                                           console.log('Completed the year Two Summer part')
                                                                                                       });
                                                                                           
                                                                                               });
                                                                                           
                                                                                           }

                                                                                           else if(isAvailableDayYearTwo.type =="both"){



                                                                                               var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.summer_Arr));
                                                                                               var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayYearTwo.winter_Arr));
                                                                                               
                                                                                               var WeekDay_Count_edit_summer = summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                            
                                                                                              
                                                                                               OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).then(result => {
                                                                                                         
                                                                                                   var WS_day = result.Winter_WeekDays;
                                                                                                   var WE_day = result.Winter_WeekEndDays;
                                                                                                   var SS_day = result.Summer_WeekDays;
                                                                                                   var SE_day = result.Summer_WeekEndDays;
                                                                                               
                                                                                                 
                                                                                                   OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                       {
                                                                                               
                                                                                                           Boat_Id: Boat_id,
                                                                                                           Owner_Id: Owner_id,
                                                                                                           Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                           Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                           Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                           Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                           IsActive: true,
                                                                                                           Current_Time: moment(Date.now()),
                                                                                                           Updated_time: moment(Date.now())
                                                                                                       },
                                                                                               
                                                                                                       function (err, data) {
                                                                                               
                                                                                                           console.log('Completed the Both year two part')
                                                                                                       });
                                                                                               })
                                                                                               
                                                                                               
                                                                                               
                                                                                               }


                                                                                           /// End Year two ///





                                                                                                }


                                   
                                                     



                                                                                            }


                                    
                                                                                      

                                                                                    }

                                                                                    
              
                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                    if(updateSchedule){
                                                                                        if (cancaledDays.length > 0) {

                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                    if (err) {
                                                                                                        return;
                                                                                                    }

                                                                                                });
                                                                                        
                                                                                    }
                                                                                    let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                    let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
                                                                                    if(MailSend){

                                                                                        res.json({
                                                                                
                                                                                            status: true,
                                                                                            message: 'The booking has been successfully Updated'
                                                                                        })
                                                                                
                                                                                    }
                                                                                }


                                                                              }else{
                                                                                  res.json({
                                                                                      status: false,
                                                                                      message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                  })

                                                                              }
                                                                              
                                                                              

                                                                                        }


                                                                                    }



                                                                            });
                                                                        })


                                                                    }
                                                                })




                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {

                                                        //

                                                       
                                                        var todaysdate = moment();
                                                       
                                                        var canceldate = moment(Cancelresults.Updated_time)
                                                        var dif = moment.duration(todaysdate.diff(canceldate));
                                                      
                                                        var Hrdif = Math.round(dif.asHours());

                                                      


                                                        if (Hrdif > 24) {
                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                var _Length = result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                        if (Total_Count > Totalday_old) {

                                                                            Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: [{ $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: Start_final_withoutTime_New } }, { end: { $gte: Start_final_withoutTime_New } }] }, { start_NoTime: Start_final_withoutTime_New }, { start_NoTime: End_final_withoutTime }] }).then(results => {
                                                                                if (results == null) {




                                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                                        var WinterweekendDays = response.Winter_WeekEndDays;
    
                                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},
    
                                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
    
    
                                                                                            let stopExecution = { stop: false }
                                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                                
                                                                                                console.log(error)
                                                                                                stopExecution = error
                                                                                            })
        
                                                                                           
                                                                                            if (stopExecution.stop) {
                                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                                            }
        
                                                                                            let isNextDaysError = false
                                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                    isNextDaysError = true
                                                                                                    return res.json(error)
                                                                                                })
        
        
                                                                                                if (isNextDaysError) return
        
                                                                                                var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                                
                                                                                                var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                                let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                                if(element){
        
                                                                                                    var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                    var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'Consecutive days for this boat is Empty'
                                                                                                    })
        
                                                                                                }
                                                                                                
                                                                                                if(isAvailableDay.type=="summer"){
        
                                                                                                    if(SummerConsecutiveDays>=Total_Count){
            
                                                                                                        //count of weekday and week end
            
                                                                                                        if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
            
                                                                                                                Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                                Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                            
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
                                                                                                            
                                                                                                            
                                                                                                            });
                                                                                                            var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                            if(MonthBookingStatus ==1)
                                                                                                            var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                            else
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                            
                                                                                                            let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                            if(updateSchedule){
        
                                                                                                                if (cancaledDays.length > 0) {
        
                                                                                                                    var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                    CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                    CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                    CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                    CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                    CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                        CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                        CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                        CancelDaysbefore24.save(function (err, saved) {
                                                                                                                            if (err) {
                                                                                                                                return;
                                                                                                                            }
            
                                                                                                                        });
            
                                                                                                                }
        
                                                                                                            }
                                                                                                            
        
                                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
            
                                                                                                            if(MailSend){
            
                                                                                                                res.json({
            
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                                })
            
                                                                                                            }
            
                                                                                                            
            
                                                                                                            
                                                                                                         }
                                                                                                        else{
            
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                            })
            
                                                                                                        }
            
                                                                                                    }else{
            
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                        })
            
                                                                                                    }
            
                                                                                                }
    
                                                                                                                                                                        
                                                                                               else if(isAvailableDay.type=="winter"){
        
                                                                                                    if(WinterConsecutiveDays>=Total_Count){
            
                                                                                                        //count of weekday and week end
            
                                                                                                        if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
            
                                                                                                                Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                            
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
                                                                                                            
                                                                                                            
                                                                                                            });
                                                                                                            var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                            if(MonthBookingStatus ==1)
                                                                                                            var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                            else
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                            
                                                                                                            let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                            if(updateSchedule){
        
                                                                                                                if (cancaledDays.length > 0) {
        
                                                                                                                    var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                    CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                    CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                    CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                    CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                    CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                        CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                        CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                        CancelDaysbefore24.save(function (err, saved) {
                                                                                                                            if (err) {
                                                                                                                                return;
                                                                                                                            }
            
                                                                                                                        });
            
                                                                                                                }
        
                                                                                                            }
                                                                                                            
        
                                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
            
                                                                                                            if(MailSend){
            
                                                                                                                res.json({
            
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                                })
            
                                                                                                            }
            
                                                                                                            
            
                                                                                                            
                                                                                                         }
                                                                                                        else{
            
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                            })
            
                                                                                                        }
            
                                                                                                    }else{
            
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                        })
            
                                                                                                    }
            
                                                                                                }
    
                                                                    
                                                                                             else if(isAvailableDay.type=="both"){
                                                                                               
                                                                                                if(isAvailableDay.bookingType == "Summer booking")
                                                                                                var consecutiveCount = SummerConsecutiveDays;
                                                                                                else
                                                                                                var consecutiveCount = WinterConsecutiveDays;
        
                                                                                                if(consecutiveCount>=Total_Count){
        
                                                                                                
                                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                                var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                                var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                                
                                                                                                if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
        
                                                                                                                Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
        
        
                                                                                                            });
        
                                                                                                            var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                            var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                  
                                                                                                            var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                            var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
    
                                                                                                            let stopExecutionboth = { stop: false }
                                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                                console.log(error)
                                                                                                                stopExecutionboth = error
                                                                                                            })
                        
                                                                                                           
                                                                                                            if (stopExecutionboth.stop) {
                                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                            }
    
                                                                                                            
    
                                                                                                            if(isAvailableDayBoth.type=="summer"){
                                                                                                                var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                                var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
    
                                                                                                            }else if(isAvailableDayBoth.type=="winter"){
    
                                                                                                                var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
    
                                                                                                            }else if(isAvailableDayBoth.type=="both"){
                                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                                var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
        
    
    
                                                                                                            }
    
                                                                 
    
                                                                                                            if(MonthBookingStatus ==1){
                                                                                                                
                                                                                                                var bookedDaysOf = AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date_New, end_Date_New,anni_month,start_Date,Enddate_old);
                                                                                                                
        
        
                                                                                                            }
                                                                                                            
                                                                                                            else{
    
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                            }
    
                                                                                                            let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                            if(updateSchedule){
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                                
        
                                                                                                }else{
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
                                                                                                
                                                                                                
                                                                                                }else{
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
    
                                                                                             }
    
    
    
                                                                                        });
                                                                                    })

                                       
                                                                                }
                                                                                else {
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                    })
                                                                                }

                                                                            })

                                                                        }
                                                                        else {

                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })


                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }

                                                                                    if (isAvailableDay && isAvailableDay.status)//check Date Between Summer Dates
                                                                                    {

                                                                                        //check if next booking included

                                                                                        let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id, true).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return

                                                                                        consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id) })
                                                                                            .then(async (element) => {
                                                                                                if (element != null) {



                                                                                                    if (element.Summer_ConsecutiveDays >= Total_Count)//consecutive count
                                                                                                    {


                                                                                                        if ((PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count)||((PendingSummerWeekdays!=0 &&PendingSummerWeekdays>cancaledDays.length)&&(PendingSummerWeekEnddays!=0 && PendingSummerWeekEnddays>cancaledDays.length)))//count of weekday and week end
                                                                                                        {

                                                                                                            // for updating Summer days
                                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                {

                                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                                                                                },
                                                                                                                { new: true },
                                                                                                                function (err, data) {


                                                                                                                });

                                                                                                            //partial cancellation
                                                                                                            const getyear = new Date(Start_final);
                                                                                                            const Cancellationyear = getyear.getFullYear();
                                                                                                            var Noofcancellation = Totalday_old - Total_Count;
                                                                                                            let TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                console.log(TotalCancellation)
                                                                                                            })
                                                                                                            //partial cancellation


                                                                                                            var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                            })
                                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                                            })
                                                                                                            var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                            })
                                                                                                            if (Noofcancellation > GetCancellationNumber.No_PartialCancellation || GetYearOfCancellation.Noofcancellation < GetAllocatedNumber.No_PartialCancellation) {
                                                                                                                var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                                //get days and weeks 
                                                                                                                var obj = Object();
                                                                                                                obj.start = Start_final;
                                                                                                                obj.end = End_final;

                                                                                                                var datas = getDaysInMonth_Sheduler(obj);
                                                                                                                console.log(datas)
                                                                                                                var arr = [];

                                                                                                                datas.forEach(function (item) {
                                                                                                                    Object.keys(item).forEach(function (key) {
                                                                                                                        arr.push(item[key]);
                                                                                                                        console.log(item[key]);
                                                                                                                    });
                                                                                                                });
                                                                                                                console.log(arr)
                                                                                                                var index = arr.length - 1;
                                                                                                                var Loa_Length = No_Of_LOA;
                                                                                                                var WeekDay_Count_edit = 0;
                                                                                                                var WeekEnd_Count_edit = 0;
                                                                                                                while (Loa_Length > 0) {


                                                                                                                    console.log(arr[index]);
                                                                                                                    let day = arr[index];

                                                                                                                    if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                                        WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                                    }
                                                                                                                    else {
                                                                                                                        WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                                    }

                                                                                                                    Loa_Length--;
                                                                                                                    index--;
                                                                                                                }
                                                                                                                var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                                                var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                                    {

                                                                                                                        WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                                        WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                                        Total_Edit_Loa: No_Of_LOA,
                                                                                                                        PartialCancellation_Status: 1,
                                                                                                                        Updated_time: moment(Date.now()),

                                                                                                                    },

                                                                                                                    function (err, data) {
                                                                                                                    })


                                                                                                                if (GetCancellationNumber.No_PartialCancellation) {


                                                                                                                    let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)


                                                                                                                    //update allocated cancellation days

                                                                                                                    //reassigning


                                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                        console.log(result)
                                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                            {

                                                                                                                                Boat_Id: Boat_id,
                                                                                                                                Owner_Id: Owner_id,
                                                                                                                                Summer_WeekDays: SS_day - reAssignedWeekDaysCount,
                                                                                                                                Summer_WeekEndDays: SE_day - reAssignedWeekendCount,
                                                                                                                                IsActive: true,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },

                                                                                                                            function (err, data) {

                                                                                                                                console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                                                                                                            });
                                                                                                                    })

                                                                                                                    //reassigning
                                                                                                                }


                                                                                                                //get days and weeks 
                                                                                                                //update allocated cancellation days

                                                                                                                manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                                    {
                                                                                                                        No_PartialCancellation: 0,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },

                                                                                                                    function (err, data) {

                                                                                                                    });


                                                                                                                //update Summer

                                                                                                            }
                                                                                                            else {
                                                                                                                var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                                                //update allocated cancellation days

                                                                                                                manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                                    {
                                                                                                                        No_PartialCancellation: No_Of_LOA,
                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                    },

                                                                                                                    function (err, data) {

                                                                                                                    });

                                                                                                                //update allocated cancellation days
                                                                                                                //reassigning
                                                                                                                var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                                var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;

                                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                    console.log(result)
                                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                                    var SE_day = result.Summer_WeekEndDays;

                                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                        {

                                                                                                                            Boat_Id: Boat_id,
                                                                                                                            Owner_Id: Owner_id,
                                                                                                                            Summer_WeekDays: SS_day - WeekdayCancelled,
                                                                                                                            Summer_WeekEndDays: SE_day - WeekEndCancelled,
                                                                                                                            IsActive: true,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now())
                                                                                                                        },

                                                                                                                        function (err, data) {

                                                                                                                            console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                                                                                                        });
                                                                                                                })

                                                                                                                //reassigning
                                                                                                            }

                                                                                                            //Add Summer Section

                                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                                {




                                                                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                                                    Booking_ID: globalbookingid,
                                                                                                                    Boat_Name: req.body.Boat_Name,
                                                                                                                    Total_DaysBooked: Total_Count,
                                                                                                                    WeekDay_Count: WeekDay_Count,
                                                                                                                    WeekEnd_Count: WeekEnd_Count,
                                                                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                                                    title: req.body.title,
                                                                                                                    body: req.body.body,
                                                                                                                    start: req.body.start,
                                                                                                                    end: req.body.end,
                                                                                                                    start_NoTime: Start_final,
                                                                                                                    end_NoTime: End_final,
                                                                                                                    goingDuration: req.body.goingDuration,
                                                                                                                    comingDuration: req.body.comingDuration,
                                                                                                                    isAllDay: req.body.isAllDay,
                                                                                                                    category: req.body.category,
                                                                                                                    dueDateClass: req.body.dueDateClass,
                                                                                                                    location: req.body.location,
                                                                                                                    attendees: req.body.attendees,
                                                                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                                                    Check_Status: req.body.Check_Status,
                                                                                                                    commends: req.body.commends,
                                                                                                                    isPending: req.body.isPending,
                                                                                                                    isFocused: req.body.isFocused,
                                                                                                                    isVisible: req.body.isVisible,
                                                                                                                    isReadOnly: req.body.isReadOnly,
                                                                                                                    isPrivate: req.body.isPrivate,
                                                                                                                    color: req.body.color,
                                                                                                                    bgColor: req.body.bgColor,
                                                                                                                    dragBgColor: req.body.dragBgColor,
                                                                                                                    borderColor: req.body.borderColor,
                                                                                                                    customStyle: req.body.customStyle,
                                                                                                                    raw: req.body.raw,
                                                                                                                    state: req.body.state,
                                                                                                                    User_RoleType: req.body.User_RoleType,
                                                                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                                                    Status: Module_status,
                                                                                                                    IsActive: req.body.IsActive,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now()),
                                                                                                                    start_CancelledDate: StartDate_Cancelled,
                                                                                                                    end_CancelledDate: end_date_old,
                                                                                                                    Booking_Type: bookingType,
                                                                                                                    cancaledDays,
                                                                                                                    isBookingPending: isNextBookingDayIncluded.included ? true : false,
                                                                                                                    isNextDayBookingIncluded: isNextBookingDayIncluded.isNextDayBookingIncluded

                                                                                                                },

                                                                                                               async function (err, data) {

                                                                                                                    if (cancaledDays.length > 0) {

                                                                                                                        var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                        CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                        CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                        CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                        CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                        CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                                                if (err) {
                                                                                                                                    return;
                                                                                                                                }

                                                                                                                            });

                                                                                                                    }

                                                                                                                    let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                                    res.json({

                                                                                                                        status: true,
                                                                                                                        message: 'The booking has been successfully updated'
                                                                                                                    })
                                                                                                                })
                                                                                                        }//weekday,weekend
                                                                                                        else {

                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                            })


                                                                                                        }
                                                                                                    }
                                                                                                    else {

                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                        })


                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                    })

                                                                                                }
                                                                                            })

                                                                                    }



                                                                                    else {

                                                                                        //WinterSeason_SDate:{$lte:Start_final_withoutTime},WinterSeason_EDate:{$gte:End_final_withoutTime},
                                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (BoatresultsWinter) => {
                                                                                            console.log(BoatresultsWinter);
                                                                                            //list all winter start and end date of  owne  based on owner duration  duration which include all year

                                                                                            let stopExecution = { stop: false }
                                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, BoatresultsWinter.WinterSeason_SDate, BoatresultsWinter.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                                console.log(error)
                                                                                                stopExecution = error
                                                                                            })

                                                                                            if (stopExecution.stop) {
                                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                                            }



                                                                                            if (isAvailableDay && isAvailableDay.status)//check Date Between winter Dates
                                                                                            {
                                                                                                //check if next booking included

                                                                                                let isNextDaysError = false
                                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, false, req.body.User_Id, true).catch((error) => {
                                                                                                    isNextDaysError = true
                                                                                                    return res.json(error)
                                                                                                })


                                                                                                if (isNextDaysError) return


                                                                                                consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id) })
                                                                                                    .then(async (element) => {
                                                                                                        if (element != null) {

                                                                                                            if (element.Winter_ConsecutiveDays >= Total_Count) {

                                                                                                                if ((PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count)||((PendingSummerWeekdays!=0 &&PendingSummerWeekdays>cancaledDays.length)&&(PendingSummerWeekEnddays!=0 && PendingSummerWeekEnddays>cancaledDays.length)))//count of weekday and week end
                                                                                                                {

                                                                                                                    // for updating Summer days
                                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                                        {

                                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                                                        },
                                                                                                                        { new: true },
                                                                                                                        function (err, data) {


                                                                                                                        });
                                                                                                                    //partial cancellation
                                                                                                                    const getyear = new Date(Start_final);
                                                                                                                    const Cancellationyear = getyear.getFullYear();
                                                                                                                    var Noofcancellation = Totalday_old - Total_Count;
                                                                                                                    let TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                                        console.log(error)
                                                                                                                        console.log(TotalCancellation)
                                                                                                                    })
                                                                                                                    //partial cancellation


                                                                                                                    var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                                    })
                                                                                                                    var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                                                    })
                                                                                                                    var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                                    })
                                                                                                                    if (Noofcancellation > GetCancellationNumber.No_PartialCancellation || GetYearOfCancellation.Noofcancellation < GetAllocatedNumber.No_PartialCancellation) {
                                                                                                                        var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                                        //get days and weeks 
                                                                                                                        var obj = Object();
                                                                                                                        obj.start = Start_final;
                                                                                                                        obj.end = End_final;

                                                                                                                        var datas = getDaysInMonth_Sheduler(obj);
                                                                                                                        console.log(datas)
                                                                                                                        var arr = [];

                                                                                                                        datas.forEach(function (item) {
                                                                                                                            Object.keys(item).forEach(function (key) {
                                                                                                                                arr.push(item[key]);
                                                                                                                                console.log(item[key]);
                                                                                                                            });
                                                                                                                        });
                                                                                                                        console.log(arr)
                                                                                                                        var index = arr.length - 1;
                                                                                                                        var Loa_Length = No_Of_LOA;
                                                                                                                        var WeekDay_Count_edit = 0;
                                                                                                                        var WeekEnd_Count_edit = 0;
                                                                                                                        while (Loa_Length > 0) {


                                                                                                                            console.log(arr[index]);
                                                                                                                            let day = arr[index];

                                                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                                                WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                                            }
                                                                                                                            else {
                                                                                                                                WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                                            }

                                                                                                                            Loa_Length--;
                                                                                                                            index--;
                                                                                                                        }
                                                                                                                        var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                                                        var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                                            {

                                                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                                                PartialCancellation_Status: 1,
                                                                                                                                Updated_time: moment(Date.now()),

                                                                                                                            },

                                                                                                                            function (err, data) {
                                                                                                                            })

                                                                                                                        if (GetCancellationNumber.No_PartialCancellation) {



                                                                                                                            let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)


                                                                                                                            //update allocated cancellation days

                                                                                                                            //reassigning


                                                                                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                                console.log(result)

                                                                                                                                var WS_day = result.Winter_WeekDays;
                                                                                                                                var WE_day = result.Winter_WeekEndDays;

                                                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                                                    {

                                                                                                                                        Boat_Id: Boat_id,
                                                                                                                                        Owner_Id: Owner_id,
                                                                                                                                        Winter_WeekDays: WS_day - reAssignedWeekDaysCount,
                                                                                                                                        Winter_WeekEndDays: WE_day - reAssignedWeekendCount,
                                                                                                                                        IsActive: true,
                                                                                                                                        Current_Time: moment(Date.now()),
                                                                                                                                        Updated_time: moment(Date.now())
                                                                                                                                    },

                                                                                                                                    function (err, data) {

                                                                                                                                        console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                                                                                                                    });
                                                                                                                            })

                                                                                                                            //reassigning
                                                                                                                        }


                                                                                                                        //get days and weeks 
                                                                                                                        //update allocated cancellation days

                                                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                                            {
                                                                                                                                No_PartialCancellation: 0,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },

                                                                                                                            function (err, data) {

                                                                                                                            });


                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                                                        //update allocated cancellation days

                                                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                                            {
                                                                                                                                No_PartialCancellation: No_Of_LOA,
                                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                                Updated_time: moment(Date.now())
                                                                                                                            },

                                                                                                                            function (err, data) {

                                                                                                                            });

                                                                                                                        //update allocated cancellation days
                                                                                                                        //reassigning
                                                                                                                        var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                                        var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;

                                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                                            console.log(result)
                                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                                            var WE_day = result.Winter_WeekEndDays;

                                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1},
                                                                                                                                {

                                                                                                                                    Boat_Id: Boat_id,
                                                                                                                                    Owner_Id: Owner_id,
                                                                                                                                    Winter_WeekDays: WS_day - WeekdayCancelled,
                                                                                                                                    Winter_WeekEndDays: WE_day - WeekEndCancelled,
                                                                                                                                    IsActive: true,
                                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                                },

                                                                                                                                function (err, data) {

                                                                                                                                    console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                                                                                                                });
                                                                                                                        })

                                                                                                                        //reassigning
                                                                                                                    }
                                                                                                                    //Add Winter Section

                                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                                                        {



                                                                                                                            Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                                                            Booking_ID: globalbookingid,
                                                                                                                            Boat_Name: req.body.Boat_Name,
                                                                                                                            Total_DaysBooked: Total_Count,
                                                                                                                            WeekDay_Count: WeekDay_Count,
                                                                                                                            WeekEnd_Count: WeekEnd_Count,
                                                                                                                            calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                                                            title: req.body.title,
                                                                                                                            body: req.body.body,
                                                                                                                            start: req.body.start,
                                                                                                                            end: req.body.end,
                                                                                                                            start_NoTime: Start_final,
                                                                                                                            end_NoTime: End_final,
                                                                                                                            goingDuration: req.body.goingDuration,
                                                                                                                            comingDuration: req.body.comingDuration,
                                                                                                                            isAllDay: req.body.isAllDay,
                                                                                                                            category: req.body.category,
                                                                                                                            dueDateClass: req.body.dueDateClass,
                                                                                                                            location: req.body.location,
                                                                                                                            attendees: req.body.attendees,
                                                                                                                            recurrenceRule: req.body.recurrenceRule,
                                                                                                                            isPending: req.body.isPending,
                                                                                                                            isFocused: req.body.isFocused,
                                                                                                                            isVisible: req.body.isVisible,
                                                                                                                            isReadOnly: req.body.isReadOnly,
                                                                                                                            isPrivate: req.body.isPrivate,
                                                                                                                            Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                                                            Check_Status: req.body.Check_Status,
                                                                                                                            commends: req.body.commends,
                                                                                                                            color: req.body.color,
                                                                                                                            bgColor: req.body.bgColor,
                                                                                                                            dragBgColor: req.body.dragBgColor,
                                                                                                                            borderColor: req.body.borderColor,
                                                                                                                            customStyle: req.body.customStyle,
                                                                                                                            raw: req.body.raw,
                                                                                                                            state: req.body.state,
                                                                                                                            User_RoleType: req.body.User_RoleType,
                                                                                                                            User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                                                            Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                                                            Status: Module_status,
                                                                                                                            IsActive: req.body.IsActive,
                                                                                                                            Current_Time: moment(Date.now()),
                                                                                                                            Updated_time: moment(Date.now()),
                                                                                                                            start_CancelledDate: StartDate_Cancelled,
                                                                                                                            end_CancelledDate: end_date_old,
                                                                                                                            Booking_Type: bookingType,
                                                                                                                            cancaledDays,
                                                                                                                            isBookingPending: isNextBookingDayIncluded.included ? true : false,
                                                                                                                            isNextDayBookingIncluded: isNextBookingDayIncluded.isNextDayBookingIncluded

                                                                                                                        },

                                                                                                                       async function (err, data) {

                                                                                                                            if (cancaledDays.length > 0) {

                                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                                        if (err) {
                                                                                                                                            return;
                                                                                                                                        }

                                                                                                                                    });

                                                                                                                            }

                                                                                                                           let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                                            res.json({

                                                                                                                                status: true,
                                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                                            })
                                                                                                                        })


                                                                                                                }//weekday weekend count
                                                                                                                else {

                                                                                                                    res.json({
                                                                                                                        status: false,
                                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                                    })



                                                                                                                }
                                                                                                                //Add Winter Section
                                                                                                            }

                                                                                                            else {

                                                                                                                res.json({
                                                                                                                    status: false,
                                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                                })

                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            res.json({
                                                                                                                status: false,
                                                                                                                message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                            })
                                                                                                        }
                                                                                                    })
                                                                                            }
                                                                                            else {
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'These Dates Are not Allowed for Booking'
                                                                                                })
                                                                                            }
                                                                                        })
                                                                                    }//else



                                                                                });
                                                                            })

                                                                        }
                                                                    })



                                                                });//else inside function owner




                                                            });

                                                        }
                                                        else {
                                                            res.json({
                                                                status: false,
                                                                message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                            })
                                                        } //

                                                        // res.json({
                                                        //     status:false,
                                                        //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                                        // })

                                                    }
                                                })
                                            })
                                    }



                                }

                                if (check_Status = "4" && User_role == "Maintenance") {
                                    console.log(Start_final_withoutTime + "@" + End_final_withoutTime);

                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                        console.log(result.length, 'lengthEDIT');


                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true, isBookingPending: false }).then(result2 => {

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true, isBookingPending: false }).then(results => {
                                                if (Total_Count > Totalday_old) {

                                                    let allDaysBooked = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                    let arrayofBook = []

                                                    allDaysBooked.map((date) => arrayofBook.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                    //Schedule.findOne({isBookingPending:false,_id:{$ne:scheduleid},Boat_Id:Boat_id,IsActive:true,$or:[{$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]},{$and:[{start:{$lte:Start_final_withoutTime_New}},{end:{$gte:Start_final_withoutTime_New}}]},{start_NoTime:Start_final_withoutTime_New},{start_NoTime:End_final_withoutTime}]}).then(results=>

                                                    Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: arrayofBook }).then(results => {

                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {



                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    WeekDay_Count: WeekDay_Count,
                                                                    WeekEnd_Count: WeekEnd_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: req.body.start,
                                                                    end: req.body.end,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: Start_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    bgColor: req.body.bgColor,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now()),
                                                                    start_CancelledDate: StartDate_Cancelled,
                                                                    end_CancelledDate: end_date_old,
                                                                    Booking_Type: bookingType,
                                                                    cancaledDays

                                                                },

                                                                function (err, data) {
                                                                    //mail

                                                                    const emailState = 'Successfully Edited.';
                                                                    const emailContent = `Dear ${OwnerDetails.First_Name}, <p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)} has been succesfully edited by the Smart Boating Booking team</p>`;
                                                                    const emailContentAdmin = `Dear Adminsistrator, <p>The Smart Boating Team has suceesfully edited a booking for ${OwnerDetails.First_Name} on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                    const emailDetailName = 'Booking Details'
                                                                    const emailDetails = [
                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                    ];
                                                                    const emailNameAndLink = {
                                                                        name: 'Login Link',
                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                    }


                                                                    var mailOptionsAdmin = {
                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                        to: "admin@smartboating.com.au",
                                                                        subject: 'Maintainance Edited',
                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                    };

                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                    });
                                                                    //mail


                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The boat maintenance booking has been successfully Updated'
                                                                    })
                                                                })

                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add
                                                }
                                                else {
                                                    console.log('Admin')
                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                        {



                                                            Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                            Booking_ID: globalbookingid,
                                                            Boat_Name: req.body.Boat_Name,
                                                            Total_DaysBooked: Total_Count,
                                                            WeekDay_Count: WeekDay_Count,
                                                            WeekEnd_Count: WeekEnd_Count,
                                                            calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                            title: req.body.title,
                                                            body: req.body.body,
                                                            start: req.body.start,
                                                            end: req.body.end,
                                                            start_NoTime: Start_final_withoutTime,
                                                            end_NoTime: Start_final_withoutTime,
                                                            goingDuration: req.body.goingDuration,
                                                            comingDuration: req.body.comingDuration,
                                                            isAllDay: req.body.isAllDay,
                                                            category: req.body.category,
                                                            dueDateClass: req.body.dueDateClass,
                                                            location: req.body.location,
                                                            attendees: req.body.attendees,
                                                            recurrenceRule: req.body.recurrenceRule,
                                                            isPending: req.body.isPending,
                                                            isFocused: req.body.isFocused,
                                                            isVisible: req.body.isVisible,
                                                            isReadOnly: req.body.isReadOnly,
                                                            isPrivate: req.body.isPrivate,
                                                            color: req.body.color,
                                                            Is_StandByBooking: req.body.Is_StandByBooking,
                                                            Check_Status: req.body.Check_Status,
                                                            commends: req.body.commends,
                                                            bgColor: req.body.bgColor,
                                                            dragBgColor: req.body.dragBgColor,
                                                            borderColor: req.body.borderColor,
                                                            customStyle: req.body.customStyle,
                                                            raw: req.body.raw,
                                                            state: req.body.state,
                                                            User_RoleType: req.body.User_RoleType,
                                                            User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                            Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                            Status: Module_status,
                                                            IsActive: req.body.IsActive,
                                                            Current_Time: moment(Date.now()),
                                                            Updated_time: moment(Date.now()),
                                                            start_CancelledDate: StartDate_Cancelled,
                                                            end_CancelledDate: end_date_old,
                                                            Booking_Type: bookingType,
                                                            cancaledDays

                                                        },

                                                        function (err, data) {
                                                            //mail

                                                            const emailState = 'Successfully Edited.';
                                                            const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited </p>`;
                                                            const emailContentAdmin = `Dear Adminsistrator,<p> The boat,${boatDetails.Boat_Name} has successfully edited a boat maintaince at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                            const emailDetailName = 'Booking Details'
                                                            const emailDetails = [
                                                                { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                            ];
                                                            const emailNameAndLink = {
                                                                name: 'Login Link',
                                                                link: `${process.env.CLIENT_URL}/boat-bookings`
                                                            }



                                                            var mailOptionsAdmin = {
                                                                from: "noreply.smartboatbooking@gmail.com",
                                                                to: "admin@smartboating.com.au",
                                                                subject: 'Maintainance Edited',
                                                                html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                            };

                                                            transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                            });
                                                            //mail


                                                            res.json({

                                                                status: true,
                                                                message: 'The boat maintenance booking has been successfully Updated'
                                                            })
                                                        })

                                                }
                                            })


                                        })

                                        //  var _Length=result.length;

                                    })


                                }

                                // special Day
                                if (specialDayCheck == 1) {
                                    console.log("EditSchedule Special Day");
                                    const Specialday_id = req.body.Specialday_id;
                                    const objSpecial = req.body.Special_Day;



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            // var _Length=result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                    if (Total_Count > Totalday_old) {
                                                        Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: [{ $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: Start_final_withoutTime_New } }, { end: { $gte: Start_final_withoutTime_New } }] }, { start_NoTime: Start_final_withoutTime_New }, { start_NoTime: End_final_withoutTime }] }).then(results => {
                                                            if (results == null) {


                                                                //Add 
                                                                console.log('Admin')
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                    {


                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                        Booking_ID: globalbookingid,
                                                                        Boat_Name: req.body.Boat_Name,
                                                                        Total_DaysBooked: Total_Count,
                                                                        WeekDay_Count: WeekDay_Count,
                                                                        WeekEnd_Count: WeekEnd_Count,
                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                        title: req.body.title,
                                                                        body: req.body.body,
                                                                        start: req.body.start,
                                                                        end: req.body.end,
                                                                        start_NoTime: Start_final_withoutTime,
                                                                        end_NoTime: End_final_withoutTime,
                                                                        goingDuration: req.body.goingDuration,
                                                                        comingDuration: req.body.comingDuration,
                                                                        isAllDay: req.body.isAllDay,
                                                                        category: req.body.category,
                                                                        dueDateClass: req.body.dueDateClass,
                                                                        location: req.body.location,
                                                                        attendees: req.body.attendees,
                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                        isPending: req.body.isPending,
                                                                        isFocused: req.body.isFocused,
                                                                        isVisible: req.body.isVisible,
                                                                        isReadOnly: req.body.isReadOnly,
                                                                        isPrivate: req.body.isPrivate,
                                                                        color: req.body.color,
                                                                        bgColor: req.body.bgColor,
                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                        Check_Status: req.body.Check_Status,
                                                                        commends: req.body.commends,
                                                                        dragBgColor: req.body.dragBgColor,
                                                                        borderColor: req.body.borderColor,
                                                                        customStyle: req.body.customStyle,
                                                                        raw: req.body.raw,
                                                                        state: req.body.state,
                                                                        User_RoleType: req.body.User_RoleType,
                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                        Status: Module_status,
                                                                        IsActive: req.body.IsActive,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now()),
                                                                        start_CancelledDate: StartDate_Cancelled,
                                                                        end_CancelledDate: end_date_old,
                                                                        Booking_Type: bookingType,
                                                                        cancaledDays

                                                                    },

                                                                    function (err, data) {
                                                                        res.json({

                                                                            status: true,
                                                                            message: 'The admin booking has been successfully created'
                                                                        })
                                                                    })


                                                            }
                                                            else {
                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }



                                                        })
                                                    }
                                                    else {


                                                        console.log('Admin')
                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                            {


                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                Booking_ID: globalbookingid,
                                                                Boat_Name: req.body.Boat_Name,
                                                                Total_DaysBooked: Total_Count,
                                                                WeekDay_Count: WeekDay_Count,
                                                                WeekEnd_Count: WeekEnd_Count,
                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                title: req.body.title,
                                                                body: req.body.body,
                                                                start: req.body.start,
                                                                end: req.body.end,
                                                                start_NoTime: Start_final_withoutTime,
                                                                end_NoTime: End_final_withoutTime,
                                                                goingDuration: req.body.goingDuration,
                                                                comingDuration: req.body.comingDuration,
                                                                isAllDay: req.body.isAllDay,
                                                                category: req.body.category,
                                                                dueDateClass: req.body.dueDateClass,
                                                                location: req.body.location,
                                                                attendees: req.body.attendees,
                                                                recurrenceRule: req.body.recurrenceRule,
                                                                isPending: req.body.isPending,
                                                                isFocused: req.body.isFocused,
                                                                isVisible: req.body.isVisible,
                                                                isReadOnly: req.body.isReadOnly,
                                                                isPrivate: req.body.isPrivate,
                                                                color: req.body.color,
                                                                bgColor: req.body.bgColor,
                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                Check_Status: req.body.Check_Status,
                                                                commends: req.body.commends,
                                                                dragBgColor: req.body.dragBgColor,
                                                                borderColor: req.body.borderColor,
                                                                customStyle: req.body.customStyle,
                                                                raw: req.body.raw,
                                                                state: req.body.state,
                                                                User_RoleType: req.body.User_RoleType,
                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                Status: Module_status,
                                                                IsActive: req.body.IsActive,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now()),
                                                                start_CancelledDate: StartDate_Cancelled,
                                                                end_CancelledDate: end_date_old,
                                                                Booking_Type: bookingType,
                                                                cancaledDays

                                                            },

                                                            function (err, data) {
                                                                res.json({

                                                                    status: true,
                                                                    message: 'The admin booking has been successfully created'
                                                                })
                                                            })
                                                    }
                                                    //Add
                                                })

                                            })

                                        })
                                    }

                                    else//For Owner
                                    {

                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {

                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                    console.log(result.length, 'length')
                                                    var _Length = result.length;

                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                            if (Total_Count > Totalday_old) {
                                                                Schedule.findOne({ isBookingPending: false, _id: { $ne: scheduleid }, Boat_Id: Boat_id, IsActive: true, $or: [{ $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: Start_final_withoutTime_New } }, { end: { $gte: Start_final_withoutTime_New } }] }, { start_NoTime: Start_final_withoutTime_New }, { start_NoTime: End_final_withoutTime }] }).then(results => {
                                                                    if (results == null) {
                                                                          Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;

                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                                let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
    
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
    
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
    
    
                                                                                            if (isNextDaysError) return
    
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
    
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
    
                                                                                            }
                                                                                            CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial,scheduleid).then(async function (myflag) {
                                                                                                if (myflag == 0) {

                                                                                                              
                                                                                            if(isAvailableDay.type=="summer"){
                                                                                                var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                                if(SummerConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){

                                                                                                            objSpecial.map(function (objs) {
                                                                                                                var specialday = objs.special_date;
                                                                                                                var Specialdayid = objs._id;
                                                                                                                var Start_final = moment(specialday);
                                                                                                                var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                             
                                                                                                                var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                                if (addspecial == true) {
                                                                                                                    console.log('successs')
                                                                                                                }
                                                                                                                else {
                                                                                                                    console.log('fail')
                                                                                                                }
                                                                                                            })
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }

                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                                if(WinterConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count_edit, WeekEnd_Count_edit,exp_year,"winter");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){
                                                                                                            objSpecial.map(function (objs) {
                                                                                                                var specialday = objs.special_date;
                                                                                                                var Specialdayid = objs._id;
                                                                                                                var Start_final = moment(specialday);
                                                                                                                var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                                console.log(Start_final_withoutTime)
                                                                                                                var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                                if (addspecial == true) {
                                                                                                                    console.log('successs')
                                                                                                                }
                                                                                                                else {
                                                                                                                    console.log('fail')
                                                                                                                }
                                                                                                            })
    
                                                                                                            if (cancaledDays.length > 0) {
    
                                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                    CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                    CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                    CancelDaysbefore24.save(function (err, saved) {
                                                                                                                        if (err) {
                                                                                                                            return;
                                                                                                                        }
        
                                                                                                                    });
        
                                                                                                            }
    
                                                                                                        }
                                                                                                        
    
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }

                                                                
                                                                                         else if(isAvailableDay.type=="both"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
    
                                                                                            if(consecutiveCount>=Total_Count){
    
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
    
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
    
    
                                                                                                        });
    
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                    
                                                                                                       
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        

                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    


                                                                                                        }

                                                             

                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf =  AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
    
    
                                                                                                        }
                                                                                                        
                                                                                                        else{

                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }

                                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isAvailableDay.bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                                        if(updateSchedule){

                                                                                                            objSpecial.map(function (objs) {
                                                                                                                var specialday = objs.special_date;
                                                                                                                var Specialdayid = objs._id;
                                                                                                                var Start_final = moment(specialday);
                                                                                                                var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                                console.log(Start_final_withoutTime)
                                                                                                                var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                                if (addspecial == true) {
                                                                                                                    console.log('successs')
                                                                                                                }
                                                                                                                else {
                                                                                                                    console.log('fail')
                                                                                                                }
                                                                                                            })

                                                                                                        if (cancaledDays.length > 0) {

                                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                                    if (err) {
                                                                                                                        return;
                                                                                                                    }
    
                                                                                                                });
    
                                                                                                        }

                                                                                                    }
                                                                                                    

                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                            
    
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    

                                                                                         }

                                                                                                }else{

                                                                                                    res.json({
                                                                                                        status: true,
                                                                                                        message: 'You Have Already Booked Special Day'
                                                                                                    })

                                                                                                }
                                                                                            });
                            






                                                                            });
                                                                        })



                                                                    }
                                                                    else {
                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })
                                                                    }




                                                                })

                                                            }
                                                            else {

                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                        let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,req.body.start, req.body.end).catch((error) => {
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })


                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id, true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return


                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                          
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
          
                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){
          
                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{
          
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })
          
                                                                                    }

                                                                                    if(isAvailableDay.type=="summer"){
                                                                                        if(SummerConsecutiveDays >= Total_Count){

                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            });
                                                                                            if ((PendingSummerWeekdays >= WeekDay_Count || PendingSummerWeekEnddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end

                                                                                            {
                                                                                                CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial,scheduleid).then(async function (myflag) {

                                                                                                    if(myflag==0){
                                                                                                        objSpecial.map(function (objs) {
                                                                                                            var specialday = objs.special_date;
                                                                                                            var Specialdayid = objs._id;
                                                                                                            var Start_final = moment(specialday);
                                                                                                            var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                            console.log(Start_final_withoutTime)
                                                                                                            var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                            if (addspecial == true) {
                                                                                                                console.log('successs')
                                                                                                            }
                                                                                                            else {
                                                                                                                console.log('fail')
                                                                                                            }
                                                                                                        })

                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;

                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })

                                                                                                
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                });

                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    let stopExecutionboth = { stop: false };

                                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                        console.log(error)
                                                                                                        stopExecutionboth = error
                                                                                                    })
                
                                                                                                   
                                                                                                    if (stopExecutionboth.stop) {
                                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                    }
                                                                                                    if(isAvailableDayBoth.type == "both"){

                                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                        var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                        var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                        var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        
                                                                                                        var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                        var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                        var WinterStrtDate = new Date(winterstrat);
                                                                                                        WinterStrtDate.toISOString();

                                                                                                        var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                        var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                        var WinterEDate = new Date(winterend);
                                                                                                        WinterEDate.toISOString();

                                                                                                        var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                        var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                        var SummerStrtDate = new Date(summerstrat);
                                                                                                        SummerStrtDate.toISOString();

                                                                                                        var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                        var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                        var SummerEDate = new Date(summerend);
                                                                                                        SummerEDate.toISOString();

                                                                                   


                                                                                                        var winter_starrt_final = moment(req.body.start);
                                                                                                        var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime.toISOString());
                                                                                                        var winter_starrt_End = moment(req.body.end);
                                                                                                        var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                        //console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                        let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                        

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                        let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                        var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
                                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
                                                                                                              }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
          
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
          
                                                                                                              }                                                                
        
                                                                                                       }

                                                                                                    }
                                                                                                    else{

                                                                                                        let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                        if (No_Of_LOA > 0){

                                                                                                            if((UseremovedDates.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDates.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
        
                                                                                                       }

                                                                                                    }
                                                                                                   
                                                                                                    
                                                                                               
                                                                                               var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                console.log(error)
                                                                                                //console.log(TotalCancellation)
                                                                                            })

                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;

                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            console.log(datas)
                                                                                            var arr = [];

                                                                                            datas.forEach(function (item) {
                                                                                                Object.keys(item).forEach(function (key) {
                                                                                                    arr.push(item[key]);
                                                                                                    console.log(item[key]);
                                                                                                });
                                                                                            });
                                                                                            console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;

                                                                                            while (Loa_Length > 0) {


                                                                                                console.log(arr[index]);
                                                                                                let day = arr[index];

                                                                                                if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                    WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                }
                                                                                                else {
                                                                                                    WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                }

                                                                                                Loa_Length--;
                                                                                                index--;
                                                                                            }

                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {

                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                PartialCancellation_Status: 1,
                                                                                                Updated_time: moment(Date.now()),

                                                                                            },

                                                                                            function (err, data) {
                                                                                            })

                                                                                            if (GetCancellationNumber.No_PartialCancellation) {

                                                                                                console.log("insde check status 3 in back to back 0")

                                                                                               


                                                                                                let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                                //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")

                                                                                                //update allocated cancellation days

                                                                                                //reassigning


                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                    //console.log(result)
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                    let RemainingDays_wd = (SS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                    let RemainingDays_we = (SE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;

                                                                                                    console.log(SS_day, SE_day, 'summer ss and se days')

                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: RemainingDays_wd,
                                                                                                            Summer_WeekEndDays:RemainingDays_we,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
                                                                                                        {
                                                                                                            new: true
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('GetCancelaltionBlock')
                                                                                                            console.log('updated owner booking')
                                                                                                        });
                                                                                                })

                                                                                                //reassigning
                                                                                            }

                                                                                            if(isAvailableDayBoth.type == "both"){

                                                                                                var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));

                                                                                                var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);

                                                                                                if(GetCancellationNumber.No_PartialCancellation){
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
    
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                        if(GetCancellationNumber.No_PartialCancellation > cancaledDaysWinter.length){

                                                                                                            var winter_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysWinter.length;
                                                                                                            var summerLoa = cancaledDaysSummer.length-winter_Loa;
                                                                                                            
                                                                                                
                                                                                                        }else{
                                                                                                            var winter_Loa = cancaledDaysWinter.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                            var summerLoa = cancaledDaysSummer.length;   
                                                                                                        }

                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,summerLoa);
                                                                                                        var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(SummerStrtDate, SummerEDate,cancaledDaysSummer.length)
                                                                                                        let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                        let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                        if(GetCancellationNumber.No_PartialCancellation > cancaledDaysWinter.length){

                                                                                                            var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end, cancaledDaysWinter.length);
                                                                                                
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                              {
                                                                                                      
                                                                                                                  Boat_Id: Boat_id,
                                                                                                                  Owner_Id: Owner_id,
                                                                                                                  Winter_WeekDays: WS_day - UseremovedDatesWinter.outPutWeekday,
                                                                                                                  Winter_WeekEndDays: WE_day - UseremovedDatesWinter.outPutWeekend,
                                                                                                                  Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                  Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                  IsActive: true,
                                                                                                                  Current_Time: moment(Date.now()),
                                                                                                                  Updated_time: moment(Date.now())
                                                                                                              },
                                                                                                      
                                                                                                              function (err, data) {
                                                                                                      
                                                                                                                  console.log('Completed the summer part in summer section')
                                                                                                              });
                                                                                                
                                                                                                        }else{

                                                                                                            var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start,req.body.end,winter_Loa);
                                                                                                            var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(WinterStrtDate, WinterEDate,cancaledDaysWinter.length)
        
                                                                                                            let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDatesWinter.outPutWeekday;
                                                                                                            let RemaingWeekEnDys_winter =  (WE_day - reAssignedWeekendCount)+UseremovedDatesWinter.outPutWeekend;

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                {
                                                                                                        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                    Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                    Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                    Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
                                                                                                        
                                                                                                                function (err, data) {
                                                                                                        
                                                                                                                    console.log('Completed the summer and winter part')
                                                                                                                });

                                                                                                                let wintersuccess = await Do_approveCancel(req.body._id, winter_Loa, 1, winter_Loa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');

                                                                                                        }
                                                                                                               let summersuccess = await Do_approveCancel(req.body._id, summerLoa, 1, summerLoa, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
                                                                                                    });    

                                                                                                }

                                                                                                else{
                                                                                                    var winterLoa = cancaledDaysWinter.length;
                                                                                                    var summer_Loa = cancaledDaysSummer.length;
                                                                                                    var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,cancaledDaysWinter.length);
                                                                                                    var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);
                                                                                                    let wintersuccess = await Do_approveCancel(req.body._id, cancaledDaysWinter.length, 1, cancaledDaysWinter.length, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                    let summersuccess = await Do_approveCancel(req.body._id, cancaledDaysSummer.length, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
                                                                                                
                                                                                                }



                                                                                                ////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                
                                                                                               

                                                                                            }
                                                                                            else{

                                                                                                if (No_Of_LOA > 0) { console.log("Enterd in Auto approval LOA");

                                                                                                var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                //console.log( UseremovedDates.outPutWeekday,UseremovedDates.outPutWeekend,"----------------JJJ");

                                                                                                 DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);

                                                                                                               
                                                                                            }


                                                                                            }

                                                                                            
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: 0,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });
                                                                                             
                                                                                        
                                                                                        }else{

                                                                                            var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                              
                                                                                            })
                                                                                            var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: No_Of_LOA,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });

                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }

                                                                                              

                                                                                                if(isAvailableDayBoth.type== "both"){

                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                      
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the Summer part')
                                                                                                            });
                                                                                                    })


                                                                                                }else{

                                                                                                    var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
    
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                                  
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;
                                                                                                        console.log( WeekdayCancelled,SS_day,SS_day - WeekdayCancelled);
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year},
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Summer_WeekDays: SS_day - WeekdayCancelled,
                                                                                                                Summer_WeekEndDays: SE_day - WeekEndCancelled,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the Summer part')
                                                                                                            });
                                                                                                    })

                                                                                                }

                      
                                                                                          

                                                                                        }

                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                        if(updateSchedule){

                                                                                            if (cancaledDays.length > 0) {

                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                        if (err) {
                                                                                                            return;
                                                                                                        }

                                                                                                    });

                                                                                            }
                                                                                            let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                            let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                            if(MailSend){
      
                                                                                                res.json({
      
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
      
                                                                                            }
      
                                                                                            

                                                                                        }

                                                                                    }else{
                                                                                        res.json({

                                                                                            status: true,
                                                                                            message: 'You Have Already Booked Special Day'
                                                                                        })
                                                                                    }

                                                                                    });///checkspecial

                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }

                                                                                        }
                                                                                        else {
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                })

                                                                                            }
                                                                                    }

                                                                                    else if(isAvailableDay.type=="winter"){
                                                                                        if(WinterConsecutiveDays >= Total_Count){
                                                                                           
                                                                                            var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                            });
                                                                                            if ((PendingWinterWeekdays >= WeekDay_Count || PendingWinterWeekenddays >= WeekEnd_Count)||((GetCancellationNumber.No_PartialCancellation) >0))//count of weekday and week end
                                                                                            {
                                                                                                CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial,scheduleid).then(async function (myflag) {
                                                                                                    if(myflag==0){
                                                                                                    objSpecial.map(function (objs) {
                                                                                                        var specialday = objs.special_date;
                                                                                                        var Specialdayid = objs._id;
                                                                                                        var Start_final = moment(specialday);
                                                                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime)
                                                                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                        if (addspecial == true) {
                                                                                                            console.log('successs')
                                                                                                        }
                                                                                                        else {
                                                                                                            console.log('fail')
                                                                                                        }
                                                                                                    })
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });
                                                                                                const getyear = new Date(Start_final);
                                                                                                const Cancellationyear = getyear.getFullYear();
                                                                                                var Noofcancellation = Totalday_old - Total_Count;

                                                                                               
                                                                                                var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                                })

                                                                                                
                                                                                                var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                                });

                                                                                                if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                                    var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;
                                                                                                    let stopExecutionboth = { stop: false };

                                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                
                                                                                                        console.log(error)
                                                                                                        stopExecutionboth = error
                                                                                                    })
                
                                                                                                   
                                                                                                    if (stopExecutionboth.stop) {
                                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                    }

                                                                                                    if(isAvailableDayBoth.type == "both"){

                                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                        var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                        var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                        var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        
                                                                                                        var Winter_Sdateold = Winter_Sdate_old.split("/");
                                                                                                        var winterstrat =  Winter_Sdateold[2]+'-'+Winter_Sdateold[0]+'-'+Winter_Sdateold[1];
                                                                                                        var WinterStrtDate = new Date(winterstrat);
                                                                                                        WinterStrtDate.toISOString();

                                                                                                        var Winter_Edateold = Winter_Edate_old.split("/");
                                                                                                        var winterend = Winter_Edateold[2]+'-'+Winter_Edateold[0]+'-'+Winter_Edateold[1];
                                                                                                        var WinterEDate = new Date(winterend);
                                                                                                        WinterEDate.toISOString();

                                                                                                        var Summer_Sdateold = Summer_Sdate_old.split("/");
                                                                                                        var summerstrat =  Summer_Sdateold[2]+'-'+Summer_Sdateold[0]+'-'+Summer_Sdateold[1];
                                                                                                        var SummerStrtDate = new Date(summerstrat);
                                                                                                        SummerStrtDate.toISOString();

                                                                                                        var Summer_Edateold = Summer_Edate_old.split("/");
                                                                                                        var summerend = Summer_Edateold[2]+'-'+Summer_Edateold[0]+'-'+Summer_Edateold[1];
                                                                                                        var SummerEDate = new Date(summerend);
                                                                                                        SummerEDate.toISOString();

                                                                                   


                                                                                                        var winter_starrt_final = moment(req.body.start);
                                                                                                        var Start_final_withoutTime = winter_starrt_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime.toISOString());
                                                                                                        var winter_starrt_End = moment(req.body.end);
                                                                                                        var End_final_withoutTime = winter_starrt_End.startOf('day');
                                                                                                        //console.log(WinterStrtDate,WinterEDate,Start_final_withoutTime.toISOString(),End_final_withoutTime.toISOString(),"----------------------------DAAA");
                                                                                                        let cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                        

                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, Start_final_withoutTime.toISOString(), End_final_withoutTime.toISOString(),cancaledDaysWinter.length);
                                                                                                        let cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);
                                                                                                        var User_RemovedDatesSUmmer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start, req.body.end,cancaledDaysSummer.length);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDatesWinter.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDatesWinter.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
                                                                                                            if((User_RemovedDatesSUmmer.outPutWeekday>0)&&(PendingSummerWeekdays==0)){
        
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
                                                                                                              }else if((User_RemovedDatesSUmmer.outPutWeekend>0)&&(PendingSummerWeekEnddays==0)){
          
                                                                                                                return res.json({
                                                                                                                    status: false,
                                                                                                                    message: "You don't have enough days for LOA"
                                                                                                                }) 
          
          
                                                                                                              }                                                                
        
                                                                                                       }

                                                                                                    }else{

                                                                                                        let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                  
                                                                                                        if (No_Of_LOA > 0){
        
                                                                                                            if((UseremovedDates.outPutWeekday>0)&&(PendingWinterWeekdays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
                                                                                                            }else if((UseremovedDates.outPutWeekend>0)&&(PendingWinterWeekenddays==0)){
        
                                                                                                              return res.json({
                                                                                                                  status: false,
                                                                                                                  message: "You don't have enough days for LOA"
                                                                                                              }) 
        
        
                                                                                                            }
        
                                                                                                       }

                                                                                                    }
    


           
                                                                                               var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                                console.log(error)
                                                                                                //console.log(TotalCancellation)
                                                                                            })

                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;

                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            //console.log(datas)
                                                                                            var arr = [];

                                                                                            datas.forEach(function (item) {
                                                                                                Object.keys(item).forEach(function (key) {
                                                                                                    arr.push(item[key]);
                                                                                                    console.log(item[key]);
                                                                                                });
                                                                                            });
                                                                                            //console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;

                                                                                            while (Loa_Length > 0) {


                                                                                                console.log(arr[index]);
                                                                                                let day = arr[index];

                                                                                                if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                                    WeekDay_Count_edit = WeekDay_Count_edit + 1;

                                                                                                }
                                                                                                else {
                                                                                                    WeekEnd_Count_edit = WeekEnd_Count_edit + 1;

                                                                                                }

                                                                                                Loa_Length--;
                                                                                                index--;
                                                                                            }

                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;

                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {

                                                                                                WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                                WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                                Total_Edit_Loa: No_Of_LOA,
                                                                                                PartialCancellation_Status: 1,
                                                                                                Updated_time: moment(Date.now()),

                                                                                            },

                                                                                            function (err, data) {
                                                                                            })
                                                                                           

                                                                                            if (GetCancellationNumber.No_PartialCancellation) {

                                                                                                console.log("insde check status 3 in back to back 0 Winter")

                                                                                               // console.log(Start_final, "Start_final", End_final, "End_final");


                                                                                               
                                                                                                //update allocated cancellation days

                                                                                                //reassigning
                                                                                                
                                                                                                let UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);

                                                                                                
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                   
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;


                                                                                                    if(isAvailableDayBoth.type == "winter"){

                                                                                                       

                                                                                                        let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)

                                                                                                        console.log(reAssignedWeekDaysCount,"reAssignedWeekDaysCount");
                                                                                                        console.log(reAssignedWeekendCount,"reAssignedWeekendCount");
                                                                                                        console.log(Noofcancellation,"Noofcancellation");
        

                                                                                                        let RemaingWeekDys =  (WS_day - reAssignedWeekDaysCount)+UseremovedDates.outPutWeekday;
                                                                                                        let RemaingWeekEnDys =  (WE_day - reAssignedWeekendCount)+UseremovedDates.outPutWeekend;
    
                                                                                                        console.log("_____________________REE",RemaingWeekDys);
                                                                                                        console.log("_____________________WWW",RemaingWeekEnDys);
                                                                                                        //console.log(SS_day, SE_day, 'summer ss and se days')
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: RemaingWeekDys,
                                                                                                                Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
                                                                                                            {
                                                                                                                new: true
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                //console.log('GetCancelaltionBlock')
                                                                                                                //console.log('updated owner booking')
                                                                                                            });

                                                                                                    }

                                                                                                    
                                                                                                   
                                                                                                })

                                                                                                //reassigning
                                                                                            }

                                                                                            

                                                                                                if(isAvailableDayBoth.type == "both"){

                                                                                                    var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
    
                                                                                                    var cancaledDaysWinter = getAllCanceledDates(WinterStrtDate, WinterEDate, req.body.start, req.body.end);
                                                                                                    var cancaledDaysSummer = getAllCanceledDates(SummerStrtDate, SummerEDate, req.body.start, req.body.end);

                                                                                                    if (GetCancellationNumber.No_PartialCancellation)
                                                                                                    {
                                                                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(async(result) => {
                                                                                                   
                                                                                                            var WS_day = result.Winter_WeekDays;
                                                                                                            var WE_day = result.Winter_WeekEndDays;
                                                                                                            var SS_day = result.Summer_WeekDays;
                                                                                                            var SE_day = result.Summer_WeekEndDays;
                                                                                                        if(GetCancellationNumber.No_PartialCancellation > cancaledDaysSummer.length){

                                                                                                            var summer_Loa = GetCancellationNumber.No_PartialCancellation-cancaledDaysSummer.length;
                                                                                                            var winterLoa = cancaledDaysWinter.length-summer_Loa;
                                                                                                            

                                                                                                        }else{
                                                                                                            var summer_Loa = cancaledDaysSummer.length-GetCancellationNumber.No_PartialCancellation;
                                                                                                            var winterLoa = cancaledDaysWinter.length;   
                                                                                                        }
                                                                                                        
                                                                                                        
                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                       
                                                                                                        var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(WinterStrtDate, WinterEDate,cancaledDaysWinter.length)
                                                                                                        
                                                                                                        let RemaingWeekDys_winter =  (WS_day - reAssignedWeekDaysCount)+UseremovedDatesWinter.outPutWeekday;
                                                                                                        let RemaingWeekEnDys_winter =  (WE_day - reAssignedWeekendCount)+UseremovedDatesWinter.outPutWeekend;
                                                                                                       
                                                                                                        if(GetCancellationNumber.No_PartialCancellation > cancaledDaysSummer.length){

                                                                                                            var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);

                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                             {
                                                                                                     
                                                                                                                 Boat_Id: Boat_id,
                                                                                                                 Owner_Id: Owner_id,
                                                                                                                 Summer_WeekDays: SS_day - UseremovedDatesSummer.outPutWeekday,
                                                                                                                 Summer_WeekEndDays: SE_day - UseremovedDatesSummer.outPutWeekend,
                                                                                                                 Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                 Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                 IsActive: true,
                                                                                                                 Current_Time: moment(Date.now()),
                                                                                                                 Updated_time: moment(Date.now())
                                                                                                             },
                                                                                                     
                                                                                                             function (err, data) {
                                                                                                     
                                                                                                                 console.log('Completed the summer part')
                                                                                                             });

                                                                                                        }else{

                                                                                                            var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end,summer_Loa);

                                                                                                            var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(SummerStrtDate, SummerEDate,cancaledDaysSummer.length)
                                                                                                        
                                                                                                            let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+UseremovedDatesSummer.outPutWeekday;
                                                                                                            let RemaingWeekEnDys_summer =  (SE_day - reAssignedWeekendCount)+UseremovedDatesSummer.outPutWeekend;
                                                                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year  },
                                                                                                                {
                                                                                                        
                                                                                                                    Boat_Id: Boat_id,
                                                                                                                    Owner_Id: Owner_id,
                                                                                                                    Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                                    Summer_WeekEndDays:RemaingWeekEnDys_summer,
                                                                                                                    Winter_WeekDays: RemaingWeekDys_winter,
                                                                                                                    Winter_WeekEndDays:RemaingWeekEnDys_winter,
                                                                                                                    IsActive: true,
                                                                                                                    Current_Time: moment(Date.now()),
                                                                                                                    Updated_time: moment(Date.now())
                                                                                                                },
                                                                                                        
                                                                                                                function (err, data) {
                                                                                                        
                                                                                                                    console.log('Completed the summer and winter part')
                                                                                                                });
                                                                                                           
                                                                                                                let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');

                                                                                                        }

                                                                                                                 

                                                                                                    

                                                                                                        let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                        
                                                                                                        
                                                                                           
                                                                                                        });

                                                                                                       
                                                                                                    }
                                                                                                    else{

                                                                                                        var winterLoa = cancaledDaysWinter.length;
                                                                                                        var summer_Loa = cancaledDaysSummer.length;
                                                                                                        var UseremovedDatesWinter = getWeekDaysCancel(WinterStrtDate, WinterEDate, req.body.start, req.body.end,winterLoa);
                                                                                                        var UseremovedDatesSummer = getWeekDaysCancel(SummerStrtDate, SummerEDate, req.body.start,req.body.end, cancaledDaysSummer.length);
                                                                                                        if(winterLoa>0){

                                                                                                        

                                                                                                            let wintersuccess = await Do_approveCancel(req.body._id, winterLoa, 1, winterLoa, UseremovedDatesWinter.outPutWeekday, UseremovedDatesWinter.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'winter');
                                                                                                           
     
                                                                                                         }
         
                                                                                                        
         
                                                                                                        
     
                                                                                                         if(summer_Loa>0) {
     
                                                                                                             let summersuccess = await Do_approveCancel(req.body._id, summer_Loa, 1, cancaledDaysSummer.length, UseremovedDatesSummer.outPutWeekday, UseremovedDatesSummer.outPutWeekend,req.body.start, req.body.end,MonthBookingStatus,anni_month,exp_year,'summer');
     
                                                                                                         }     

                                                                                                    }

                                                                                               
    
                                                                                                    
    
                                                                                                }else{
    
                                                                                                    var UseremovedDates = getWeekDaysCancel(Startdate_old, Enddate_old, req.body.start, req.body.end,No_Of_LOA);
    
                                                                                                    if (No_Of_LOA > 0) 
    
                                                                                                     DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, UseremovedDates.outPutWeekday, UseremovedDates.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month);
    
                                                                                                                   
                                                                                             }

                                                                                            
                                                                                            
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: 0,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });
                                                                                             
                                                                                        
                                                                                        }else{

                                                                                            var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                              
                                                                                            })
                                                                                            var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                            manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                                {
                                                                                                    No_PartialCancellation: No_Of_LOA,
                                                                                                    Current_Time: moment(Date.now()),
                                                                                                    Updated_time: moment(Date.now())
                                                                                                },

                                                                                                function (err, data) {

                                                                                                });

                                                                                                let stopExecutionboth = { stop: false };

                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
            
                                                                                               
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }

                                                                                              

                                                                                                if(isAvailableDayBoth.type== "both"){

                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-WeekDay_Count;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-WeekEnd_Count;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
                                                                                                        var SS_day = result.Summer_WeekDays;
                                                                                                        var SE_day = result.Summer_WeekEndDays;

                                                                                                      
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                                Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                                Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the Summer part')
                                                                                                            });
                                                                                                    })


                                                                                                }else{

                                                                                                    var WeekdayCancelled = Weekdays_prev - WeekDay_Count;
                                                                                                    var WeekEndCancelled = WeekEndDays_prev - WeekEnd_Count;
                                                                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                                                                              
                                                                                                        var WS_day = result.Winter_WeekDays;
                                                                                                        var WE_day = result.Winter_WeekEndDays;
    
                                                                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                                                            {
    
                                                                                                                Boat_Id: Boat_id,
                                                                                                                Owner_Id: Owner_id,
                                                                                                                Winter_WeekDays: WS_day - WeekdayCancelled,
                                                                                                                Winter_WeekEndDays: WE_day - WeekEndCancelled,
                                                                                                                IsActive: true,
                                                                                                                Current_Time: moment(Date.now()),
                                                                                                                Updated_time: moment(Date.now())
                                                                                                            },
    
                                                                                                            function (err, data) {
    
                                                                                                                console.log('Completed the winter part')
                                                                                                            });
                                                                                                    })

                                                                                                }


                                                                                                

               
                                                                                          

                                                                                        }

                                                                                        let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                        if(updateSchedule){

                                                                                            if (cancaledDays.length > 0) {

                                                                                                var CancelDaysbefore24 = new EditCancelDays();
                                                                                                CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                                CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                                CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                                CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                                CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                                CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                                CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                                CancelDaysbefore24.save(function (err, saved) {
                                                                                                        if (err) {
                                                                                                            return;
                                                                                                        }

                                                                                                    });

                                                                                            }
                                                                                            let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                            let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                                                            if(MailSend){
      
                                                                                                res.json({
      
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
      
                                                                                            }
      
                                                                                            

                                                                                        }

                                                                                         }else{
                                                                                            res.json({

                                                                                                status: true,
                                                                                                message: 'You Have Already Booked Special Day'
                                                                                            })
                                                                                        }

                                                                                        });


                                                                                

                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }

                                                                                      

                                                                                        }
                                                                                        else {
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The maximum duration for bookings has not been selected. Please go to settings and allocate this setting before making a booking'
                                                                                                })

                                                                                            }

                                                                                    }

                                                                                    else if(isAvailableDay.type=="both"){

                                                                                        console.log("Entered in Backto back id 0 Both2");
                                                                                        
                                                                                        let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                        if(isIncludedInSummer)
                                                                                        var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                        else
                                                                                        var TotalConcecutiveDays = WinterConsecutiveDays
                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            
                                                                                   var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                              var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                              var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                              var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                              if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt))
                                                                              {
                                                                                CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial,scheduleid).then(async function (myflag) {
                                                                                    if(myflag==0){
                                                                                        objSpecial.map(function (objs) {
                                                                                            var specialday = objs.special_date;
                                                                                            var Specialdayid = objs._id;
                                                                                            var Start_final = moment(specialday);
                                                                                            var Start_final_withoutTime = Start_final.startOf('day');
                                                                                            console.log(Start_final_withoutTime)
                                                                                            var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                            if (addspecial == true) {
                                                                                                console.log('successs')
                                                                                            }
                                                                                            else {
                                                                                                console.log('fail')
                                                                                            }
                                                                                        })

                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                {

                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                
                                                                                },
                                                                                { new: true },
                                                                                function (err, data) {
                                                                                
                                                                                
                                                                                });
                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                    {

                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                    },
                                                                                    { new: true },
                                                                                    function (err, data) {


                                                                                    });

                                                                                    var GetCancellationNumber = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true }).catch((error) => {
                                                                                    });

                                                                                    const getyear = new Date(Start_final);
                                                                                    const Cancellationyear = getyear.getFullYear();
                                                                                    var Noofcancellation = Totalday_old - Total_Count;

                                                                                    var GetAllocatedNumber = await partialCancel.findOne({ IsActive: true }).catch((error) => {
                                                                                    })

                                                                                    
                                                                                    var GetYearOfCancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => {
                                                                                    });

                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                    
                                              
                                                                                    if (Noofcancellation > GetCancellationNumber.No_PartialCancellation){
                                                                                        
                                                                                        var No_Of_LOA = Noofcancellation - GetCancellationNumber.No_PartialCancellation;

                                                                                        let stopExecutionboth = { stop: false };

                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                    
                                                                                            console.log(error)
                                                                                            stopExecutionboth = error
                                                                                        })
    
                                                                                       
                                                                                        if (stopExecutionboth.stop) {
                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                        }

                                                                                        var Summer_Sdate_old = isAvailableDayBoth.summer_Arr[0];
                                                                                    var Summer_Edate_old = isAvailableDayBoth.summer_Arr[(isAvailableDayBoth.summer_Arr.length)-1]
                                                                                    var Winter_Sdate_old = isAvailableDayBoth.winter_Arr[0];
                                                                                    var Winter_Edate_old = isAvailableDayBoth.winter_Arr[(isAvailableDayBoth.winter_Arr.length)-1]
                                                                                     var summerflag =0;
                                                                                     var winterflag =0;
                                                                                     
                                                                                     
                                                                                        if((((isAvailableDayBoth.summer_Arr).length))!=(((isAvailableDay.summer_Arr).legth))){
                                                                                            var User_RemovedDatesSUmmer = getWeekDaysCancel(Summer_Sdate_old, Summer_Edate_old, Summer_Sdate, Summer_Edate,No_Of_LOA);
                                                                                            summerflag=1;
                                                                                        }
                                                                                        
                                                                                        if((((isAvailableDayBoth.winter_Arr).length))!=(((isAvailableDay.winter_Arr).length))){

                                                                                            var User_RemovedDatesWinter = getWeekDaysCancel(Winter_Sdate_old, Winter_Edate_old, Winter_Sdate, Winter_Edate,No_Of_LOA);
                                                                                            winterflag=1;
                                                                                        }
                                                                                        

                                                                                        if((No_Of_LOA>0)){
                                                                                            if(summerflag ==1){

                                                                                                if((User_RemovedDatesSUmmer.outPutWeekday>0) &&(PendingSummerWeekdays==0)){
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
                                                                                                }
                                                                                                else if((User_RemovedDatesSUmmer.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
        
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
        
        
                                                                                                }

                                                                                            }

                                                                                            else if(winterflag==1){

                                                                                                 if((User_RemovedDatesWinter.outPutWeekday>0) &&(PendingSummerWeekdays==0)&&(winterflag==1)){
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
                                                                                                }
                                                                                                 if((User_RemovedDatesWinter.outPutWeekend>0) &&(PendingSummerWeekEnddays==0)){
        
                                                                                                    return res.json({
                                                                                                        status: false,
                                                                                                        message: "You don't have enough days for LOA"
                                                                                                    }) 
        
        
                                                                                                }

                                                                                            }
                                                                                            
    
                                                                                            
                                                                                        }
                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                            console.log(error)
                                                                                            //console.log(TotalCancellation)
                                                                                            })
                                                                                            
                                                                                            var obj = Object();
                                                                                            obj.start = Start_final;
                                                                                            obj.end = End_final;
                                                                                            
                                                                                            var datas = getDaysInMonth_Sheduler(obj);
                                                                                            console.log(datas)
                                                                                            var arr = [];
                                                                                            
                                                                                            datas.forEach(function (item) {
                                                                                            Object.keys(item).forEach(function (key) {
                                                                                              arr.push(item[key]);
                                                                                              console.log(item[key]);
                                                                                            });
                                                                                            });
                                                                                            console.log(arr)
                                                                                            var index = arr.length - 1;
                                                                                            var Loa_Length = No_Of_LOA;
                                                                                            var WeekDay_Count_edit = 0;
                                                                                            var WeekEnd_Count_edit = 0;
                                                                                            
                                                                                            while (Loa_Length > 0) {
                                                                                            
                                                                                            
                                                                                            console.log(arr[index]);
                                                                                            let day = arr[index];
                                                                                            
                                                                                            if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                                                                              WeekDay_Count_edit = WeekDay_Count_edit + 1;
                                                                                            
                                                                                            }
                                                                                            else {
                                                                                              WeekEnd_Count_edit = WeekEnd_Count_edit + 1;
                                                                                            
                                                                                            }
                                                                                            
                                                                                            Loa_Length--;
                                                                                            index--;
                                                                                            }
                                                                                            
                                                                                            var WeekDay_Count_edits = WeekDay_Count_edit;
                                                                                            var WeekEnd_Count_edits = WeekEnd_Count_edit;
                                                                                            
                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                            {
                                                                                            
                                                                                            WeekDay_Count_Edit: WeekDay_Count_edits,
                                                                                            WeekEnd_Count_Edit: WeekEnd_Count_edits,
                                                                                            Total_Edit_Loa: No_Of_LOA,
                                                                                            PartialCancellation_Status: 1,
                                                                                            Updated_time: moment(Date.now()),
                                                                                            
                                                                                            },
                                                                                            
                                                                                            function (err, data) {
                                                                                            })

                                                                                            if (GetCancellationNumber.No_PartialCancellation) {

                                                                                                console.log("insde check status 3 in back to back 0 Both")

                                                                                                
                                                                                               
                                                                                                
                                                                                               if(isAvailableDayBoth.type == 'both'){

                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                
                                                                                                var WeekDay_Count_edit_summer =  summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt-winterWeekdayWeekend.weekdaycnt            ;
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                          
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;

                                                                                                  
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {

                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                            Summer_WeekDays:SS_day-WeekDay_Count_edit_summer,
                                                                                                            Summer_WeekEndDays:SE_day-WeekEnd_Count_edit_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },

                                                                                                        function (err, data) {

                                                                                                            console.log('Completed the Summer part')
                                                                                                        });
                                                                                                })


                                                                                                  

                                                                                               }
                                                                                                
                                                                                                
                                                                                                let { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_final, end_date_old, Noofcancellation)
                                                                                                
                                                                                                //console.log(reAssignedWeekDaysCount, reAssignedWeekendCount, "reAssignedWeekDaysCount", "reAssignedWeekendCount")
                                                                                                
                                                                                                //update allocated cancellation days
                                                                                                
                                                                                                //reassigning

                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                 
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                  
                                                                                                    let RemaingWeekDys_summer =  (SS_day - reAssignedWeekDaysCount)+User_RemovedDatesSUmmer.outPutWeekday;
                                                                                                    let RemaingWeekEnDys_sumer =  (SE_day - reAssignedWeekendCount)+User_RemovedDatesSUmmer.outPutWeekend;

                                                                                                    let RemaingWeekDys =  (WS_day - reAssignedWeekDaysCount)+User_RemovedDatesWinter.outPutWeekday;
                                                                                                    let RemaingWeekEnDys =  (WE_day - reAssignedWeekendCount)+User_RemovedDatesWinter.outPutWeekend;
                                                                                                    //console.log(SS_day, SE_day, 'summer ss and se days')
                                                                                                  
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {
                                                                                                  
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: RemaingWeekDys_summer,
                                                                                                            Summer_WeekEndDays:RemaingWeekEnDys_sumer,
                                                                                                            Winter_WeekDays: RemaingWeekDys,
                                                                                                            Winter_WeekEndDays:RemaingWeekEnDys,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
                                                                                                        {
                                                                                                            new: true
                                                                                                        },
                                                                                                  
                                                                                                        function (err, data) {
                                                                                                  
                                                                                                            //console.log('GetCancelaltionBlock')
                                                                                                            //console.log('updated owner booking')
                                                                                                        });
                                                                                                  })
                                                                                                
                                                                                  
                                                                                                
                                                                                                //reassigning
                                                                                                }

                                                                                        if (No_Of_LOA > 0) { console.log("Enterd in Auto approval LOA Both");
                                                                                        console.log(User_RemovedDatesSUmmer,"-------------------User_RemovedDatesSUmmer");
                                                                                       
                                                                                        if(summerflag==1)
                                                                                        
                                                                                        DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesSUmmer.outPutWeekday, User_RemovedDatesSUmmer.outPutWeekend,req.body.start,req.body.end,MonthBookingStatus,exp_year,anni_month)
                                                                                        if(winterflag ==1)
                                                                                        DoApproveCancellation(req.body._id, No_Of_LOA, 1, No_Of_LOA, User_RemovedDatesWinter.outPutWeekday, User_RemovedDatesWinter.outPutWeekend, req.body.start, req.body.end,MonthBookingStatus,exp_year,anni_month)
                                                                                    }

                                                                                    manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                        {
                                                                                          No_PartialCancellation: 0,
                                                                                          Current_Time: moment(Date.now()),
                                                                                          Updated_time: moment(Date.now())
                                                                                        },
                                                                                        
                                                                                        function (err, data) {
                                                                                        
                                                                                        });
                                                                                            

                                                                                    }
                                                                                    else{

                                                                                        var TotalCancellation = await TotalCancellations(Boat_id, Owner_id, Noofcancellation, Cancellationyear).catch((error) => {
                                                                                          
                                                                                        })
                                                                                        var No_Of_LOA = GetCancellationNumber.No_PartialCancellation - Noofcancellation;
                                                                                        manageBoat.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, IsActive: true },
                                                                                            {
                                                                                                No_PartialCancellation: No_Of_LOA,
                                                                                                Current_Time: moment(Date.now()),
                                                                                                Updated_time: moment(Date.now())
                                                                                            },

                                                                                            function (err, data) {

                                                                                            });

                                                                                            let stopExecutionboth = { stop: false }
                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                
                                                                                                console.log(error)
                                                                                                stopExecutionboth = error
                                                                                            })
        
                                                                                           
                                                                                            if (stopExecutionboth.stop) {
                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                            }

                                                                                            

                                                                                            if(isAvailableDayBoth.type=="summer"){
                                                                                                var WeekdayCancelled_summer = Weekdays_prev - summerWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEndCancelled_summer = WeekEndDays_prev - summerWeekdayWeekend.weekendCnt;
    
                                                                                                
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;
    
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {
    
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Summer_WeekDays: SS_day - WeekdayCancelled_summer,
                                                                                                            Summer_WeekEndDays: SE_day - WeekEndCancelled_summer,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                            console.log('Completed the winter part')
                                                                                                        });
                                                                                                })

                                                                                              
                                                                                            }else if(isAvailableDayBoth.type=="winter"){

                                                                                                var WeekdayCancelled_winter = Weekdays_prev - winterWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEndCancelled_winter = WeekEndDays_prev - winterWeekdayWeekend.weekendCnt;
    
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
    
                                                                                                    OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                        {
    
                                                                                                            Boat_Id: Boat_id,
                                                                                                            Owner_Id: Owner_id,
                                                                                                            Winter_WeekDays: WS_day - WeekdayCancelled_winter,
                                                                                                            Winter_WeekEndDays: WE_day - WeekEndCancelled_winter,
                                                                                                            IsActive: true,
                                                                                                            Current_Time: moment(Date.now()),
                                                                                                            Updated_time: moment(Date.now())
                                                                                                        },
    
                                                                                                        function (err, data) {
    
                                                                                                            console.log('Completed the winter part')
                                                                                                        });
                                                                                                })

                                                                                               

                                                                                            }else if(isAvailableDayBoth.type=="both"){
                                                                                                
                                                                                                var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                var WeekDay_Count_edit_summer = summerWeekdayWeekendPrev.weekdaycnt-summerWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_summer =  summerWeekdayWeekendPrev.weekendCnt-summerWeekdayWeekend.weekendCnt;
                                                                                                var WeekDay_Count_edit_winter =  winterWeekdayWeekendPrev.weekdaycnt-winterWeekdayWeekend.weekdaycnt;
                                                                                                var WeekEnd_Count_edit_winter =  winterWeekdayWeekendPrev.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 }).then(result => {
                                                                                                              
                                                                                                    var WS_day = result.Winter_WeekDays;
                                                                                                    var WE_day = result.Winter_WeekEndDays;
                                                                                                    var SS_day = result.Summer_WeekDays;
                                                                                                    var SE_day = result.Summer_WeekEndDays;

    
                                                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,dispStatus:1 },
                                                                                                    {

                                                                                                        Boat_Id: Boat_id,
                                                                                                        Owner_Id: Owner_id,
                                                                                                        Winter_WeekDays: WS_day - WeekDay_Count_edit_winter,
                                                                                                        Winter_WeekEndDays: WE_day - WeekEnd_Count_edit_winter,
                                                                                                        Summer_WeekDays: SS_day - WeekDay_Count_edit_summer,
                                                                                                        Summer_WeekEndDays: SE_day - WeekEnd_Count_edit_summer,
                                                                                                        IsActive: true,
                                                                                                        Current_Time: moment(Date.now()),
                                                                                                        Updated_time: moment(Date.now())
                                                                                                    },

                                                                                                    function (err, data) {

                                                                                                        console.log('Completed both part')
                                                                                                    });
                                                                                                });

  
                                                     



                                                                                            }


                                    
                                                                                      

                                                                                    }

                                                                                    
              
                                                                                    let updateSchedule = await UpdateSchedule(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays);
                                                                                    if(updateSchedule){
                                                                                        if (cancaledDays.length > 0) {

                                                                                            var CancelDaysbefore24 = new EditCancelDays();
                                                                                            CancelDaysbefore24.Scheduleid = scheduleid;
                                                                                            CancelDaysbefore24.Boat_Id = req.body.Boat_Id;
                                                                                            CancelDaysbefore24.Owner_Id = req.body.User_Id;
                                                                                            CancelDaysbefore24.cancaledDays = cancaledDays;
                                                                                            CancelDaysbefore24.User_RoleType = req.body.User_RoleType,
                                                                                            CancelDaysbefore24.cancelexpiretime = expireCancel,
                                                                                            CancelDaysbefore24.cancelexpiretimeStr = cancelExpireStr,
                                                                                            CancelDaysbefore24.save(function (err, saved) {
                                                                                                    if (err) {
                                                                                                        return;
                                                                                                    }

                                                                                                });
                                                                                        
                                                                                    }
                                                                                    let update_SpecialData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, Scheduleid:scheduleid,IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                                                                                    let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);
                                                                                    if(MailSend){

                                                                                        res.json({
                                                                                
                                                                                            status: true,
                                                                                            message: 'The booking has been successfully Updated'
                                                                                        })
                                                                                
                                                                                    }
                                                                                }

                                                                            }else{

                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'You Have Already Booked Special Day'
                                                                                })
                                                                            }



                                                                            });


                                                                              }else{
                                                                                  res.json({
                                                                                      status: false,
                                                                                      message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                  })

                                                                              }

                                                                     
                                                                              
                                                                              

                                                                            }
                                                                            else{

                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                })

                                                                            }
                                                                        }      



                                                                       

                                                                  


                                                                    });
                                                                })

                                                            }
                                                        })



                                                    });//else inside function owner




                                                });
                                            })
                                    }



                                }

                                //special Day


                            }
                            else {
                                res.json({
                                    status: false,
                                    message: 'Cannot Edit Previous Day Bookings'
                                })
                            }
                        }
                        else {

                            res.json({
                                status: false,
                                message: 'Boat Selected is not Active'
                            })

                        }

                    });


            })
        }
        if (Back_to_Back_id == "1") {
            console.log(Back_to_Back_id, 'bcktobck1')
            Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(BookingResponse => {

                var globalbookingid = BookingResponse.Booking_ID;
                var Startdate_old = BookingResponse.start;
                var Enddate_old   = BookingResponse.end;
                var start_Date = Startdate_old;
               
                var Start_final = moment(start_Date);
                
                var Start_final_withoutTime = Start_final.startOf('day');
                var Totalday_old = BookingResponse.Total_DaysBooked;
                var Total_Count = Totalday_old + Total_Count_New;
                var end_Date = end_Date_New;
                var End_final = moment(end_Date);
                var End_final_withoutTime = End_final.startOf('day');
                const Getmonth = new Date(Startdate_old);
                var Weekdays_prev = BookingResponse.WeekDay_Count;
                var WeekEndDays_prev = BookingResponse.WeekEnd_Count;
                var LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });

                

                //let cancaledDays = getAllCanceledDates(Startdate_old, BookingResponse.end, req.body.start, req.body.end);



                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                    .then(boatDetails => {

                        if (boatDetails.Boat_Status == "1")//check whether boat is Active or not
                        {

                            
                            //between Launch And PreLuanch
                            if (dif >= 0) {

                                if (check_Status == "1" && specialDayCheck == 0) {

                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then(Checkresult => {
                                                console.log(Checkresult.length, 'length')
                                                // var _LengthCheck=Checkresult.length;                           

                                                console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')
                                                PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then(bookingDays => {

                                                    var b_days = bookingDays.Booking_Days;
                                                    console.log(b_days)
                                                    console.log(Total_Count)
                                                    if (Total_Count <= b_days) {
                                                        console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')


                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            // var _Length=result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                console.log('hi1')
                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                    console.log('hi2')
                                                                    let allDaysBookedBackOneCheckOne = getDaysBetweenDates(start_Date_New, end_Date_New);
                                                                    let arrayofBookOneCheckOne = [];
                                                                    allDaysBookedBackOneCheckOne.map((date) => arrayofBookOneCheckOne.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));
                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookOneCheckOne, User_Id: { $nin: mongoose.Types.ObjectId(Owner_id) } }).then(results =>
                                                                    //Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                                    {
                                                                        //console.log(Start_final_withoutTime);
                                                                        //console.log(End_final_withoutTime);
                                                                        if (results == null) {
                                                                            console.log('hi3')

                                                                            //Add 
                                                                            console.log('Admin')
                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                {

                                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                    Booking_ID: globalbookingid,
                                                                                    Boat_Name: req.body.Boat_Name,
                                                                                    Total_DaysBooked: Total_Count,
                                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                    title: req.body.title,
                                                                                    body: req.body.body,
                                                                                    start: Startdate_old,
                                                                                    end: req.body.end,
                                                                                    start_NoTime: Start_final_withoutTime,
                                                                                    end_NoTime: End_final_withoutTime,
                                                                                    goingDuration: req.body.goingDuration,
                                                                                    comingDuration: req.body.comingDuration,
                                                                                    isAllDay: req.body.isAllDay,
                                                                                    category: req.body.category,
                                                                                    dueDateClass: req.body.dueDateClass,
                                                                                    location: req.body.location,
                                                                                    attendees: req.body.attendees,
                                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                                    isPending: req.body.isPending,
                                                                                    isFocused: req.body.isFocused,
                                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                    isVisible: req.body.isVisible,
                                                                                    isReadOnly: req.body.isReadOnly,
                                                                                    isPrivate: req.body.isPrivate,
                                                                                    color: req.body.color,
                                                                                    bgColor: req.body.bgColor,
                                                                                    dragBgColor: req.body.dragBgColor,
                                                                                    borderColor: req.body.borderColor,
                                                                                    customStyle: req.body.customStyle,
                                                                                    raw: req.body.raw,
                                                                                    state: req.body.state,
                                                                                    Check_Status: req.body.Check_Status,
                                                                                    commends: req.body.commends,
                                                                                    Check_Month: LaunchPreMonth,
                                                                                    User_RoleType: req.body.User_RoleType,
                                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                    Status: Module_status,
                                                                                    IsActive: req.body.IsActive,
                                                                                    Current_Time: moment(Date.now()),
                                                                                    Updated_time: moment(Date.now())

                                                                                },

                                                                                async function (err, data) {

                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id, IsActive: true,Scheduleid:scheduleid }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));




                                                                                    console.log(data, 'successs')

                                                                                    //mail

                                                                                    const emailState = 'Successfully Edited.';
                                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited </p>`;
                                                                                    const emailContentAdmin = `Dear Adminsistrator,<p> The owner ${OwnerDetails.First_Name} has been successfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                                    const emailDetailName = 'Booking Details'
                                                                                    const emailDetails = [
                                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                                    ];
                                                                                    const emailNameAndLink = {
                                                                                        name: 'Login Link',
                                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                    }

                                                                                    var mailOptions = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: OwnerDetails.Email,
                                                                                        //to: "bjibin3@gmail.com",
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)

                                                                                    };

                                                                                    transporter.sendMail(mailOptions, function (error, info) {

                                                                                    });

                                                                                    var mailOptionsAdmin = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: "admin@smartboating.com.au",
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                    };

                                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                    });
                                                                                    //mail

                                                                                    res.json({

                                                                                        status: true,
                                                                                        message: 'The booking has been successfully Updated'
                                                                                    })

                                                                                })
                                                                        }
                                                                        else {
                                                                            res.json({

                                                                                status: true,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })

                                                                        }



                                                                    })
                                                                    //Add



                                                                })


                                                            })


                                                        })

                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date'
                                                        })
                                                    }
                                                })


                                            })
                                        })


                                }

                                //between Launch And PreLaunch


                                //After Launch before current date

                                if (check_Status == "2" && specialDayCheck == 0) {
                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                            {

                                                if (Cancelresults == null) {


                                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                        console.log(result.length, 'length')
                                                        // var _Length=result.length;

                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {

                                                                    if (results == null) {



                                                                        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;

                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })

                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(Startdate_old, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return

                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){

                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{

                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })

                                                                                    }

                                                                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                    if(isIncludedInSummer)
                                                                                    var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                    else
                                                                                    var TotalConcecutiveDays = WinterConsecutiveDays


                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });

                                                                                                //var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                //var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;

                                                                                                
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);


                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });

                                                                                               // var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                               // var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;
                                                                                              
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;

                                                                                    if(TotalConcecutiveDays>=Total_Count){

                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });

                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                      
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                                                                                                                                let stopExecutionboth = { stop: false }
                                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                                    
                                                                                                                    console.log(error)
                                                                                                                    stopExecutionboth = error
                                                                                                                })


                                                                                                                if (stopExecutionboth.stop) {
                                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                                }



                                                                                                                /*if(isAvailableDayBoth.type=="summer"){
                                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                                    var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                                }else if(isAvailableDayBoth.type=="winter"){

                                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                                    var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                                }else if(isAvailableDayBoth.type=="both"){
                                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;



                                                                                                                }*/

                                                                                               

                                                                                                if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    


                                                                                                }
                                                                                                
                                                                                                else{

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt , summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  summerWeekdayWeekend.weekendCnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                }

                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               
                                                                                            

                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                            if(MailSend){

                                                                                                res.json({

                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })

                                                                                            }

                                                                                                    

                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }


                                                                                 }


                        


                                                                            });
                                                                        })
                                                                    }
                                                                    else {
                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })
                                                                    }

                                                                })



                                                            })




                                                        });//else inside function owner





                                                    });

                                                }
                                                else {

                                                   
                                                    var todaysdate = moment();
                                                   
                                                    var canceldate = moment(Cancelresults.Updated_time)
                                                    var dif = moment.duration(todaysdate.diff(canceldate));
                                                   
                                                    var Hrdif = Math.round(dif.asHours());

                                                    


                                                    if (Hrdif > 24) {

                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })
    
                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }
    
                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(Startdate_old, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })
    
    
                                                                                        if (isNextDaysError) return
    
                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){
    
                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{
    
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })
    
                                                                                        }
                                                                                        let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                        if(isIncludedInSummer)
                                                                                        var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                        else
                                                                                        var TotalConcecutiveDays = WinterConsecutiveDays

                                                                                    if(isAvailableDay.type=="summer"){
    
                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                               // var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                //var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;


                                                                                                
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);


                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });

                                                                                                //var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                //var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;


                                                                                              
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                             
                                                                                                

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;

                                                                                    if(TotalConcecutiveDays>=Total_Count){

                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });

                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                      
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                let stopExecutionboth = { stop: false }
                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                    
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
                                                                                                
                                                                                                
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }
                                                                                                
                                                                                                
                                                                                                
                                                                                                /*if(isAvailableDayBoth.type=="summer"){
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
                                                                                                
                                                                                                }else if(isAvailableDayBoth.type=="winter"){
                                                                                                
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                
                                                                                                }else if(isAvailableDayBoth.type=="both"){
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                
                                                                                                
                                                                                                
                                                                                                }
                                                                                                */

                                                                                                if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    


                                                                                                }
                                                                                                
                                                                                                else{

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, winterWeekdayWeekend.weekdaycnt,winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                }

                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               
                                                                                            

                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);

                                                                                            if(MailSend){

                                                                                                res.json({

                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })

                                                                                            }

                                                                                                    

                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }


                                                                                 }





                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })


                                                                })



                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {
                                                        res.json({
                                                            status: false,
                                                            message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                        })
                                                    }

                                                }
                                            })
                                        })


                                }



                                //between Launch And PreLuanch
                                if (check_Status == "3" && specialDayCheck == 0) {



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            var _Length = result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {



                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: Startdate_old,
                                                                    end: req.body.end,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())

                                                                },

                                                                function (err, data) {

                                                                    //mail

                                                                    const emailState = 'Successfully Edited.';
                                                                    const emailContent = `Dear ${OwnerDetails.First_Name}, <p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited </p>`;
                                                                    const emailContentAdmin = `Dear Adminsistrator,The owner ${OwnerDetails.First_Name} has been successfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormatted(start_Date_New)+" 9:00 AM"}</p>`
                                                                    const emailDetailName = 'Booking Details'
                                                                    const emailDetails = [
                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                    ];
                                                                    const emailNameAndLink = {
                                                                        name: 'Login Link',
                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                    }

                                                                    var mailOptionsAdmin = {

                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                        to: "admin@smartboating.com.au",
                                                                        subject: 'Successfully Edited',
                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                    };

                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                    });
                                                                    //mail

                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The admin booking has been successfully Updated'
                                                                    })
                                                                })


                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add


                                                })


                                            })


                                        })
                                    }

                                    else//For Owner
                                    {

                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {
                                                Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                                {

                                                    if (Cancelresults == null) {


                                                        console.log('cancellation1');


                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                    let allDaysBookedBackto_One = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                    let arrayofBook_One = []

                                                                    allDaysBookedBackto_One.map((date) => arrayofBook_One.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));



                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBook_One }).then(results =>


                                                                    //Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                                    {


                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                    

                                                                                    
                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, req.body.start, req.body.end).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })

                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(Startdate_old, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return

                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){

                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{

                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })

                                                                                    }
                                                                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                    if(isIncludedInSummer)
                                                                                    var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                    else
                                                                                    var TotalConcecutiveDays = WinterConsecutiveDays

                                                                                    console.log("-----------------------",isAvailableDay.type);
                                                                                  
                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });

                                                                                               /* console.log(WeekDay_Count,"-------------------Weekdays_prev");
                                                                                                console.log(WeekEnd_Count,"-------------------WeekEndDays_prev");

                                                                                                var WeekDay_Count_edit = Math.abs(WeekDay_Count - Weekdays_prev);
                                                                                                var WeekEnd_Count_edit = Math.abs(WeekEnd_Count - WeekEndDays_prev);*/

                                                                                                
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                              
                                                                                                

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);


                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                        if(TotalConcecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                /*var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;*/

                                                                                              
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"winter");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                            

                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;

                                                                                    if(TotalConcecutiveDays>=Total_Count){

                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });

                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                      
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                let stopExecutionboth = { stop: false }
                                                                                                let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                    
                                                                                                    console.log(error)
                                                                                                    stopExecutionboth = error
                                                                                                })
                                                                                                
                                                                                                
                                                                                                if (stopExecutionboth.stop) {
                                                                                                    return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                }
                                                                                                
                                                                                                
                                                                                                
                                                                                                /*if(isAvailableDayBoth.type=="summer"){
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
                                                                                                
                                                                                                }else if(isAvailableDayBoth.type=="winter"){
                                                                                                
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                
                                                                                                }else if(isAvailableDayBoth.type=="both"){
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                
                                                                                                
                                                                                                
                                                                                                }*/

                                                                                                if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    


                                                                                                }
                                                                                                
                                                                                                else{

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt ,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                }

                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                               

                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                            if(MailSend){

                                                                                                res.json({

                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })

                                                                                            }

                                                                                                    

                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }


                                                                                 }


                                         


                                                 


                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })


                                                                })




                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {



                                                       
                                                        var todaysdate = moment();
                                                      
                                                        var canceldate = moment(Cancelresults.Updated_time)
                                                        var dif = moment.duration(todaysdate.diff(canceldate));
                                                     
                                                        var Hrdif = Math.round(dif.asHours());

                                                        


                                                        if (Hrdif > 24) {
                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                var _Length = result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
        
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
        
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(Startdate_old, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
        
        
                                                                                            if (isNextDaysError) return
        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
        
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
        
                                                                                            }
                                                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                            if(isIncludedInSummer)
                                                                                            var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                            else
                                                                                            var TotalConcecutiveDays = WinterConsecutiveDays

                                                                                            if(isAvailableDay.type=="summer"){
    
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                        //var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        //var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;


                                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                                  
        
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){
        
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                        //var WeekDay_Count_edit = WeekDay_Count - Weekdays_prev;
                                                                                                        //var WeekEnd_Count_edit = WeekEnd_Count - WeekEndDays_prev;

                                                                                                      
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                                    
                                                                                                        
        
                                                                                                        let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                
                                                                                         else if(isAvailableDay.type=="both"){
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
        
                                                                                            if(TotalConcecutiveDays>=Total_Count){
        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
        
        
                                                                                                        });
        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
        
                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                                                                                                        
                                                                                                        
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }
                                                                                                        
                                                                                                        
                                                                                                        
                                                                                                        /*if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
                                                                                                        
                                                                                                        }else if(isAvailableDayBoth.type=="winter"){
                                                                                                        
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                        
                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
                                                                                                        
                                                                                                        
                                                                                                        
                                                                                                        }*/
                                                                                                        
        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
        
        
                                                                                                        }
                                                                                                        
                                                                                                        else{
        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                        }
        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                                                                       
                                                                                                    
        
                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                    if(MailSend){
        
                                                                                                        res.json({
        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                            
        
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
        
        
                                                                                         }
        
                                                                     

                                                                                      




                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })


                                                                    })



                                                                });//else inside function owner




                                                            });

                                                        }
                                                        else {
                                                            res.json({
                                                                status: false,
                                                                message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                            })
                                                        } //

                                                        // res.json({
                                                        //     status:false,
                                                        //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                                        // })

                                                    }
                                                })
                                            })
                                    }



                                }

                                if (check_Status = "4" && User_role == "Maintenance") {


                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                        console.log(result.length, 'length')
                                        //  var _Length=result.length;

                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                    if (results == null) {


                                                        //Add 
                                                        console.log('Admin')
                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                            {



                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                Booking_ID: globalbookingid,
                                                                Boat_Name: req.body.Boat_Name,
                                                                Total_DaysBooked: Total_Count,
                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                title: req.body.title,
                                                                body: req.body.body,
                                                                start: Startdate_old,
                                                                end: req.body.end,
                                                                start_NoTime: Start_final_withoutTime,
                                                                end_NoTime: Start_final_withoutTime,
                                                                goingDuration: req.body.goingDuration,
                                                                comingDuration: req.body.comingDuration,
                                                                isAllDay: req.body.isAllDay,
                                                                category: req.body.category,
                                                                dueDateClass: req.body.dueDateClass,
                                                                location: req.body.location,
                                                                attendees: req.body.attendees,
                                                                recurrenceRule: req.body.recurrenceRule,
                                                                isPending: req.body.isPending,
                                                                isFocused: req.body.isFocused,
                                                                isVisible: req.body.isVisible,
                                                                isReadOnly: req.body.isReadOnly,
                                                                isPrivate: req.body.isPrivate,
                                                                color: req.body.color,
                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                Check_Status: req.body.Check_Status,
                                                                commends: req.body.commends,
                                                                bgColor: req.body.bgColor,
                                                                dragBgColor: req.body.dragBgColor,
                                                                borderColor: req.body.borderColor,
                                                                customStyle: req.body.customStyle,
                                                                raw: req.body.raw,
                                                                state: req.body.state,
                                                                User_RoleType: req.body.User_RoleType,
                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                Status: Module_status,
                                                                IsActive: req.body.IsActive,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())

                                                            },

                                                            function (err, data) {
                                                                //mail

                                                                const emailState = 'Successfully Edited.';
                                                                const emailContent = `Dear ${OwnerDetails.First_Name}, <p>Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited </p>`;
                                                                const emailContentAdmin = `Dear Adminsistrator, <p>The owner  ${OwnerDetails.First_Name} has been successfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                const emailDetailName = 'Booking Details'
                                                                const emailDetails = [
                                                                    { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                    { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + "9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                ];
                                                                const emailNameAndLink = {
                                                                    name: 'Login Link',
                                                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                }



                                                                var mailOptionsAdmin = {
                                                                    from: "noreply.smartboatbooking@gmail.com",
                                                                    to: "admin@smartboating.com.au",
                                                                    subject: 'Maintainance Edited',
                                                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                };

                                                                transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                });
                                                                //mail


                                                                res.json({

                                                                    status: true,
                                                                    message: 'The boat maintenance booking has been successfully Updated'
                                                                })
                                                            })

                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })

                                                    }



                                                })
                                                //Add

                                            })


                                        })

                                    })


                                }

                                // special Day
                                if (specialDayCheck == 1) {
                                    console.log("special day check Back to back 1");
                                    const Specialday_id = req.body.Specialday_id;
                                    const objSpecial1 = req.body.Special_Day;



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            // var _Length=result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {


                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: Startdate_old,
                                                                    end: req.body.end,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())

                                                                },

                                                                function (err, data) {

                                                                    

                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The admin booking has been successfully created'
                                                                    })
                                                                })


                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add
                                                })

                                            })

                                        })
                                    }

                                    else//For Owner
                                    {

                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {

                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                    console.log(result.length, 'length')
                                                    var _Length = result.length;

                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                if (results == null) {



                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                        var WinterweekendDays = response.Winter_WeekEndDays;

                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {


                                                                            let stopExecution = { stop: false }
                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                        console.log(error)
                                        stopExecution = error
                                    })

                                    if (stopExecution.stop) {
                                        return res.json({ status: true, message: stopExecution.error })
                                    }

                                    let isNextDaysError = false
                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(Startdate_old, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                        isNextDaysError = true
                                        return res.json(error)
                                    })


                                    if (isNextDaysError) return
                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                            
                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                    

                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                    if(element){

                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                    }else{

                                        res.json({
                                            status: false,
                                            message: 'Consecutive days for this boat is Empty'
                                        })

                                    }
                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                    if(isIncludedInSummer)
                                    var TotalConcecutiveDays = SummerConsecutiveDays
                                    else
                                    var TotalConcecutiveDays = WinterConsecutiveDays
                                    CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial1,scheduleid).then(async function (myflag) {
                                        if (myflag == 0) {

                                                      
                                    if(isAvailableDay.type=="summer"){

                                        var getBookedyear = new Date(req.body.start);
                                        var YearOne = getBookedyear.getFullYear();
                                        var getBookedyear = new Date(req.body.start);
                                        var YearOne = getBookedyear.getFullYear();
                                        var MonthOne = getBookedyear.getMonth()+1;
                                        var nextYearBook = (parseInt(YearOne)+1);
                                        if(MonthOne<anni_month)
                                        var exp_year = ""+YearOne+anni_month;
                                        else
                                        var exp_year =""+nextYearBook+anni_month;

                                        if(TotalConcecutiveDays>=Total_Count){

                                            //count of weekday and week end

                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                {

                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                
                                                },
                                                { new: true },
                                                function (err, data) {
                                                
                                                
                                                });
                                             
                                                if(MonthBookingStatus ==1)
                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                else
                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                
                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                if(updateSchedule){

                                                    objSpecial1.map(function (objs) {
                                                        var specialday = objs.special_date;
                                                        var Specialdayid = objs._id;
                                                        var Start_final = moment(specialday);
                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                     
                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                        if (addspecial == true) {
                                                            console.log('successs')
                                                        }
                                                        else {
                                                            console.log('fail')
                                                        }
                                                    })

                                                  

                                                }
                                                

                                                

                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);


                                                if(MailSend){

                                                    res.json({

                                                        status: true,
                                                        message: 'The booking has been successfully Updated'
                                                    })

                                                }

                                                

                                                
                                             }
                                            else{

                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                })

                                            }

                                        }else{

                                            res.json({
                                                status: false,
                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                            })

                                        }

                                    }

                                                                                                            
                                   else if(isAvailableDay.type=="winter"){

                                    var getBookedyear = new Date(req.body.start);
                                    var YearOne = getBookedyear.getFullYear();
                                    var getBookedyear = new Date(req.body.start);
                                    var YearOne = getBookedyear.getFullYear();
                                    var MonthOne = getBookedyear.getMonth()+1;
                                    var nextYearBook = (parseInt(YearOne)+1);
                                    if(MonthOne<anni_month)
                                    var exp_year = ""+YearOne+anni_month;
                                    else
                                    var exp_year =""+nextYearBook+anni_month;

                                        if(TotalConcecutiveDays>=Total_Count){

                                            //count of weekday and week end

                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                {

                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                
                                                },
                                                { new: true },
                                                function (err, data) {
                                                
                                                
                                                });
                                               
                                                if(MonthBookingStatus ==1)
                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                else
                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                
                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                if(updateSchedule){
                                                    objSpecial1.map(function (objs) {
                                                        var specialday = objs.special_date;
                                                        var Specialdayid = objs._id;
                                                        var Start_final = moment(specialday);
                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                        console.log(Start_final_withoutTime)
                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                        if (addspecial == true) {
                                                            console.log('successs')
                                                        }
                                                        else {
                                                            console.log('fail')
                                                        }
                                                    })

                                                 

                                                }
                                                

                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                                if(MailSend){

                                                    res.json({

                                                        status: true,
                                                        message: 'The booking has been successfully Updated'
                                                    })

                                                }

                                                

                                                
                                             }
                                            else{

                                                res.json({
                                                    status: false,
                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                })

                                            }

                                        }else{

                                            res.json({
                                                status: false,
                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                            })

                                        }

                                    }

        
                                 else if(isAvailableDay.type=="both"){
                                   
                                    if(isAvailableDay.bookingType == "Summer booking")
                                    var consecutiveCount = SummerConsecutiveDays;
                                    else
                                    var consecutiveCount = WinterConsecutiveDays;

                                    if(TotalConcecutiveDays>=Total_Count){

                                    
                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                    
                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                            {

                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                            
                                            },
                                            { new: true },
                                            function (err, data) {
                                            
                                            
                                            });
                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                {

                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                },
                                                { new: true },
                                                function (err, data) {


                                                });

                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]

                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                              
     

                                                if(MonthBookingStatus ==1){
                                                    
                                                    var bookedDaysOf =  AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                    


                                                }
                                                
                                                else{

                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                }

                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,req.body.end);
                                                if(updateSchedule){

                                                    objSpecial1.map(function (objs) {
                                                        var specialday = objs.special_date;
                                                        var Specialdayid = objs._id;
                                                        var Start_final = moment(specialday);
                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                        console.log(Start_final_withoutTime)
                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                        if (addspecial == true) {
                                                            console.log('successs')
                                                        }
                                                        else {
                                                            console.log('fail')
                                                        }
                                                    })

                                            

                                            }
                                            

                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date_New,end_Date_New);

                                            if(MailSend){

                                                res.json({

                                                    status: true,
                                                    message: 'The booking has been successfully Updated'
                                                })

                                            }

                                                    

                                    }else{
                                        res.json({
                                            status: false,
                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                        })

                                    }
                                    
                                    
                                    }else{
                                        res.json({
                                            status: false,
                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                        })

                                    }


                                 }

                                        }else{

                                            res.json({
                                                status: true,
                                                message: 'You Have Already Booked Special Day'
                                            })

                                        }
                                    });


                                                                        });
                                                                    })



                                                                }
                                                                else {
                                                                    res.json({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })
                                                                }




                                                            })


                                                        })



                                                    });//else inside function owner




                                                });
                                            })
                                    }



                                }

                                //special Day


                            }
                            else {
                                res.json({
                                    status: false,
                                    message: 'A booking cannot be created for a previous day'
                                })
                            }
                        }
                        else {

                            res.json({
                                status: false,
                                message: 'Boat Selected is not Active'
                            })

                        }

                    });


            })
        }
        if (Back_to_Back_id == "2") {
           
            Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(BookingResponse => {
              
                var globalbookingid = BookingResponse.Booking_ID;
                var Startdate_old = BookingResponse.start;
                var Enddate_old = BookingResponse.end;
                var start_Date = start_Date_New;
                var Start_final = moment(start_Date);
                console.log(Start_final, 'checkkkk3')
                var Start_final_withoutTime = Start_final.startOf('day');
                var Totalday_old = BookingResponse.Total_DaysBooked;
                var Total_Count = Totalday_old + Total_Count_New;
                var end_Date = Enddate_old;
                var End_final = moment(end_Date_New);
                var End_final_withoutTime = End_final.startOf('day');
                const Getmonth = new Date(start_Date_New);
                var LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });
                var Weekdays_prev = BookingResponse.WeekDay_Count;
                var WeekEndDays_prev = BookingResponse.WeekEnd_Count;
                let cancaledDays = getAllCanceledDates(Startdate_old, Enddate_old, req.body.start, req.body.end);

                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                    .then(boatDetails => {

                        if (boatDetails.Boat_Status == "1")//check whether boat is Active or not
                        {
                            //between Launch And PreLuanch
                            if (dif >= 0) {

                                if (check_Status == "1" && specialDayCheck == 0) {

                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then(Checkresult => {
                                                console.log(Checkresult.length, 'length')
                                                // var _LengthCheck=Checkresult.length;                           

                                                console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')
                                                PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then(bookingDays => {

                                                    var b_days = bookingDays.Booking_Days;
                                                    console.log(b_days)
                                                    console.log(Total_Count)
                                                    if (Total_Count <= b_days) {
                                                        console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')


                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            // var _Length=result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                console.log('hi1')
                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                    console.log('hi2')

                                                                    let allDaysBookedBacktoCheckOne = getDaysBetweenDates(start_Date_New, end_Date_New);
                                                                    let arrayofBookCheckOne = [];
                                                                    allDaysBookedBacktoCheckOne.map((date) => arrayofBookCheckOne.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));
                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookCheckOne, User_Id: { $nin: mongoose.Types.ObjectId(Owner_id) } }).then(results =>

                                                                    //Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$gte:Start_final_withoutTime_New}},{end:{$lte:End_final_withoutTime_New}}]}).then(results=>
                                                                    {
                                                                        //console.log(Start_final_withoutTime);
                                                                        //console.log(End_final_withoutTime);
                                                                        if (results == null) {
                                                                            console.log('hi3')

                                                                            //Add 
                                                                            console.log('Admin')
                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                {

                                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                    Booking_ID: globalbookingid,
                                                                                    Boat_Name: req.body.Boat_Name,
                                                                                    Total_DaysBooked: Total_Count,
                                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                    title: req.body.title,
                                                                                    body: req.body.body,
                                                                                    start: req.body.start,
                                                                                    end: Enddate_old,
                                                                                    start_NoTime: Start_final_withoutTime,
                                                                                    end_NoTime: End_final_withoutTime,
                                                                                    goingDuration: req.body.goingDuration,
                                                                                    comingDuration: req.body.comingDuration,
                                                                                    isAllDay: req.body.isAllDay,
                                                                                    category: req.body.category,
                                                                                    dueDateClass: req.body.dueDateClass,
                                                                                    location: req.body.location,
                                                                                    attendees: req.body.attendees,
                                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                                    isPending: req.body.isPending,
                                                                                    isFocused: req.body.isFocused,
                                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                    isVisible: req.body.isVisible,
                                                                                    isReadOnly: req.body.isReadOnly,
                                                                                    isPrivate: req.body.isPrivate,
                                                                                    color: req.body.color,
                                                                                    bgColor: req.body.bgColor,
                                                                                    dragBgColor: req.body.dragBgColor,
                                                                                    borderColor: req.body.borderColor,
                                                                                    customStyle: req.body.customStyle,
                                                                                    raw: req.body.raw,
                                                                                    state: req.body.state,
                                                                                    Check_Status: req.body.Check_Status,
                                                                                    commends: req.body.commends,
                                                                                    Check_Month: LaunchPreMonth,
                                                                                    User_RoleType: req.body.User_RoleType,
                                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                    Status: Module_status,
                                                                                    IsActive: req.body.IsActive,
                                                                                    Current_Time: moment(Date.now()),
                                                                                    Updated_time: moment(Date.now())

                                                                                },

                                                                                function (err, data) {

                                                                                  
                                                                                    
                                                                                    //mail

                                                                                    const emailState = 'Successfully Edited.';
                                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been successfully edited</p>`;
                                                                                    const emailContentAdmin = `Dear Adminsistrator, <p>The owner ${OwnerDetails.First_Name} has been successfully edited a booking on${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                                    const emailDetailName = 'Booking Details'
                                                                                    const emailDetails = [
                                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                                    ];
                                                                                    const emailNameAndLink = {
                                                                                        name: 'Login Link',
                                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                    }

                                                                                    var mailOptions = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: OwnerDetails.Email,
                                                                                        //to: "bjibin3@gmail.com",
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)


                                                                                    };

                                                                                    transporter.sendMail(mailOptions, function (error, info) {

                                                                                    });

                                                                                    var mailOptionsAdmin = {

                                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                                        to: "admin@smartboating.com.au",
                                                                                        subject: 'Successfully Edited',
                                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                    };

                                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                    });
                                                                                    //mail

                                                                                    res.json({

                                                                                        status: true,
                                                                                        message: 'The booking has been successfully Updated'
                                                                                    })

                                                                                })
                                                                        }
                                                                        else {
                                                                            res.json({

                                                                                status: true,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })

                                                                        }



                                                                    })
                                                                    //Add



                                                                })


                                                            })


                                                        })

                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date'
                                                        })
                                                    }
                                                })


                                            })
                                        })


                                }

                                //between Launch And PreLaunch


                                //After Launch before current date

                                if (check_Status == "2" && specialDayCheck == 0) {
                                    NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                        .then(OwnerDetails => {

                                            Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                            {

                                                if (Cancelresults == null) {


                                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                        console.log(result.length, 'length')
                                                        // var _Length=result.length;

                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results => {

                                                                    if (results == null) {



                                                                        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;

                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })

                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return

                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){

                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{

                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })

                                                                                    }
                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                        if(SummerConsecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                               
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);


                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                        if(WinterConsecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                              
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                               
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;

                                                                                    if(consecutiveCount>=Total_Count){

                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });

                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                      
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                    
                                                                                                       
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        

                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    


                                                                                                        }


                                                                                               

                                                                                                if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    


                                                                                                }
                                                                                                
                                                                                                else{

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                }

                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                            if(MailSend){

                                                                                                res.json({

                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })

                                                                                            }

                                                                                                    

                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }


                                                                                 }





                                                                            });
                                                                        })
                                                                    }
                                                                    else {
                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })
                                                                    }

                                                                })



                                                            })




                                                        });//else inside function owner





                                                    });

                                                }
                                                else {

                                                  
                                                    var todaysdate = moment();
                                                   
                                                    var canceldate = moment(Cancelresults.Updated_time)
                                                    var dif = moment.duration(todaysdate.diff(canceldate));
                                                
                                                    var Hrdif = Math.round(dif.asHours());

                                                  


                                                    if (Hrdif > 24) {

                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results => {
                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                    
                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })

                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }

                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })


                                                                                    if (isNextDaysError) return

                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){

                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{

                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })

                                                                                    }
                                                                                    if(isAvailableDay.type=="summer"){
    
                                                                                        if(SummerConsecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                               
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);


                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                        if(WinterConsecutiveDays>=Total_Count){

                                                                                            //count of weekday and week end

                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                              
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                               
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                                if(MailSend){

                                                                                                    res.json({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                                                             }
                                                                                            else{

                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })

                                                                                            }

                                                                                        }else{

                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }

                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;

                                                                                    if(consecutiveCount>=Total_Count){

                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){

                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {

                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {


                                                                                                });

                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                      
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
                    
                                                                                                       
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        

                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="winter"){

                                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    


                                                                                                        }

                                                                                               

                                                                                                if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    


                                                                                                }
                                                                                                
                                                                                                else{

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                }

                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                               

                                                                                            let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));

                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);

                                                                                            if(MailSend){

                                                                                                res.json({

                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })

                                                                                            }

                                                                                                    

                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })

                                                                                    }


                                                                                 }
                                                                                   
                                                                                   




                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })


                                                                })



                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {
                                                        res.json({
                                                            status: false,
                                                            message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                        })
                                                    }

                                                }
                                            })
                                        })


                                }



                                //between Launch And PreLuanch
                                if (check_Status == "3" && specialDayCheck == 0) {



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            var _Length = result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results => {
                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {



                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: req.body.start,
                                                                    end: Enddate_old,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())

                                                                },

                                                                function (err, data) {

                                                                   
                                                                    //mail

                                                                    const emailState = 'Successfully Edited.';
                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}  has been succesfully edited </p>`;
                                                                    const emailContentAdmin = `Dear Adminsistrator,<p> The owner ${OwnerDetails.First_Name} has been successfully edited a booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                    const emailDetailName = 'Booking Details'
                                                                    const emailDetails = [
                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                    ];
                                                                    const emailNameAndLink = {
                                                                        name: 'Login Link',
                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                    }


                                                                    var mailOptionsAdmin = {

                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                        to: "admin@smartboating.com.au",
                                                                        subject: 'Successfully Edited',
                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                    };

                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                    });
                                                                    //mail

                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The admin booking has been successfully Updated'
                                                                    })
                                                                })


                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add


                                                })


                                            })


                                        })
                                    }

                                    else//For Owner
                                    {
                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {
                                                Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                                {

                                                    if (Cancelresults == null) {


                                                        console.log('cancellation4');



                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            var _Length = result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                    let allDaysBookedBackTwo = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                    let arrayofBookTwo = []

                                                                    allDaysBookedBackTwo.map((date) => arrayofBookTwo.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookTwo, User_Id: { $nin: [mongoose.Types.ObjectId(Owner_id)] } }).then(results =>

                                                                    //Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$gte:Start_final_withoutTime_New}},{end:{$lte:End_final_withoutTime_New}}]}).then(results=>
                                                                    {
                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })
    
                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }
    
                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })
    
    
                                                                                        if (isNextDaysError) return
    
                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){
    
                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{
    
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })
    
                                                                                        }
                                                                                        if(isAvailableDay.type=="summer"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
        
                                                                                            if(SummerConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                   
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
    
                                                                                                                                                                
                                                                                       else if(isAvailableDay.type=="winter"){
                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                        var YearOne = getBookedyear.getFullYear();
                                                                                        var MonthOne = getBookedyear.getMonth()+1;
                                                                                        var nextYearBook = (parseInt(YearOne)+1);
                                                                                        if(MonthOne<anni_month)
                                                                                        var exp_year = ""+YearOne+anni_month;
                                                                                        else
                                                                                        var exp_year =""+nextYearBook+anni_month;
    
                                                                                            if(WinterConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                  
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                   
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
    
                                                            
                                                                                     else if(isAvailableDay.type=="both"){
                                                                                       
                                                                                        if(isAvailableDay.bookingType == "Summer booking")
                                                                                        var consecutiveCount = SummerConsecutiveDays;
                                                                                        else
                                                                                        var consecutiveCount = WinterConsecutiveDays;
    
                                                                                        if(consecutiveCount>=Total_Count){
    
                                                                                        
                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                        var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                        
                                                                                        if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
    
                                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
    
                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                    let stopExecutionboth = { stop: false }
                                                                                                    let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                        
                                                                                                        console.log(error)
                                                                                                        stopExecutionboth = error
                                                                                                    })


                                                                                                    if (stopExecutionboth.stop) {
                                                                                                        return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                    }

                                                                                                    if(isAvailableDayBoth.type=="summer"){
                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                                    }else if(isAvailableDayBoth.type=="winter"){

                                                                                                    var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                    var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                                    }else if(isAvailableDayBoth.type=="both"){
                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                    var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                    var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                    var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;



                                                                                                    }
                                                                                                        
                                                                                                   
    
                                                                                                    if(MonthBookingStatus ==1){
                                                                                                        
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        
    
    
                                                                                                    }
                                                                                                    
                                                                                                    else{
    
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                        var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                    }
    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                   
    
                                                                                               
    
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
                                                                                                if(MailSend){
    
                                                                                                    res.json({
    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
    
                                                                                                }
    
                                                                                                        
    
                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
                                                                                        
                                                                                        
                                                                                        }else{
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
    
    
                                                                                     }
                                                                                      
                                                                                   


                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })


                                                                })




                                                            });//else inside function owner




                                                        });
                                                    }
                                                    else {

                                                        //

                                                       
                                                        var todaysdate = moment();
                                                       
                                                        var canceldate = moment(Cancelresults.Updated_time)
                                                        var dif = moment.duration(todaysdate.diff(canceldate));
                                                       
                                                        var Hrdif = Math.round(dif.asHours());

                                                        


                                                        if (Hrdif > 24) {
                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                var _Length = result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results => {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
        
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
        
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
        
        
                                                                                            if (isNextDaysError) return
        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
        
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
        
                                                                                            }
                                                                                            if(isAvailableDay.type=="summer"){
            
                                                                                                if(SummerConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){
        
                                                                                                if(WinterConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                      
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                
                                                                                         else if(isAvailableDay.type=="both"){
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
        
                                                                                            if(consecutiveCount>=Total_Count){
        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
        
        
                                                                                                        });
        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })
    
    
                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }
    
                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                        var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                                        var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;
    
                                                                                                        }else if(isAvailableDayBoth.type=="winter"){
    
                                                                                                        var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                                        var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;
    
                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                        var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;
    
    
    
                                                                                                        }
                                                                                                            
                                    
        
                                                                                                       
        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
        
        
                                                                                                        }
                                                                                                        
                                                                                                        else{
        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer,WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, WeekDay_Count_edit_winter,WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }
        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                                       
        
                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                    if(MailSend){
        
                                                                                                        res.json({
        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                            
        
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
        
        
                                                                                         }


                                                                                      






                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })


                                                                    })



                                                                });//else inside function owner




                                                            });

                                                        }
                                                        else {
                                                            res.json({
                                                                status: false,
                                                                message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                            })
                                                        } //

                                                        // res.json({
                                                        //     status:false,
                                                        //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                                        // })

                                                    }
                                                })
                                            })
                                    }



                                }

                                if (check_Status = "4" && User_role == "Maintenance") {


                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                        console.log(result.length, 'length')
                                        //  var _Length=result.length;

                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results => {
                                                    if (results == null) {


                                                        //Add 
                                                        console.log('Admin')
                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                            {



                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                Booking_ID: globalbookingid,
                                                                Boat_Name: req.body.Boat_Name,
                                                                Total_DaysBooked: Total_Count,
                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                title: req.body.title,
                                                                body: req.body.body,
                                                                start: req.body.start,
                                                                end: Enddate_old,
                                                                start_NoTime: Start_final_withoutTime,
                                                                end_NoTime: Start_final_withoutTime,
                                                                goingDuration: req.body.goingDuration,
                                                                comingDuration: req.body.comingDuration,
                                                                isAllDay: req.body.isAllDay,
                                                                category: req.body.category,
                                                                dueDateClass: req.body.dueDateClass,
                                                                location: req.body.location,
                                                                attendees: req.body.attendees,
                                                                recurrenceRule: req.body.recurrenceRule,
                                                                isPending: req.body.isPending,
                                                                isFocused: req.body.isFocused,
                                                                isVisible: req.body.isVisible,
                                                                isReadOnly: req.body.isReadOnly,
                                                                isPrivate: req.body.isPrivate,
                                                                color: req.body.color,
                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                Check_Status: req.body.Check_Status,
                                                                commends: req.body.commends,
                                                                bgColor: req.body.bgColor,
                                                                dragBgColor: req.body.dragBgColor,
                                                                borderColor: req.body.borderColor,
                                                                customStyle: req.body.customStyle,
                                                                raw: req.body.raw,
                                                                state: req.body.state,
                                                                User_RoleType: req.body.User_RoleType,
                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                Status: Module_status,
                                                                IsActive: req.body.IsActive,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())

                                                            },

                                                            function (err, data) {
                                                                //mail

                                                                const emailState = 'Successfully Edited.';
                                                                const emailContent = `Dear ${OwnerDetails.First_Name} your booking for Boat ${boatDetails.Boat_Name} has been succesfully Edited on ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}`;
                                                                const emailContentAdmin = `Dear Adminsistrator,<p> The Boat ${boatDetails.Boat_Name} has been successfully edited a baot maintenance at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                const emailDetailName = 'Booking Details'
                                                                const emailDetails = [
                                                                    { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                    { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                ];
                                                                const emailNameAndLink = {
                                                                    name: 'Login Link',
                                                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                }



                                                                var mailOptionsAdmin = {
                                                                    from: "noreply.smartboatbooking@gmail.com",
                                                                    to: "admin@smartboating.com.au",
                                                                    subject: 'Maintainance Edited',
                                                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                };

                                                                transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                });
                                                                //mail


                                                                res.json({

                                                                    status: true,
                                                                    message: 'The boat maintenance booking has been successfully Updated'
                                                                })
                                                            })

                                                    }
                                                    else {
                                                        res.json({

                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                        })

                                                    }



                                                })
                                                //Add

                                            })


                                        })

                                    })


                                }

                                // special Day
                                if (specialDayCheck == 1) {
                                    console.log("special day check back to back id 2");
                                    const Specialday_id = req.body.Specialday_id;
                                    const objSpecial2 = req.body.Special_Day;



                                    if (User_role == 'Admin')//for Admin
                                    {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            // var _Length=result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {


                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: req.body.start,
                                                                    end: Enddate_old,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())

                                                                },

                                                                function (err, data) {
                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The admin booking has been successfully created'
                                                                    })
                                                                })


                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add
                                                })

                                            })

                                        })
                                    }

                                    else//For Owner
                                    {

                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {

                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                    console.log(result.length, 'length')
                                                    var _Length = result.length;

                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $gte: Start_final_withoutTime_New } }, { end: { $lte: End_final_withoutTime_New } }] }).then(results =>

                                                            //Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                            {
                                                                console.log(results);
                                                                if (results == null) {
                                                                   Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                        var WinterweekendDays = response.Winter_WeekEndDays;

                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                            let stopExecution = { stop: false }
                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                
                                                                                console.log(error)
                                                                                stopExecution = error
                                                                            })

                                                                           
                                                                            if (stopExecution.stop) {
                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                            }

                                                                            let isNextDaysError = false
                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                    isNextDaysError = true
                                                                                    return res.json(error)
                                                                                })


                                                                                if (isNextDaysError) return

                                                                                var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                
                                                                                var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                if(element){

                                                                                    var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                    var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                }else{

                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'Consecutive days for this boat is Empty'
                                                                                    })

                                                                                }
                                                                                CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial2,scheduleid).then(async function (myflag) {
                                                                                    if (myflag == 0) {
                                            
                                                                                                  
                                                                                if(isAvailableDay.type=="summer"){
                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                            
                                                                                    if(SummerConsecutiveDays>=Total_Count){
                                            
                                                                                        //count of weekday and week end
                                            
                                                                                        if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {
                                            
                                                                                                Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                         
                                                                                            if(MonthBookingStatus ==1)
                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                            else
                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                            
                                                                                            let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                            if(updateSchedule){
                                            
                                                                                                objSpecial2.map(function (objs) {
                                                                                                    var specialday = objs.special_date;
                                                                                                    var Specialdayid = objs._id;
                                                                                                    var Start_final = moment(specialday);
                                                                                                    var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                 
                                                                                                    var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                    if (addspecial == true) {
                                                                                                        console.log('successs')
                                                                                                    }
                                                                                                    else {
                                                                                                        console.log('fail')
                                                                                                    }
                                                                                                })
                                            
                                                                                              
                                            
                                                                                            }
                                                                                            
                                            
                                                                                            
                                            
                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                            
                                            
                                                                                            if(MailSend){
                                            
                                                                                                res.json({
                                            
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
                                            
                                                                                            }
                                            
                                                                                            
                                            
                                                                                            
                                                                                         }
                                                                                        else{
                                            
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
                                            
                                                                                        }
                                            
                                                                                    }else{
                                            
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })
                                            
                                                                                    }
                                            
                                                                                }
                                            
                                                                                                                                                        
                                                                               else if(isAvailableDay.type=="winter"){
                                                                                var getBookedyear = new Date(req.body.start);
                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                var getBookedyear = new Date(req.body.start);
                                                                                var YearOne = getBookedyear.getFullYear();
                                                                                var MonthOne = getBookedyear.getMonth()+1;
                                                                                var nextYearBook = (parseInt(YearOne)+1);
                                                                                if(MonthOne<anni_month)
                                                                                var exp_year = ""+YearOne+anni_month;
                                                                                else
                                                                                var exp_year =""+nextYearBook+anni_month;
                                            
                                                                                    if(WinterConsecutiveDays>=Total_Count){
                                            
                                                                                        //count of weekday and week end
                                            
                                                                                        if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {
                                            
                                                                                                Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                           
                                                                                            if(MonthBookingStatus ==1)
                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                            else
                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                            
                                                                                            let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                            if(updateSchedule){
                                                                                                objSpecial2.map(function (objs) {
                                                                                                    var specialday = objs.special_date;
                                                                                                    var Specialdayid = objs._id;
                                                                                                    var Start_final = moment(specialday);
                                                                                                    var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                    console.log(Start_final_withoutTime)
                                                                                                    var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                    if (addspecial == true) {
                                                                                                        console.log('successs')
                                                                                                    }
                                                                                                    else {
                                                                                                        console.log('fail')
                                                                                                    }
                                                                                                })
                                            
                                                                                                
                                            
                                                                                            }
                                                                                            
                                            
                                                                                            
                                            
                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                            
                                                                                            if(MailSend){
                                            
                                                                                                res.json({
                                            
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
                                            
                                                                                            }
                                            
                                                                                            
                                            
                                                                                            
                                                                                         }
                                                                                        else{
                                            
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
                                            
                                                                                        }
                                            
                                                                                    }else{
                                            
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })
                                            
                                                                                    }
                                            
                                                                                }
                                            
                                                    
                                                                             else if(isAvailableDay.type=="both"){
                                                                               
                                                                                if(isAvailableDay.bookingType == "Summer booking")
                                                                                var consecutiveCount = SummerConsecutiveDays;
                                                                                else
                                                                                var consecutiveCount = WinterConsecutiveDays;
                                            
                                                                                if(consecutiveCount>=Total_Count){
                                            
                                                                                
                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                
                                                                                if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
                                            
                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                        {
                                            
                                                                                            Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                            Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                        
                                                                                        },
                                                                                        { new: true },
                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                        });
                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {
                                            
                                                                                                Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                            
                                            
                                                                                            });
                                            
                                                                                            var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                            var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                            
                                                                                            var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                            var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                            
                                                                                            let stopExecutionboth = { stop: false }
                                                                                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                
                                                                                                console.log(error)
                                                                                                stopExecutionboth = error
                                                                                            })


                                                                                            if (stopExecutionboth.stop) {
                                                                                                return res.json({ status: true, message: stopExecutionboth.error })
                                                                                            }

                                                                                            if(isAvailableDayBoth.type=="summer"){
                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt-WeekEndDays_prev;
                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_winter = winterWeekdayWeekend.weekendCnt;

                                                                                            }else if(isAvailableDayBoth.type=="winter"){

                                                                                            var WeekDay_Count_edit_summer = summerWeekdayWeekend.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_summer = summerWeekdayWeekend.weekendCnt;
                                                                                            var WeekDay_Count_edit_winter = winterWeekdayWeekend.weekdaycnt-Weekdays_prev;
                                                                                            var WeekEnd_Count_edit_winter =winterWeekdayWeekend.weekendCnt-WeekEndDays_prev;

                                                                                            }else if(isAvailableDayBoth.type=="both"){
                                                                                            var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                            var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                            var WeekDay_Count_edit_summer =  summerWeekdayWeekend.weekdaycnt - summerWeekdayWeekendPrev.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_summer =  summerWeekdayWeekend.weekendCnt - summerWeekdayWeekendPrev.weekendCnt;
                                                                                            var WeekDay_Count_edit_winter =  winterWeekdayWeekend.weekdaycnt - winterWeekdayWeekendPrev.weekdaycnt;
                                                                                            var WeekEnd_Count_edit_winter =  winterWeekdayWeekend.weekendCnt - winterWeekdayWeekendPrev.weekendCnt;



                                                                                            }
                                                                                                
                                                                                           

                                                 
                                            
                                                                                            if(MonthBookingStatus ==1){
                                                                                                
                                                                                                var bookedDaysOf =  AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                
                                            
                                            
                                                                                            }
                                                                                            
                                                                                            else{
                                            
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                            }
                                            
                                                                                            let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,req.body.start,Enddate_old);
                                                                                            if(updateSchedule){
                                            
                                                                                                objSpecial2.map(function (objs) {
                                                                                                    var specialday = objs.special_date;
                                                                                                    var Specialdayid = objs._id;
                                                                                                    var Start_final = moment(specialday);
                                                                                                    var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                    console.log(Start_final_withoutTime)
                                                                                                    var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                    if (addspecial == true) {
                                                                                                        console.log('successs')
                                                                                                    }
                                                                                                    else {
                                                                                                        console.log('fail')
                                                                                                    }
                                                                                                })
                                            
                                                                                           
                                            
                                                                                        }
                                                                                        
                                            
                                                                                        
                                            
                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                            
                                                                                        if(MailSend){
                                            
                                                                                            res.json({
                                            
                                                                                                status: true,
                                                                                                message: 'The booking has been successfully Updated'
                                                                                            })
                                            
                                                                                        }
                                            
                                                                                                
                                            
                                                                                }else{
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                    })
                                            
                                                                                }
                                                                                
                                                                                
                                                                                }else{
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                    })
                                            
                                                                                }
                                            
                                            
                                                                             }
                                            
                                                                                    }else{
                                            
                                                                                        res.json({
                                                                                            status: true,
                                                                                            message: 'You Have Already Booked Special Day'
                                                                                        })
                                            
                                                                                    }
                                                                                });

                                                                          

                                                                        });
                                                                    })



                                                                }
                                                                else {
                                                                    res.json({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                    })
                                                                }




                                                            })


                                                        })



                                                    });//else inside function owner




                                                });
                                            })
                                    }



                                }

                                //special Day


                            }
                            else {
                                res.json({
                                    status: false,
                                    message: 'A booking cannot be created for a previous day'
                                })
                            }
                        }
                        else {

                            res.json({
                                status: false,
                                message: 'Boat Selected is not Active'
                            })

                        }

                    });


            })
        }
        if (Back_to_Back_id == "3") {
            console.log(Back_to_Back_id, 'bcktobck3')

            //deactivate  2nd booking 
            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                {
                    IsActive: false,
                    delStatus: 1,
                    Updated_time: moment(Date.now()),
                },
                function (err, data) {


                });
            //deactivate  2nd booking 
            Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(async (BookingResponse) => {
                Schedule.findById({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) }).then(async (BacktoResponse) => {
                    var BacktoTotal = BacktoResponse.Total_DaysBooked;
                    var bactobackstart =  BacktoResponse.start;
                    var backtobackend  =  BacktoResponse.end;
                    var Weekdays_prev_back = BacktoResponse.WeekDay_Count;
                    var WeekEndDays_prev_back = BacktoResponse.WeekEnd_Count;
                    var globalbookingid = BookingResponse.Booking_ID;
                    var Startdate_old = BookingResponse.start;
                    var Enddate_old = BookingResponse.end;
                    var start_Date = Startdate_old;
                   // console.log(start_Date)
                    var Start_final = moment(start_Date);
                   // console.log(Start_final, 'checkkkk2')
                    var Start_final_withoutTime = Start_final.startOf('day');
                    var Totalday_old = BookingResponse.Total_DaysBooked;
                   // var Total_Count = Totalday_old + Total_Count_New + BacktoTotal;
                    //console.log(Startdate_old,req.body.end,"----------------UUUIII");
                    var TotalDaysBook = getDaysBetweenDates(Startdate_old,req.body.end);
                    var WeeKDAY = JSON.parse(CheckDaynames(TotalDaysBook));
                    //console.log(WeeKDAY,"-----------WeeKDAY");
                    var Total_Count = TotalDaysBook.length;
                   // console.log(Total_Count,"----------Total_Count");
                    var end_Date = end_Date_New;
                    var End_final = moment(end_Date);
                    var End_final_withoutTime = End_final.startOf('day');
                    var Weekdays_prev = BookingResponse.WeekDay_Count;
                    var WeekEndDays_prev = BookingResponse.WeekEnd_Count;
                    const Getmonth = new Date(Startdate_old);
                    var LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });

                   var OldWeekdays = Weekdays_prev_back+Weekdays_prev;
                   var Oldweekend = WeekEndDays_prev+WeekEndDays_prev_back;
                   var NewWeekDay = Math.abs(OldWeekdays-WeeKDAY.weekdaycnt);
                   var NewWeekEnd = Math.abs(Oldweekend-WeeKDAY.weekendCnt);
                   

                    //let cancaledDays = getAllCanceledDates(Startdate_old, Enddate_old, req.body.start, req.body.end);

                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                        .then(async (boatDetails) => {

                            if (boatDetails.Boat_Status == "1")//check whether boat is Active or not
                            {
                                //between Launch And PreLuanch
                                if (dif >= 0) {

                                    if (check_Status == "1" && specialDayCheck == 0) {

                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {

                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then(Checkresult => {
                                                    console.log(Checkresult.length, 'length')
                                                    // var _LengthCheck=Checkresult.length;                           

                                                    console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh')
                                                    PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then(bookingDays => {

                                                        var b_days = bookingDays.Booking_Days;
                                                        console.log("Booking_Days::" + b_days)
                                                        console.log("Total_Count:::" + Total_Count)
                                                        /* Edited By RAGA 29-10-21 repalce if(Total_Count<=b_days)*/
                                                        if (Total_Count_New <= b_days) {
                                                            console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')


                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                // var _Length=result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                        let allDaysBookedThree = getDaysBetweenDates(start_Date_New, end_Date_New);


                                                                        let arrayofBookThree = [];

                                                                        allDaysBookedThree.map((date) => arrayofBookThree.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));


                                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookThree, User_Id: { $nin: [mongoose.Types.ObjectId(Owner_id)] } }).then(results =>
                                                                        // Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,User_Id:{ $nin: [mongoose.Types.ObjectId(Owner_id)] },$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                                        {
                                                                            console.log(Start_final_withoutTime);
                                                                            console.log(End_final_withoutTime);
                                                                            if (results == null) {

                                                                                //Add 
                                                                                console.log('Admin')
                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                                    {

                                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                        Booking_ID: globalbookingid,
                                                                                        Boat_Name: req.body.Boat_Name,
                                                                                        Total_DaysBooked: Total_Count,
                                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                        title: req.body.title,
                                                                                        body: req.body.body,
                                                                                        start: Startdate_old,
                                                                                        end: end_Date_New,
                                                                                        start_NoTime: Start_final_withoutTime,
                                                                                        end_NoTime: End_final_withoutTime,
                                                                                        goingDuration: req.body.goingDuration,
                                                                                        comingDuration: req.body.comingDuration,
                                                                                        isAllDay: req.body.isAllDay,
                                                                                        category: req.body.category,
                                                                                        dueDateClass: req.body.dueDateClass,
                                                                                        location: req.body.location,
                                                                                        attendees: req.body.attendees,
                                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                                        isPending: req.body.isPending,
                                                                                        isFocused: req.body.isFocused,
                                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                        isVisible: req.body.isVisible,
                                                                                        isReadOnly: req.body.isReadOnly,
                                                                                        isPrivate: req.body.isPrivate,
                                                                                        color: req.body.color,
                                                                                        bgColor: req.body.bgColor,
                                                                                        dragBgColor: req.body.dragBgColor,
                                                                                        borderColor: req.body.borderColor,
                                                                                        customStyle: req.body.customStyle,
                                                                                        raw: req.body.raw,
                                                                                        state: req.body.state,
                                                                                        Check_Status: req.body.Check_Status,
                                                                                        commends: req.body.commends,
                                                                                        Check_Month: LaunchPreMonth,
                                                                                        User_RoleType: req.body.User_RoleType,
                                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                        Status: Module_status,
                                                                                        IsActive: req.body.IsActive,
                                                                                        Current_Time: moment(Date.now()),
                                                                                        Updated_time: moment(Date.now())

                                                                                    },

                                                                                    function (err, data) {
                                                                                       

                                                                                        //mail

                                                                                        const emailState = 'Successfully Edited.';
                                                                                        const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited</p>`;
                                                                                        const emailContentAdmin = `Dear Adminsistrator,<p> The owner ${OwnerDetails.First_Name} has been successfully edited a boat booking on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                                        const emailDetailName = 'Booking Details'
                                                                                        const emailDetails = [
                                                                                            { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                            { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to" + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                                        ];
                                                                                        const emailNameAndLink = {
                                                                                            name: 'Login Link',
                                                                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                        }

                                                                                        var mailOptions = {

                                                                                            from: "noreply.smartboatbooking@gmail.com",
                                                                                            to: OwnerDetails.Email,
                                                                                            //to: "bjibin3@gmail.com",
                                                                                            subject: 'Successfully Edited',
                                                                                            html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)


                                                                                        };

                                                                                        transporter.sendMail(mailOptions, function (error, info) {

                                                                                        });

                                                                                        var mailOptionsAdmin = {

                                                                                            from: "noreply.smartboatbooking@gmail.com",
                                                                                            to: "admin@smartboating.com.au",
                                                                                            subject: 'Successfully Edited',
                                                                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                                        };

                                                                                        transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                                        });
                                                                                        //mail

                                                                                        res.json({

                                                                                            status: true,
                                                                                            message: 'The booking has been successfully Updated'
                                                                                        })

                                                                                    })
                                                                            }
                                                                            else {

                                                                                //deactivate  2nd booking 
                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                    {
                                                                                        IsActive: true,
                                                                                        Updated_time: moment(Date.now()),
                                                                                    },
                                                                                    function (err, data) {


                                                                                    });
                                                                                //deactivate  2nd booking 

                                                                                res.json({

                                                                                    status: true,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })

                                                                            }



                                                                        })
                                                                        //Add



                                                                    })


                                                                })


                                                            })

                                                        }
                                                        else {
                                                            //deactivate  2nd booking 
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                {
                                                                    IsActive: true,
                                                                    Updated_time: moment(Date.now()),
                                                                },
                                                                function (err, data) {


                                                                });
                                                            //deactivate  2nd booking 

                                                            res.json({

                                                                status: true,
                                                                message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date'
                                                            })
                                                        }
                                                    })


                                                })
                                            })


                                    }

                                    //between Launch And PreLaunch


                                    //After Launch before current date

                                    if (check_Status == "2" && specialDayCheck == 0) {
                                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                            .then(OwnerDetails => {

                                                Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                                {

                                                    if (Cancelresults == null) {


                                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                            console.log(result.length, 'length')
                                                            // var _Length=result.length;

                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                    //let allDaysBookedZero = getDaysBetweenDates(start_Date_New,end_Date_New);

                                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {

                                                                        if (results == null) {



                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                    let stopExecution = { stop: false }
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })
    
                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }
    
                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })
    
    
                                                                                        if (isNextDaysError) return
    
                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){
    
                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            //deactivate  2nd booking 
                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                            {
                                                                                                IsActive: true,
                                                                                                Updated_time: moment(Date.now()),
                                                                                            },
                                                                                            function (err, data) {


                                                                                            });
    
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })
    
                                                                                        }
                                                                                        if(isAvailableDay.type=="summer"){

                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
        
                                                                                            if(SummerConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                   
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                        {
                                                                                                            IsActive: true,
                                                                                                            Updated_time: moment(Date.now()),
                                                                                                        },
                                                                                                        function (err, data) {


                                                                                                        });
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{

                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {


                                                                                                });
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
    
                                                                                                                                                                
                                                                                       else if(isAvailableDay.type=="winter"){

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
    
                                                                                            if(WinterConsecutiveDays>=Total_Count){
    
                                                                                                //count of weekday and week end
    
                                                                                                if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                  
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                   
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        res.json({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
    
                                                                                                    }
    
                                                                                                    
    
                                                                                                    
                                                                                                 }
                                                                                                else{
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                        {
                                                                                                            IsActive: true,
                                                                                                            Updated_time: moment(Date.now()),
                                                                                                        },
                                                                                                        function (err, data) {


                                                                                                        });
    
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                    })
    
                                                                                                }
    
                                                                                            }else{
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {


                                                                                                });
    
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
    
                                                                                            }
    
                                                                                        }
    
                                                            
                                                                                     else if(isAvailableDay.type=="both"){
                                                                                       
                                                                                        if(isAvailableDay.bookingType == "Summer booking")
                                                                                        var consecutiveCount = SummerConsecutiveDays;
                                                                                        else
                                                                                        var consecutiveCount = WinterConsecutiveDays;
    
                                                                                        if(consecutiveCount>=Total_Count){
    
                                                                                        
                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                        var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                        
                                                                                        if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
    
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
    
                                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
    
                                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
    
                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
    
                                                                                                   
    
                                                                                                    if(MonthBookingStatus ==1){
                                                                                                        
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        
    
    
                                                                                                    }
                                                                                                    
                                                                                                    else{
    
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                        var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                    }
    
                                                                                                    let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                   
    
                                                                                                let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
    
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
    
                                                                                                if(MailSend){
    
                                                                                                    res.json({
    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
    
                                                                                                }
    
                                                                                                        
    
                                                                                        }else{
                                                                                            //deactivate  2nd booking 
                                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                            {
                                                                                                IsActive: true,
                                                                                                Updated_time: moment(Date.now()),
                                                                                            },
                                                                                            function (err, data) {


                                                                                            });
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
                                                                                        
                                                                                        
                                                                                        }else{

                                                                                             //deactivate  2nd booking 
                                                                                             Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                             {
                                                                                                 IsActive: true,
                                                                                                 Updated_time: moment(Date.now()),
                                                                                             },
                                                                                             function (err, data) {


                                                                                             });
                                                                                            
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
    
                                                                                        }
    
    
                                                                                     }
                                                                                    






                                                                                });
                                                                            })
                                                                        }
                                                                        else {
                                                                            //deactivate  2nd booking 
                                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                {
                                                                                    IsActive: true,
                                                                                    Updated_time: moment(Date.now()),
                                                                                },
                                                                                function (err, data) {


                                                                                });
                                                                            //deactivate  2nd booking 
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                            })
                                                                        }

                                                                    })



                                                                })




                                                            });//else inside function owner





                                                        });

                                                    }
                                                    else {

                                                        
                                                        var todaysdate = moment();
                                                      
                                                        var canceldate = moment(Cancelresults.Updated_time)
                                                        var dif = moment.duration(todaysdate.diff(canceldate));
                                                      
                                                        var Hrdif = Math.round(dif.asHours());

                                                      


                                                        if (Hrdif > 24) {

                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                var _Length = result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
        
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
        
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
        
        
                                                                                            if (isNextDaysError) return
        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
        
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
        
                                                                                            }

                                                                                            if(isAvailableDay.type=="summer"){
        
                                                                                                if(SummerConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
    
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){
        
                                                                                                if(WinterConsecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                      
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                
                                                                                         else if(isAvailableDay.type=="both"){
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
        
                                                                                            if(consecutiveCount>=Total_Count){
        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
        
        
                                                                                                        });
        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
        
                                                                                                       
        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
        
        
                                                                                                        }
                                                                                                        
                                                                                                        else{
        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays, winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                        }
        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
        
                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                    if(MailSend){
        
                                                                                                        res.json({
        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                            
        
                                                                                            }else{
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
    
                                                                                                 //deactivate  2nd booking 
                                                                                                 Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                 {
                                                                                                     IsActive: true,
                                                                                                     Updated_time: moment(Date.now()),
                                                                                                 },
                                                                                                 function (err, data) {
    
    
                                                                                                 });
                                                                                                
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
        
        
                                                                                         }
                                                                                        
                                                                                       
                                                                                      

                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                //deactivate  2nd booking 
                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                    {
                                                                                        IsActive: true,
                                                                                        Updated_time: moment(Date.now()),
                                                                                    },
                                                                                    function (err, data) {


                                                                                    });
                                                                                //deactivate  2nd booking 
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })


                                                                    })



                                                                });//else inside function owner




                                                            });
                                                        }
                                                        else {

                                                            //deactivate  2nd booking 
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                {
                                                                    IsActive: true,
                                                                    Updated_time: moment(Date.now()),
                                                                },
                                                                function (err, data) {


                                                                });
                                                            //deactivate  2nd booking 
                                                            res.json({
                                                                status: false,
                                                                message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                            })
                                                        }

                                                    }
                                                })
                                            })


                                    }



                                    //between Launch And PreLuanch
                                    if (check_Status == "3" && specialDayCheck == 0) {



                                        if (User_role == 'Admin')//for Admin
                                        {
                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                console.log(result.length, 'length')
                                                var _Length = result.length;

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                            if (results == null) {


                                                                //Add 
                                                                console.log('Admin')
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                    {



                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                        Booking_ID: globalbookingid,
                                                                        Boat_Name: req.body.Boat_Name,
                                                                        Total_DaysBooked: Total_Count,
                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                        title: req.body.title,
                                                                        body: req.body.body,
                                                                        start: Startdate_old,
                                                                        end: end_Date_New,
                                                                        start_NoTime: Start_final_withoutTime,
                                                                        end_NoTime: End_final_withoutTime,
                                                                        goingDuration: req.body.goingDuration,
                                                                        comingDuration: req.body.comingDuration,
                                                                        isAllDay: req.body.isAllDay,
                                                                        category: req.body.category,
                                                                        dueDateClass: req.body.dueDateClass,
                                                                        location: req.body.location,
                                                                        attendees: req.body.attendees,
                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                        isPending: req.body.isPending,
                                                                        isFocused: req.body.isFocused,
                                                                        isVisible: req.body.isVisible,
                                                                        isReadOnly: req.body.isReadOnly,
                                                                        isPrivate: req.body.isPrivate,
                                                                        color: req.body.color,
                                                                        bgColor: req.body.bgColor,
                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                        Check_Status: req.body.Check_Status,
                                                                        commends: req.body.commends,
                                                                        dragBgColor: req.body.dragBgColor,
                                                                        borderColor: req.body.borderColor,
                                                                        customStyle: req.body.customStyle,
                                                                        raw: req.body.raw,
                                                                        state: req.body.state,
                                                                        User_RoleType: req.body.User_RoleType,
                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                        Status: Module_status,
                                                                        IsActive: req.body.IsActive,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now())

                                                                    },

                                                                    function (err, data) {

                                                                        //mail

                                                                        const emailState = 'Successfully Edited.';
                                                                        const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking on ${boatDetails.Boat_Name}  at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}has been succesfully edited <p>`;
                                                                        const emailContentAdmin = `Dear Adminsistrator,<p> The owner ${OwnerDetails.First_Name} has been successfullye dited a booking on ${boatDetails.Boat_Name}  at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                        const emailDetailName = 'Booking Details'
                                                                        const emailDetails = [
                                                                            { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                            { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                        ];
                                                                        const emailNameAndLink = {
                                                                            name: 'Login Link',
                                                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                        }


                                                                        var mailOptionsAdmin = {

                                                                            from: "noreply.smartboatbooking@gmail.com",
                                                                            to: "admin@smartboating.com.au",
                                                                            subject: 'Successfully Edited',
                                                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                        };

                                                                        transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                        });
                                                                        //mail

                                                                        res.json({

                                                                            status: true,
                                                                            message: 'The admin booking has been successfully Updated'
                                                                        })
                                                                    })


                                                            }
                                                            else {
                                                                //deactivate  2nd booking 
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                    {
                                                                        IsActive: true,
                                                                        Updated_time: moment(Date.now()),
                                                                    },
                                                                    function (err, data) {


                                                                    });
                                                                //deactivate  2nd booking 

                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }



                                                        })
                                                        //Add


                                                    })


                                                })


                                            })
                                        }

                                        else//For Owner
                                        {
                                            NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                                .then(OwnerDetails => {
                                                    Schedule.findOne({ Boat_Id: Boat_id, User_Id: Owner_id, IsActive: false, Cancelled_Status: 1, $or: [{ end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }, { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] }, { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] }] }).then(Cancelresults =>//for cancellation
                                                    {

                                                        if (Cancelresults == null) {


                                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                console.log(result.length, 'length')
                                                                var _Length = result.length;

                                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {
                                                                        let allDaysBookedBacktoCheckThree = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                        let arrayofBookCheckThree = [];

                                                                        allDaysBookedBacktoCheckThree.map((date) => arrayofBookCheckThree.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                                        //Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookCheckThree }).then(results =>

                                                                        Schedule.findOne({Boat_Id:Boat_id,IsActive:true,isBookingPending:false,isBookingCancelled:false,$and:[{start:{$lte:End_final_withoutTime}},{end:{$gte:End_final_withoutTime}}]}).then(results=>
                                                                        {
                                                                            if (results == null) {



                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, req.body.start, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
        
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
        
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
        
        
                                                                                            if (isNextDaysError) return
        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
        
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
        
                                                                                            }
                                                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                                if(isIncludedInSummer)
                                                                                                var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                                else
                                                                                                var TotalConcecutiveDays = WinterConsecutiveDays

                                                                                                //console.log(TotalConcecutiveDays,"--------TotalConcecutiveDays(((((((((((");

                                                                                                console.log(isAvailableDay.type,"-----------isAvailableDay.type");

                                                                                               
                                                                                            if(isAvailableDay.type=="summer"){
            
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                                            if(MonthOne<anni_month)
                                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                                            else
                                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                                       
                                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, start_Date, end_Date,anni_month,'summer');
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, NewWeekDay, NewWeekEnd,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
    
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){
        
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                       
                                                                                                           var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                                            if(MonthOne<anni_month)
                                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                                            else
                                                                                                            var exp_year =""+nextYearBook+anni_month;

                                                                                                      
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, start_Date, end_Date,anni_month,'winter');
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, NewWeekDay, NewWeekEnd,exp_year,"winter");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                
                                                                                         else if(isAvailableDay.type=="both"){

                                                                                            
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
        
                                                                                            if(TotalConcecutiveDays>=Total_Count){
        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
        
        
                                                                                                        });
        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                   
                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,req.body.end).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })


                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        let stopExecution_old = { stop: false }
                                                                                                        let isAvailableDay_old = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_old = error
                                                                                                        })


                                                                                                        if (stopExecution_old.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_old.error })
                                                                                                        }

                                                                                                        let stopExecution_back = { stop: false }
                                                                                                        let isAvailableDay_back = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,bactobackstart,backtobackend).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_back = error
                                                                                                        })


                                                                                                        if (stopExecution_back.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_back.error })
                                                                                                        }

                                                                                                        var WeekDay_Count_edit_summer_both =0;
                                                                                                        var WeekEnd_Count_edit_summer_both=0;
                                                                                                        var WeekDay_Count_edit_winter_both=0;
                                                                                                        var WeekEnd_Count_edit_winter_both=0;

                                                                                                        var WeekDay_Count_edit_summer_old =0;
                                                                                                        var WeekEnd_Count_edit_summer_old=0;
                                                                                                        var WeekDay_Count_edit_winter_old=0;
                                                                                                        var WeekEnd_Count_edit_winter_old=0;

                                                                                                        var WeekDay_Count_edit_summer_back =0;
                                                                                                        var WeekEnd_Count_edit_summer_back=0;
                                                                                                        var WeekDay_Count_edit_winter_back=0;
                                                                                                        var WeekEnd_Count_edit_winter_back=0;

                                                                                                        
                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                        var getbothdaysSummer  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(getbothdaysSummer));    
                                                                                                        var WeekDay_Count_edit_summer_both = summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both = summerWeekdayWeekend.weekendCnt;
                                                                                                    
                                                                                                        }else if(isAvailableDayBoth.type=="winter"){
                                                                                                        
                                                                                                        var getbothdaysWinter  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr)); 
                                                                                                    
                                                                                                        var WeekDay_Count_edit_winter_both = winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                        
                                                                                                           
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        var WeekDay_Count_edit_summer_both =  summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both =  summerWeekdayWeekend.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter_both =  winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =  winterWeekdayWeekend.weekendCnt;
                                                                                                        }


                                                                                                        if(isAvailableDay_old.type=="summer"){
                                                                                                               
                                                                                                            var WeekDay_Count_edit_summer_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer_old = WeekEndDays_prev;
                                                                                                        
                                                                                                            }else if(isAvailableDay_old.type=="winter"){
                                                                                                            
                                                                                                            var WeekDay_Count_edit_winter_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter_old = WeekEndDays_prev;
    
                                                                                                            }else if(isAvailableDay_old.type=="both"){
                                                                                                            var summerWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.summer_Arr));
                                                                                                            var winterWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer_old =  summerWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer_old =  summerWeekdayWeekend_old.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter_old =  winterWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter_old =  winterWeekdayWeekend_old.weekendCnt;
                                                                                                            }


                                                                                                            if(isAvailableDay_back.type=="summer"){
                                                                                                                   
                                                                                                                var WeekDay_Count_edit_summer_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_summer_back= WeekEndDays_prev_back;
                                                                                                            
                                                                                                                }else if(isAvailableDay_back.type=="winter"){
                                                                                                               
                                                                                                                var WeekDay_Count_edit_winter_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_winter_back = WeekEndDays_prev_back;
        
                                                                                                                }else if(isAvailableDay_back.type=="both"){
                                                                                                                var summerWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.summer_Arr));
                                                                                                                var winterWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.winter_Arr));
                                                                                                                var WeekDay_Count_edit_summer_back =  summerWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer_back =  summerWeekdayWeekend_back.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter_back =  winterWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter_back =  winterWeekdayWeekend_back.weekendCnt;
                                                                                                                }
                                                                                                            
                                                                                                                var WeekDay_Count_edit_summer = Math.abs(WeekDay_Count_edit_summer_both-(WeekDay_Count_edit_summer_old+WeekDay_Count_edit_summer_back))
                        
                                                                                                                var WeekEnd_Count_edit_summer = Math.abs(WeekEnd_Count_edit_summer_both-(WeekEnd_Count_edit_summer_old+WeekEnd_Count_edit_summer_back));

                                                                                                                var WeekDay_Count_edit_winter =  Math.abs(WeekDay_Count_edit_winter_both-(WeekDay_Count_edit_winter_old+WeekDay_Count_edit_winter_back));
                                                                                                                
                                                                                                                var WeekEnd_Count_edit_winter  = Math.abs(WeekEnd_Count_edit_winter_both-(WeekEnd_Count_edit_winter_old+WeekEnd_Count_edit_winter_back));

                                                                                                   // console.log(isAvailableDay_back.type,isAvailableDay_old.type,isAvailableDayBoth.type,"----Back,Old,Both");
                                                                                                       
        
                                                                                                        if(MonthBookingStatus ==1){

                                                                                                            var Start_final_yearOne = moment(req.body.start);
                                                                                                            var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                                                                            let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                            var start_mydate = new Date(req.body.start);
                                                                                                            var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                                                                            var getMonthEndyear = new Date(req.body.end);
                                                                                                            var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                                                                            var exp_year =""+nextyear+anni_month;
                                                                                                            let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                                                                            let YearOne_End_Date = lastday;
                                                                                                            var End_final_yearTwo = moment(req.body.end);
                                                                                                            var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                                                                            let firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);
                                                                                                            let YearTwo_Start_Date = firstDayTwo;
                                                                                                            let YearTwo_End_Date = End_final_withoutTime_yeartwo;

                                                                                                            var stopExecutionOne = { stop: false }
                                                                                                            var isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionOne = error
                                                                                                            })

                                                                                                            if(isAvailableDayYearOne.type == "winter"){

                                                                                                               
                                                                                                                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(YearOne_Start_Date, YearOne_End_Date, CurentBookBetweenDays.length) 
                                                                                                                var totalbookedDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, YearOne_Start_Date, YearOne_End_Date, totalbookedDays, reAssignedWeekDaysCount, reAssignedWeekendCount,startexp,"winter");
                                                                                                           // var bookedDaysOfS = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Summer_Sdate, Summer_Edate,anni_month,'summer');
                                                                                                            //var bookedDaysOfW = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Winter_Sdate, Winter_Edate,anni_month,'winter');
                                                                                                            }

                                                                                                            else if(isAvailableDayYearOne.type == "summer"){

                                                                                                                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(YearOne_Start_Date, YearOne_End_Date);
                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(YearOne_Start_Date, YearOne_End_Date, CurentBookBetweenDays.length) 
                                                                                                                var totalbookedDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, YearOne_Start_Date, YearOne_End_Date, totalbookedDays, reAssignedWeekDaysCount, reAssignedWeekendCount,startexp,"winter");

                                                                                                            }

                                                                                                            else if(isAvailableDayYearOne.type == "both"){

                                                                                                                var Summer_Sdate_One = isAvailableDayYearOne.summer_Arr[0];
                                                                                                                var Summer_Edate_One = isAvailableDayYearOne.summer_Arr[(isAvailableDayYearOne.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_One = isAvailableDayYearOne.winter_Arr[0];
                                                                                                                var Winter_Edate_One = isAvailableDayYearOne.winter_Arr[(isAvailableDayYearOne.winter_Arr.length)-1]
                                                                                                                let SummerBookingDays = getDaysBetweenDatesDayFirst(Summer_Sdate_One, Summer_Edate_One);
                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_One, Summer_Edate_One, SummerBookingDays.length) 
                                                                                                                var TotalSummerDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                let WinterBookingDays = getDaysBetweenDatesDayFirst(Winter_Sdate_One, Winter_Edate_One);
                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Summer_Sdate_One, Summer_Edate_One, SummerBookingDays.length) 
                                                                                                                var TotalWinterDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate_One, Summer_Edate_One, TotalSummerDays, reAssignedWeekDaysCount, reAssignedWeekendCount,startexp,"summer")
                                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate_One, Winter_Edate_One, TotalWinterDays,  reAssignedWeekDaysCount, reAssignedWeekendCount,startexp,"winter")

                                                                                                            }

                                                                                                            
                                                                                                            var stopExecutionTwo = { stop: false }
                                                                                                            var isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                                                                                console.log(error)
                                                                                                                stopExecutionTwo = error
                                                                                                            })

                                                                                                            if(isAvailableDayYearTwo.type == "winter"){ 

                                                                                                                var Start_back = moment(bactobackstart);
                                                                                                                var Start_Back_One = Start_back.startOf('day');
                                                                                                                var End_back = moment(backtobackend);
                                                                                                                var End_Back_One = End_back.startOf('day');
                                                                                                                console.log(Start_Back_One,End_Back_One);
                                                                                                               let backstartDyas = getDaysBetweenDatesDayFirst(Start_Back_One,End_Back_One);
                                                                                                                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                let difference = CurentBookBetweenDays.filter(x => !backstartDyas.includes(x));
                                                                                                                

                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(difference[0], difference[(difference.length-1)], CurentBookBetweenDays.length) 
                                                                                                                var totalbookedDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, YearTwo_Start_Date, YearTwo_End_Date, totalbookedDays, reAssignedWeekDaysCount, reAssignedWeekendCount,exp_year,"winter");
                                                                                                           // var bookedDaysOfS = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Summer_Sdate, Summer_Edate,anni_month,'summer');
                                                                                                            //var bookedDaysOfW = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Winter_Sdate, Winter_Edate,anni_month,'winter');
                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "summer"){

                                                                                                               
                                                                                                                var Start_back = moment(bactobackstart);
                                                                                                                var Start_Back_One = Start_back.startOf('day');
                                                                                                                var End_back = moment(backtobackend);
                                                                                                                var End_Back_One = End_back.startOf('day');
                                                                                                                console.log(Start_Back_One,End_Back_One);
                                                                                                               let backstartDyas = getDaysBetweenDatesDayFirst(Start_Back_One,End_Back_One);
                                                                                                                let CurentBookBetweenDays = getDaysBetweenDatesDayFirst(YearTwo_Start_Date, YearTwo_End_Date);
                                                                                                                let difference = CurentBookBetweenDays.filter(x => !backstartDyas.includes(x));
                                                                                                                

                                                                                                                var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(difference[0], difference[(difference.length-1)], CurentBookBetweenDays.length) 
                                                                                                                var totalbookedDays = reAssignedWeekDaysCount+reAssignedWeekendCount;
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, YearTwo_Start_Date, YearTwo_End_Date, totalbookedDays, reAssignedWeekDaysCount, reAssignedWeekendCount,exp_year,"winter");
                                                                         
                                                                                                            }

                                                                                                            else if(isAvailableDayYearTwo.type == "both"){

                                                                                                                var stopExecution_prevback = { stop: false }
                                                                                                                var isAvailableDay_backs = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,bactobackstart, backtobackend).catch((error) => {
                                                                                                                    console.log(error)
                                                                                                                    stopExecution_prevback = error
                                                                                                                });

                                                                                                                if((isAvailableDay_backs.type == "summer")){

                                                                                                                    let backstartDyas = getDaysBetweenDatesDayFirst(Start_Back_One,End_Back_One);
                                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_Back_One,End_Back_One, backstartDyas.length) 
                                                                                                                    var prevSummerWeekdays = reAssignedWeekDaysCount;
                                                                                                                    var prevSummerWeekend   = reAssignedWeekendCount;
                                                                                                                    var prevWinterWeekdays =0;
                                                                                                                    var prevWinterWeekend =0;

                                                                                                                }
                                                                                                                else if(isAvailableDay_backs.type == "winter"){

                                                                                                                    let backstartDyas = getDaysBetweenDatesDayFirst(Start_Back_One,End_Back_One);
                                                                                                                    var { reAssignedWeekDaysCount, reAssignedWeekendCount } = getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner(Start_Back_One,End_Back_One, backstartDyas.length) 
                                                                                                                    var prevWinterWeekdays = reAssignedWeekDaysCount;
                                                                                                                    var prevWinterWeekend   = reAssignedWeekendCount;
                                                                                                                    var prevSummerWeekdays  = 0;
                                                                                                                    var prevSummerWeekend   = 0;

                                                                                                                }

                                                                                                                else if(isAvailableDay_backs.type == "both"){
                                                                                                                    var summerWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDay_back.summer_Arr));
                                                                                                                    var winterWeekdayWeekendPrev = JSON.parse(CheckDaynames(isAvailableDay_back.winter_Arr));
                                                                                                                    var prevSummerWeekdays = summerWeekdayWeekendPrev.weekdaycnt;
                                                                                                                    var prevSummerWeekend   = summerWeekdayWeekendPrev.weekendCnt;
                                                                                                                    var prevWinterWeekdays = winterWeekdayWeekendPrev.weekdaycnt;
                                                                                                                    var prevWinterWeekend = winterWeekdayWeekendPrev.weekendCnt;

                                                                                                                    console.log(prevSummerWeekdays,prevSummerWeekend,prevWinterWeekdays,prevWinterWeekend,"--------OKk");


                                                                                                                }

                                                                                                                var Summer_Sdate_two = isAvailableDayYearTwo.summer_Arr[0];
                                                                                                                var Summer_Edate_two = isAvailableDayYearTwo.summer_Arr[(isAvailableDayYearTwo.summer_Arr.length)-1]
                                                                                                                var Winter_Sdate_two = isAvailableDayYearTwo.winter_Arr[0];
                                                                                                                var Winter_Edate_two = isAvailableDayYearTwo.winter_Arr[(isAvailableDayYearTwo.winter_Arr.length)-1]
                                                                                                               
                                                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearTwo.summer_Arr));
                                                                                                                var Summer_weekday = summerWeekdayWeekend.weekdaycnt;
                                                                                                                var Summer_weekend = summerWeekdayWeekend.weekendCnt;
                                                                                                               
                                                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearTwo.winter_Arr));
                                                                                                                var Winter_weekday = winterWeekdayWeekend.weekdaycnt;
                                                                                                                var Winter_weekend = winterWeekdayWeekend.weekendCnt;
                                                                                                                var TotalWinterDays = Winter_weekday+Winter_weekend;

                                                                                                                var resSummerWeekDays = Math.abs(Summer_weekday-prevSummerWeekdays);
                                                                                                                var resSummerWeekEnd = Math.abs(Summer_weekend-prevSummerWeekend);
                                                                                                                var resWinterWeekDays = Math.abs(Winter_weekday-prevWinterWeekdays);
                                                                                                                var resWinterWeekEnd = Math.abs(Winter_weekend-prevWinterWeekend);
                                                                                                                var TotalSummerDays = resSummerWeekDays+resSummerWeekEnd;
                                                                                                                var TotalWinterDays = resWinterWeekDays+resWinterWeekEnd;
                                                                                                                console.log(resSummerWeekDays,resSummerWeekEnd,resWinterWeekDays,resWinterWeekEnd,exp_year,"-----------KKKKKKKKKKK");
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate_two, Summer_Edate_two, TotalSummerDays, resSummerWeekDays, resSummerWeekEnd,exp_year,"summer")
                                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate_two, Winter_Edate_two, TotalWinterDays,  resWinterWeekDays, resWinterWeekEnd,exp_year,"winter")

                                                                                                            }
                                                                                                            
                                                                                                            
        
        
                                                                                                        }
                                                                                                        
                                                                                                        else{

                                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                                            if(MonthOne<anni_month)
                                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                                            else
                                                                                                            var exp_year =""+nextYearBook+anni_month;
        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }
        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
        
                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                    if(MailSend){
        
                                                                                                        res.json({
        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                            
        
                                                                                            }else{
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
    
                                                                                                 //deactivate  2nd booking 
                                                                                                 Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                 {
                                                                                                     IsActive: true,
                                                                                                     Updated_time: moment(Date.now()),
                                                                                                 },
                                                                                                 function (err, data) {
    
    
                                                                                                 });
                                                                                                
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
        
        
                                                                                         }
                                                                                        
                                                                                      


                                                                                    });
                                                                                })
                                                                            }
                                                                            else {
                                                                                //deactivate  2nd booking 
                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                    {
                                                                                        IsActive: true,
                                                                                        Updated_time: moment(Date.now()),
                                                                                    },
                                                                                    function (err, data) {


                                                                                    });
                                                                                //deactivate  2nd booking 
                                                                                res.json({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                })
                                                                            }

                                                                        })


                                                                    })




                                                                });//else inside function owner




                                                            });
                                                        }
                                                        else {

                                                            //

                                                            
                                                            var todaysdate = moment();
                                                            
                                                            var canceldate = moment(Cancelresults.Updated_time)
                                                            var dif = moment.duration(todaysdate.diff(canceldate));
                                                          
                                                            var Hrdif = Math.round(dif.asHours());

                                                           


                                                            if (Hrdif > 24) {
                                                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                                    console.log(result.length, 'length')
                                                                    var _Length = result.length;

                                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {


                                                                            Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                                if (results == null) {



                                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                                        var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                            
                                                                                        let stopExecution = { stop: false }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, req.body.start, end_Date).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
        
                                                                                       
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
        
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
        
        
                                                                                            if (isNextDaysError) return
        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
    
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
        
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
        
                                                                                            }
                                                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Startdate_old) || {};
                                                                                            if(isIncludedInSummer)
                                                                                            var TotalConcecutiveDays = SummerConsecutiveDays
                                                                                            else
                                                                                            var TotalConcecutiveDays = WinterConsecutiveDays
                                                                                            if(isAvailableDay.type=="summer"){
            
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                        
                                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, start_Date, end_Date,anni_month,'summer');
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
    
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                                                                                                                    
                                                                                           else if(isAvailableDay.type=="winter"){
        
                                                                                                if(TotalConcecutiveDays>=Total_Count){
        
                                                                                                    //count of weekday and week end
        
                                                                                                    if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });

                                                                                                        
                                                                                                      
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, start_Date, end_Date,anni_month,'winter');
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
                                                                                                       let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            res.json({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully Updated'
                                                                                                            })
        
                                                                                                        }
        
                                                                                                        
        
                                                                                                        
                                                                                                     }
                                                                                                    else{
                                                                                                        //deactivate  2nd booking 
                                                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                            {
                                                                                                                IsActive: true,
                                                                                                                Updated_time: moment(Date.now()),
                                                                                                            },
                                                                                                            function (err, data) {
    
    
                                                                                                            });
        
                                                                                                        res.json({
                                                                                                            status: false,
                                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                }else{
                                                                                                    //deactivate  2nd booking 
                                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                    {
                                                                                                        IsActive: true,
                                                                                                        Updated_time: moment(Date.now()),
                                                                                                    },
                                                                                                    function (err, data) {
    
    
                                                                                                    });
        
                                                                                                    res.json({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
        
                                                                                                }
        
                                                                                            }
        
                                                                
                                                                                         else if(isAvailableDay.type=="both"){
                                                                                           
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
        
                                                                                            if(TotalConcecutiveDays>=Total_Count){
        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                            if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
        
        
                                                                                                        });
        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                              
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                        let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,req.body.end).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })


                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        let stopExecution_old = { stop: false }
                                                                                                        let isAvailableDay_old = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_old = error
                                                                                                        })


                                                                                                        if (stopExecution_old.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_old.error })
                                                                                                        }

                                                                                                        let stopExecution_back = { stop: false }
                                                                                                        let isAvailableDay_back = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,bactobackstart,backtobackend).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_back = error
                                                                                                        })


                                                                                                        if (stopExecution_back.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_back.error })
                                                                                                        }

                                                                                                        var WeekDay_Count_edit_summer_both =0;
                                                                                                        var WeekEnd_Count_edit_summer_both=0;
                                                                                                        var WeekDay_Count_edit_winter_both=0;
                                                                                                        var WeekEnd_Count_edit_winter_both=0;

                                                                                                        var WeekDay_Count_edit_summer_old =0;
                                                                                                        var WeekEnd_Count_edit_summer_old=0;
                                                                                                        var WeekDay_Count_edit_winter_old=0;
                                                                                                        var WeekEnd_Count_edit_winter_old=0;

                                                                                                        var WeekDay_Count_edit_summer_back =0;
                                                                                                        var WeekEnd_Count_edit_summer_back=0;
                                                                                                        var WeekDay_Count_edit_winter_back=0;
                                                                                                        var WeekEnd_Count_edit_winter_back=0;

                                                                                                        
                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                        var getbothdaysSummer  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(getbothdaysSummer));    
                                                                                                        var WeekDay_Count_edit_summer_both = summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both = summerWeekdayWeekend.weekendCnt;
                                                                                                    
                                                                                                        }else if(isAvailableDayBoth.type=="winter"){
                                                                                                        
                                                                                                        var getbothdaysWinter  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr)); 
                                                                                                    
                                                                                                        var WeekDay_Count_edit_winter_both = winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                        
                                                                                                           
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        var WeekDay_Count_edit_summer_both =  summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both =  summerWeekdayWeekend.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter_both =  winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =  winterWeekdayWeekend.weekendCnt;
                                                                                                        }


                                                                                                        if(isAvailableDay_old.type=="summer"){
                                                                                                               
                                                                                                            var WeekDay_Count_edit_summer_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer_old = WeekEndDays_prev;
                                                                                                        
                                                                                                            }else if(isAvailableDay_old.type=="winter"){
                                                                                                            
                                                                                                            var WeekDay_Count_edit_winter_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter_old = WeekEndDays_prev;
    
                                                                                                            }else if(isAvailableDay_old.type=="both"){
                                                                                                            var summerWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.summer_Arr));
                                                                                                            var winterWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer_old =  summerWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer_old =  summerWeekdayWeekend_old.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter_old =  winterWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter_old =  winterWeekdayWeekend_old.weekendCnt;
                                                                                                            }


                                                                                                            if(isAvailableDay_back.type=="summer"){
                                                                                                                   
                                                                                                                var WeekDay_Count_edit_summer_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_summer_back= WeekEndDays_prev_back;
                                                                                                            
                                                                                                                }else if(isAvailableDay_back.type=="winter"){
                                                                                                               
                                                                                                                var WeekDay_Count_edit_winter_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_winter_back = WeekEndDays_prev_back;
        
                                                                                                                }else if(isAvailableDay_back.type=="both"){
                                                                                                                var summerWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.summer_Arr));
                                                                                                                var winterWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.winter_Arr));
                                                                                                                var WeekDay_Count_edit_summer_back =  summerWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer_back =  summerWeekdayWeekend_back.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter_back =  winterWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter_back =  winterWeekdayWeekend_back.weekendCnt;
                                                                                                                }
                                                                                                            
                                                                                                                var WeekDay_Count_edit_summer = Math.abs(WeekDay_Count_edit_summer_both-(WeekDay_Count_edit_summer_old+WeekDay_Count_edit_summer_back))
                        
                                                                                                                var WeekEnd_Count_edit_summer = Math.abs(WeekEnd_Count_edit_summer_both-(WeekEnd_Count_edit_summer_old+WeekEnd_Count_edit_summer_back));

                                                                                                                var WeekDay_Count_edit_winter =  Math.abs(WeekDay_Count_edit_winter_both-(WeekDay_Count_edit_winter_old+WeekDay_Count_edit_winter_back));
                                                                                                                
                                                                                                                var WeekEnd_Count_edit_winter  = Math.abs(WeekEnd_Count_edit_winter_both-(WeekEnd_Count_edit_winter_old+WeekEnd_Count_edit_winter_back));

                                                                                                    
                                                       

                                                                                                       
        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOfS = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Summer_Sdate, Summer_Edate,anni_month,'summer');
                                                                                                            var bookedDaysOfW = AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, Winter_Sdate, Winter_Edate,anni_month,'winter');
                                                                                                            
                                                                                                            
        
        
                                                                                                        }
                                                                                                        
                                                                                                        else{
        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,WeekDay_Count_edit_summer,WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                        }
        
                                                                                                        let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                       
        
                                                                                                    let updateData = await Booking_Special_Days.update({ Owner_Id: req.body.User_Id, Boat_Id: req.body.Boat_Id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
        
                                                                                                   let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start, req.body.end);
        
                                                                                                    if(MailSend){
        
                                                                                                        res.json({
        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully Updated'
                                                                                                        })
        
                                                                                                    }
        
                                                                                                            
        
                                                                                            }else{
                                                                                                //deactivate  2nd booking 
                                                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                {
                                                                                                    IsActive: true,
                                                                                                    Updated_time: moment(Date.now()),
                                                                                                },
                                                                                                function (err, data) {
    
    
                                                                                                });
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
                                                                                            
                                                                                            
                                                                                            }else{
    
                                                                                                 //deactivate  2nd booking 
                                                                                                 Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                                 {
                                                                                                     IsActive: true,
                                                                                                     Updated_time: moment(Date.now()),
                                                                                                 },
                                                                                                 function (err, data) {
    
    
                                                                                                 });
                                                                                                
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
        
                                                                                            }
        
        
                                                                                         }
                                                                                        
                                                                                        

                                                                                        });
                                                                                    })
                                                                                }
                                                                                else {

                                                                                    //deactivate  2nd booking 
                                                                                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                                        {
                                                                                            IsActive: true,
                                                                                            Updated_time: moment(Date.now()),
                                                                                        },
                                                                                        function (err, data) {


                                                                                        });
                                                                                    //deactivate  2nd booking 
                                                                                    res.json({
                                                                                        status: false,
                                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                                    })
                                                                                }

                                                                            })


                                                                        })



                                                                    });//else inside function owner




                                                                });

                                                            }
                                                            else {
                                                                //deactivate  2nd booking 
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                    {
                                                                        IsActive: true,
                                                                        Updated_time: moment(Date.now()),
                                                                    },
                                                                    function (err, data) {


                                                                    });
                                                                //deactivate  2nd booking                     
                                                                res.json({
                                                                    status: false,
                                                                    message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again'
                                                                })
                                                            } //

                                                            // res.json({
                                                            //     status:false,
                                                            //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                                            // })

                                                        }
                                                    })
                                                })
                                        }



                                    }

                                    if (check_Status = "4" && User_role == "Maintenance") {


                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                            console.log(result.length, 'length')
                                            //  var _Length=result.length;

                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                        if (results == null) {


                                                            //Add 
                                                            console.log('Admin')
                                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                {



                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: Startdate_old,
                                                                    end: end_Date_New,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: Start_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    bgColor: req.body.bgColor,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())

                                                                },

                                                                function (err, data) {
                                                                    //mail

                                                                    const emailState = 'Successfully Edited.';
                                                                    const emailContent = `Dear ${OwnerDetails.First_Name},<p> Your booking  on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}  has been succesfully edited<p>`;
                                                                    const emailContentAdmin = `Dear Adminsistrator <p> The boat  has been successfully edited a maintenance on ${boatDetails.Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"}</p>`
                                                                    const emailDetailName = 'Booking Details'
                                                                    const emailDetails = [
                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
                                                                    ];
                                                                    const emailNameAndLink = {
                                                                        name: 'Login Link',
                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                    }



                                                                    var mailOptionsAdmin = {
                                                                        from: "noreply.smartboatbooking@gmail.com",
                                                                        to: "admin@smartboating.com.au",
                                                                        subject: 'Maintainance Edited',
                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                                    };

                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                                                    });
                                                                    //mail


                                                                    res.json({

                                                                        status: true,
                                                                        message: 'The boat maintenance booking has been successfully Updated'
                                                                    })
                                                                })

                                                        }
                                                        else {
                                                            res.json({

                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                            })

                                                        }



                                                    })
                                                    //Add

                                                })


                                            })

                                        })


                                    }

                                    // special Day
                                    if (specialDayCheck == 1) {
                                        console.log("special day check back to back 3");
                                        const Specialday_id = req.body.Specialday_id;
                                        const objSpecial3 = req.body.Special_Day;



                                        if (User_role == 'Admin')//for Admin
                                        {
                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                console.log(result.length, 'length')
                                                // var _Length=result.length;

                                                Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {

                                                    Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                        Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                            if (results == null) {


                                                                //Add 
                                                                console.log('Admin')
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                                    {


                                                                        Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                        Booking_ID: globalbookingid,
                                                                        Boat_Name: req.body.Boat_Name,
                                                                        Total_DaysBooked: Total_Count,
                                                                        calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                        title: req.body.title,
                                                                        body: req.body.body,
                                                                        start: Startdate_old,
                                                                        end: end_Date_New,
                                                                        start_NoTime: Start_final_withoutTime,
                                                                        end_NoTime: End_final_withoutTime,
                                                                        goingDuration: req.body.goingDuration,
                                                                        comingDuration: req.body.comingDuration,
                                                                        isAllDay: req.body.isAllDay,
                                                                        category: req.body.category,
                                                                        dueDateClass: req.body.dueDateClass,
                                                                        location: req.body.location,
                                                                        attendees: req.body.attendees,
                                                                        recurrenceRule: req.body.recurrenceRule,
                                                                        isPending: req.body.isPending,
                                                                        isFocused: req.body.isFocused,
                                                                        isVisible: req.body.isVisible,
                                                                        isReadOnly: req.body.isReadOnly,
                                                                        isPrivate: req.body.isPrivate,
                                                                        color: req.body.color,
                                                                        bgColor: req.body.bgColor,
                                                                        Is_StandByBooking: req.body.Is_StandByBooking,
                                                                        Check_Status: req.body.Check_Status,
                                                                        commends: req.body.commends,
                                                                        dragBgColor: req.body.dragBgColor,
                                                                        borderColor: req.body.borderColor,
                                                                        customStyle: req.body.customStyle,
                                                                        raw: req.body.raw,
                                                                        state: req.body.state,
                                                                        User_RoleType: req.body.User_RoleType,
                                                                        User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                        Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                        Status: Module_status,
                                                                        IsActive: req.body.IsActive,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now())

                                                                    },

                                                                    function (err, data) {

                                                                       
                                                                        res.json({

                                                                            status: true,
                                                                            message: 'The admin booking has been successfully created'
                                                                        })
                                                                    })


                                                            }
                                                            else {


                                                                //deactivate  2nd booking 
                                                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                    {
                                                                        IsActive: true,
                                                                        Updated_time: moment(Date.now()),
                                                                    },
                                                                    function (err, data) {


                                                                    });
                                                                //deactivate  2nd booking 
                                                                res.json({

                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                })

                                                            }



                                                        })
                                                        //Add
                                                    })

                                                })

                                            })
                                        }

                                        else//For Owner
                                        {




                                            NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                                                .then(OwnerDetails => {

                                                    Schedule.find({ Boat_Id: Boat_id, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(result => {

                                                        console.log(result.length, 'length')
                                                        var _Length = result.length;

                                                        Schedule.findOne({ Boat_Id: Boat_id, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then(result2 => {


                                                            Schedule.findOne({ Boat_Id: Boat_id, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then(results => {

                                                                let allDaysBookedBacktoCheckThree = getDaysBetweenDates(start_Date_New, end_Date_New);

                                                                let arrayofBookCheckThree = [];

                                                                allDaysBookedBacktoCheckThree.map((date) => arrayofBookCheckThree.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

                                                                Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $or: arrayofBookCheckThree }).then(results =>{



                                                               // Schedule.findOne({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, isBookingCancelled: false, $and: [{ start: { $lte: End_final_withoutTime } }, { end: { $gte: End_final_withoutTime } }] }).then(results => {
                                                                    if (results == null) {






                                                                        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                                                                            var SummerWeekdays = response.Summer_WeekDays;
                                                                            var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                            var WinterWeekDays = response.Winter_WeekDays;
                                                                            var WinterweekendDays = response.Winter_WeekEndDays;

                                                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                let stopExecution = { stop: false }
                                                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                                                                                    
                                                                                    console.log(error)
                                                                                    stopExecution = error
                                                                                })
    
                                                                               
                                                                                if (stopExecution.stop) {
                                                                                    return res.json({ status: true, message: stopExecution.error })
                                                                                }
    
                                                                                let isNextDaysError = false
                                                                                    let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id,true).catch((error) => {
                                                                                        isNextDaysError = true
                                                                                        return res.json(error)
                                                                                    })
    
    
                                                                                    if (isNextDaysError) return
    
                                                                                    var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                    
                                                                                    var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
    
                                                                                    let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                    if(element){
    
                                                                                        var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                        var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                    }else{
    
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'Consecutive days for this boat is Empty'
                                                                                        })
    
                                                                                    }
                                                                                    CheckSpecialDaysExist(Boat_id, Owner_id, objSpecial3,scheduleid).then(async function (myflag) {
                                                                                        if (myflag == 0) {
                                                
                                                                                                      
                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                                
                                                                                        if(SummerConsecutiveDays>=Total_Count){
                                                
                                                                                            //count of weekday and week end
                                                
                                                                                            if (PendingSummerWeekdays >= WeekDay_Count && PendingSummerWeekEnddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
                                                
                                                                                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                             
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                if(updateSchedule){
                                                
                                                                                                    objSpecial3.map(function (objs) {
                                                                                                        var specialday = objs.special_date;
                                                                                                        var Specialdayid = objs._id;
                                                                                                        var Start_final = moment(specialday);
                                                                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                     
                                                                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                        if (addspecial == true) {
                                                                                                            console.log('successs')
                                                                                                        }
                                                                                                        else {
                                                                                                            console.log('fail')
                                                                                                        }
                                                                                                    })
                                                
                                                                                                  
                                                
                                                                                                }
                                                                                                
                                                
                                                                                                
                                                
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                                
                                                
                                                                                                if(MailSend){
                                                
                                                                                                    res.json({
                                                
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
                                                
                                                                                                }
                                                
                                                                                                
                                                
                                                                                                
                                                                                             }
                                                                                            else{
                                                
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                
                                                                                            }
                                                
                                                                                        }else{
                                                
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
                                                
                                                                                        }
                                                
                                                                                    }
                                                
                                                                                                                                                            
                                                                                   else if(isAvailableDay.type=="winter"){

                                                                                    var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var getBookedyear = new Date(req.body.start);
                                                                                            var YearOne = getBookedyear.getFullYear();
                                                                                            var MonthOne = getBookedyear.getMonth()+1;
                                                                                            var nextYearBook = (parseInt(YearOne)+1);
                                                                                            if(MonthOne<anni_month)
                                                                                            var exp_year = ""+YearOne+anni_month;
                                                                                            else
                                                                                            var exp_year =""+nextYearBook+anni_month;
                                                
                                                                                        if(WinterConsecutiveDays>=Total_Count){
                                                
                                                                                            //count of weekday and week end
                                                
                                                                                            if (PendingWinterWeekdays >= WeekDay_Count && PendingWinterWeekenddays >= WeekEnd_Count){
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
                                                
                                                                                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                               
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,"summer");
                                                                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                if(updateSchedule){
                                                                                                    objSpecial3.map(function (objs) {
                                                                                                        var specialday = objs.special_date;
                                                                                                        var Specialdayid = objs._id;
                                                                                                        var Start_final = moment(specialday);
                                                                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime)
                                                                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                        if (addspecial == true) {
                                                                                                            console.log('successs')
                                                                                                        }
                                                                                                        else {
                                                                                                            console.log('fail')
                                                                                                        }
                                                                                                    })
                                                
                                                                                                    
                                                
                                                                                                }
                                                                                                
                                                
                                                                                                
                                                
                                                                                               let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                                
                                                                                                if(MailSend){
                                                
                                                                                                    res.json({
                                                
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully Updated'
                                                                                                    })
                                                
                                                                                                }
                                                
                                                                                                
                                                
                                                                                                
                                                                                             }
                                                                                            else{
                                                
                                                                                                res.json({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                                })
                                                
                                                                                            }
                                                
                                                                                        }else{
                                                
                                                                                            res.json({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
                                                
                                                                                        }
                                                
                                                                                    }
                                                
                                                        
                                                                                 else if(isAvailableDay.type=="both"){
                                                                                   
                                                                                    if(isAvailableDay.bookingType == "Summer booking")
                                                                                    var consecutiveCount = SummerConsecutiveDays;
                                                                                    else
                                                                                    var consecutiveCount = WinterConsecutiveDays;
                                                
                                                                                    if(consecutiveCount>=Total_Count){
                                                
                                                                                    
                                                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                    
                                                                                    if ((PendingWinterWeekdays >= winterWeekdayWeekend.weekdaycnt && PendingWinterWeekenddays >= winterWeekdayWeekend.weekendCnt)&&(PendingSummerWeekdays >= summerWeekdayWeekend.weekdaycnt && PendingSummerWeekEnddays >= summerWeekdayWeekend.weekendCnt)){
                                                
                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {
                                                
                                                                                                Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                            
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                            });
                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {
                                                
                                                                                                    Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                    Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                
                                                
                                                                                                });
                                                
                                                                                                var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                
                                                                                                var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]

                                                                                                let stopExecutionboth = { stop: false }
                                                                                                        let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,req.body.end).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecutionboth = error
                                                                                                        })


                                                                                                        if (stopExecutionboth.stop) {
                                                                                                            return res.json({ status: true, message: stopExecutionboth.error })
                                                                                                        }

                                                                                                        let stopExecution_old = { stop: false }
                                                                                                        let isAvailableDay_old = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,Startdate_old,Enddate_old).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_old = error
                                                                                                        })


                                                                                                        if (stopExecution_old.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_old.error })
                                                                                                        }

                                                                                                        let stopExecution_back = { stop: false }
                                                                                                        let isAvailableDay_back = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,bactobackstart,backtobackend).catch((error) => {
                                                                                                            
                                                                                                            console.log(error)
                                                                                                            stopExecution_back = error
                                                                                                        })


                                                                                                        if (stopExecution_back.stop) {
                                                                                                            return res.json({ status: true, message: stopExecution_back.error })
                                                                                                        }

                                                                                                        var WeekDay_Count_edit_summer_both =0;
                                                                                                        var WeekEnd_Count_edit_summer_both=0;
                                                                                                        var WeekDay_Count_edit_winter_both=0;
                                                                                                        var WeekEnd_Count_edit_winter_both=0;

                                                                                                        var WeekDay_Count_edit_summer_old =0;
                                                                                                        var WeekEnd_Count_edit_summer_old=0;
                                                                                                        var WeekDay_Count_edit_winter_old=0;
                                                                                                        var WeekEnd_Count_edit_winter_old=0;

                                                                                                        var WeekDay_Count_edit_summer_back =0;
                                                                                                        var WeekEnd_Count_edit_summer_back=0;
                                                                                                        var WeekDay_Count_edit_winter_back=0;
                                                                                                        var WeekEnd_Count_edit_winter_back=0;

                                                                                                        
                                                                                                        if(isAvailableDayBoth.type=="summer"){
                                                                                                        var getbothdaysSummer  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(getbothdaysSummer));    
                                                                                                        var WeekDay_Count_edit_summer_both = summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both = summerWeekdayWeekend.weekendCnt;
                                                                                                    
                                                                                                        }else if(isAvailableDayBoth.type=="winter"){
                                                                                                        
                                                                                                        var getbothdaysWinter  = getDaysBetweenDates(Startdate_old,req.body.end);
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr)); 
                                                                                                    
                                                                                                        var WeekDay_Count_edit_winter_both = winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =winterWeekdayWeekend.weekendCnt;

                                                                                                        }else if(isAvailableDayBoth.type=="both"){
                                                                                                        
                                                                                                           
                                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.summer_Arr));
                                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayBoth.winter_Arr));
                                                                                                        var WeekDay_Count_edit_summer_both =  summerWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_summer_both =  summerWeekdayWeekend.weekendCnt;
                                                                                                        var WeekDay_Count_edit_winter_both =  winterWeekdayWeekend.weekdaycnt;
                                                                                                        var WeekEnd_Count_edit_winter_both =  winterWeekdayWeekend.weekendCnt;
                                                                                                        }


                                                                                                        if(isAvailableDay_old.type=="summer"){
                                                                                                               
                                                                                                            var WeekDay_Count_edit_summer_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_summer_old = WeekEndDays_prev;
                                                                                                        
                                                                                                            }else if(isAvailableDay_old.type=="winter"){
                                                                                                            
                                                                                                            var WeekDay_Count_edit_winter_old = Weekdays_prev;
                                                                                                            var WeekEnd_Count_edit_winter_old = WeekEndDays_prev;
    
                                                                                                            }else if(isAvailableDay_old.type=="both"){
                                                                                                            var summerWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.summer_Arr));
                                                                                                            var winterWeekdayWeekend_old = JSON.parse(CheckDaynames(isAvailableDay_old.winter_Arr));
                                                                                                            var WeekDay_Count_edit_summer_old =  summerWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_summer_old =  summerWeekdayWeekend_old.weekendCnt;
                                                                                                            var WeekDay_Count_edit_winter_old =  winterWeekdayWeekend_old.weekdaycnt;
                                                                                                            var WeekEnd_Count_edit_winter_old =  winterWeekdayWeekend_old.weekendCnt;
                                                                                                            }


                                                                                                            if(isAvailableDay_back.type=="summer"){
                                                                                                                   
                                                                                                                var WeekDay_Count_edit_summer_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_summer_back= WeekEndDays_prev_back;
                                                                                                            
                                                                                                                }else if(isAvailableDay_back.type=="winter"){
                                                                                                               
                                                                                                                var WeekDay_Count_edit_winter_back = Weekdays_prev_back;
                                                                                                                var WeekEnd_Count_edit_winter_back = WeekEndDays_prev_back;
        
                                                                                                                }else if(isAvailableDay_back.type=="both"){
                                                                                                                var summerWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.summer_Arr));
                                                                                                                var winterWeekdayWeekend_back = JSON.parse(CheckDaynames(isAvailableDay_back.winter_Arr));
                                                                                                                var WeekDay_Count_edit_summer_back =  summerWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_summer_back =  summerWeekdayWeekend_back.weekendCnt;
                                                                                                                var WeekDay_Count_edit_winter_back =  winterWeekdayWeekend_back.weekdaycnt;
                                                                                                                var WeekEnd_Count_edit_winter_back =  winterWeekdayWeekend_back.weekendCnt;
                                                                                                                }
                                                                                                            
                                                                                                                var WeekDay_Count_edit_summer = Math.abs(WeekDay_Count_edit_summer_both-(WeekDay_Count_edit_summer_old+WeekDay_Count_edit_summer_back))
                        
                                                                                                                var WeekEnd_Count_edit_summer = Math.abs(WeekEnd_Count_edit_summer_both-(WeekEnd_Count_edit_summer_old+WeekEnd_Count_edit_summer_back));

                                                                                                                var WeekDay_Count_edit_winter =  Math.abs(WeekDay_Count_edit_winter_both-(WeekDay_Count_edit_winter_old+WeekDay_Count_edit_winter_back));
                                                                                                                
                                                                                                                var WeekEnd_Count_edit_winter  = Math.abs(WeekEnd_Count_edit_winter_both-(WeekEnd_Count_edit_winter_old+WeekEnd_Count_edit_winter_back));

                                                                                                    
                                                                                                         if(MonthBookingStatus ==1){
                                                                                                    
                                                                                                    var bookedDaysOf =  AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    
                                                
                                                
                                                                                                }
                                                                                                
                                                                                                else{
                                                
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays, WeekDay_Count_edit_summer, WeekEnd_Count_edit_summer,exp_year,"summer")
                                                                                                    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  WeekDay_Count_edit_winter, WeekEnd_Count_edit_winter,exp_year,"winter")
                                                                                                }
                                                
                                                                                                let updateSchedule = await UpdateScheduleEdit(scheduleid,globalbookingid,req.body,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,Startdate_old,end_Date_New);
                                                                                                if(updateSchedule){
                                                
                                                                                                    objSpecial3.map(function (objs) {
                                                                                                        var specialday = objs.special_date;
                                                                                                        var Specialdayid = objs._id;
                                                                                                        var Start_final = moment(specialday);
                                                                                                        var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                        console.log(Start_final_withoutTime)
                                                                                                        var addspecial = AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                        if (addspecial == true) {
                                                                                                            console.log('successs')
                                                                                                        }
                                                                                                        else {
                                                                                                            console.log('fail')
                                                                                                        }
                                                                                                    })
                                                
                                                                                               
                                                
                                                                                            }
                                                                                            
                                                
                                                                                            
                                                
                                                                                           let MailSend   = await SendUpdateMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,req.body.start,req.body.end);
                                                
                                                                                            if(MailSend){
                                                
                                                                                                res.json({
                                                
                                                                                                    status: true,
                                                                                                    message: 'The booking has been successfully Updated'
                                                                                                })
                                                
                                                                                            }
                                                
                                                                                                    
                                                
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds your allocation limit. Please try to create a booking with fewer days'
                                                                                        })
                                                
                                                                                    }
                                                                                    
                                                                                    
                                                                                    }else{
                                                                                        res.json({
                                                                                            status: false,
                                                                                            message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                        })
                                                
                                                                                    }
                                                
                                                
                                                                                 }
                                                
                                                                                        }else{
                                                
                                                                                            res.json({
                                                                                                status: true,
                                                                                                message: 'You Have Already Booked Special Day'
                                                                                            })
                                                
                                                                                        }
                                                                                    });
    
                                                                               
                                                                            });
                                                                        })



                                                                    }
                                                                    else {

                                                                        //deactivate  2nd booking 
                                                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Back_to_Back_Sheduler_id) },
                                                                            {
                                                                                IsActive: true,
                                                                                Updated_time: moment(Date.now()),
                                                                            },
                                                                            function (err, data) {


                                                                            });
                                                                        //deactivate  2nd booking 
                                                                        res.json({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.'
                                                                        })
                                                                    }




                                                                })


                                                            })



                                                        });//else inside function owner




                                                    });
                                                })
                                        }



                                    }

                                    //special Day


                                }
                                else {
                                    res.json({
                                        status: false,
                                        message: 'A booking cannot be created for a previous day'
                                    })
                                }
                            }
                            else {

                                res.json({
                                    status: false,
                                    message: 'Boat Selected is not Active'
                                })

                            }

                        });


                })
            })
        }

    } catch (error) {
        console.log(error)
        return res.json(error)
    }

};


//View
const ViewAllSchedule = async (req, res) => {


    return new Promise(async (resolve, reject) => {

        let response = await Schedule.find({ IsActive: true }).catch((error) => {
            console.log(error)
            return reject({ status: true, message: 'Something went wrong try again.' })
        })

        let SpecialDays = await Add_Special_Days.find({ IsActive: true }).catch((error) => {
            console.log(error)
            return reject({ status: true, message: 'Something went wrong try again.' })

        })

        /*

      check if any booking have isNextDayBookingIncluded which is not a isBookingPending 
      if any active booking found get that boat id and remove all pending booking from response

       */

        let documentIds = []

        response.map(async (booking) => {


            /*

          if a booking's included in nexbookingday and not a pending booking then it is a active booking .
          if a boat have active booking that include next day booking  remove all pending and canceled booking
           also check if it is the same day as the pending or canceled bookig so it will make a conflict if there is muliple
          active nextday booking
          
       */

            if (!booking.isBookingPending && booking.isNextDayBookingIncluded) {
                //"booking" is active booking


                response.map((schedule) => {

                    //"schedule" is pending or canceled booking

                    //checking if any of the active bookings day included in pending or canceled booking

                    let allActiveBookedDays = getDaysBetweenDates(booking.start, booking.end)
                    let allPendingOrCanceledBookedDays = getDaysBetweenDates(schedule.start, schedule.end)

                    let isActiveBookingIsSameAsPendingOrCanceledBooking = false

                    allActiveBookedDays.map((activeDay) => {
                        if (allPendingOrCanceledBookedDays.includes(activeDay)) {
                            isActiveBookingIsSameAsPendingOrCanceledBooking = true
                        }
                    })

                    //remove pending and canceled day from response only if the active booking day is include any of the pending or canceled booking

                    if (isActiveBookingIsSameAsPendingOrCanceledBooking) {

                        if (schedule.Boat_Id.toString() === booking.Boat_Id.toString() && schedule.isBookingPending || schedule.Boat_Id.toString() === booking.Boat_Id.toString() && schedule.isBookingCancelled) documentIds.push(schedule._id)
                    }

                })
            }
        })


        newResponse = response.filter((booking) => !documentIds.includes(booking._id))

        // get all standby booking and concat it to newresponse which include normal bookings and next day bookings
        let allStandByBookings = await AddStandByBooking.find({ BookingStatus: { $ne: "Accepted" }, showThisBookingInCalendar: true }).catch((error) => {
            console.log(error);
            return reject({ status: false, message: "Something went wrong." });
        });

        newResponse = newResponse.concat(allStandByBookings);



        //get all owner canceled stand by booking 

        let canceledStandByBookings = await OwnerStandByCancelModel.find().catch((error) => {
            console.log(error);
            return reject({ status: false, message: "Something went wrong." });
        });

        newResponse = newResponse.concat(canceledStandByBookings);



        return resolve({ status: true, response: newResponse, SpecialDays })



    }).then((response) => {
        return res.json(response)
    }).catch((error) => {
        return res.json(error)
    })

    // Schedule.find({IsActive:true})
    //     .then(response => {
    //         Add_Special_Days.find({IsActive:true})
    //         .then(SpecialDays => {                         
    //         res.json({
    //             status:true,
    //             response,SpecialDays
    //         })
    //     })
    // })
    //     .catch(error => {
    //         res.json({
    //             message: "No Data"
    //         })
    //     })
}
const ViewAllScheduleActiveAndNonActive = (req, res, next) => {

    Schedule.find()
        .then(response => {
            Add_Special_Days.find()
                .then(SpecialDays => {
                    res.json({
                        status: true,
                        response, SpecialDays
                    })
                })
        })
        .catch(error => {
            res.json({
                message: "No Data"
            })
        })
}
//start......................

function getDaysInMonth_Sheduler(tmp1) {

    var public_sheduler_totaldaysbased = [];
    var days = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
    var monthNames = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"];
    var monthNames_Number = ["1", "2", "3", "4", "5", "6",
        "7", "8", "9", "10", "11", "12"];

    var tmp1_StartDate = new Date(tmp1.start);
    var tmp2_EndDate = new Date(tmp1.end);


    var tmp_month = tmp1_StartDate.getMonth();
    var tmp_year = tmp1_StartDate.getFullYear();
    var tmp_Date = tmp1_StartDate.getDate();

    var date = new Date(tmp_year, tmp_month, tmp_Date);

    do {

        var obj = Object();
        var tmp_dt = new Date(date);
        // obj.fullofTheDate = tmp_dt;
        //   obj.day = tmp_dt.getDate();
        //   obj.month = monthNames[tmp_dt.getMonth()];
        //   obj.month_Number = monthNames_Number[tmp_dt.getMonth()];
        //   obj.year = tmp_dt.getFullYear(); 
        obj.days = days[tmp_dt.getDay()]

        public_sheduler_totaldaysbased.push(obj);

        date.setDate(date.getDate() + 1);
        var tmp_Add_Date = new Date(date);

    } while (tmp_Add_Date <= tmp2_EndDate)

    return public_sheduler_totaldaysbased;

};

///........................


//Function for Delete AdminBooking 
const DeleteSchedule = async (req, res, next) => {


    var Roles = req.body.User_RoleType;
    var scheduleid = req.body._id;


    /* checking it is a previous day cancelation */
     var mydateAus = new Date();
    var resultDate = momentTimezone(mydateAus).tz(process.env.TIME_ZONE).format();
    var AusToday = moment(resultDate);
    AusToday.startOf('day');
   
    
  
    let getDatesOfcancelation = await Schedule.findOne({ _id: scheduleid, end: { $lt:AusToday } }).catch((error) => console.log(error));
    if (getDatesOfcancelation) {

        return res.json({
            status: false,
            message: 'Past booking cannot cancel'
        })

    }

    if(Roles == "Owner"){

        let getOwnerStatus = await NewOwners.findOne({_id:mongoose.Types.ObjectId(req.body.Owner_Id)},{Status:1}).catch((error)=> console.log(error));
    if((getOwnerStatus.Status == 2)||(getOwnerStatus.Status == 0))
    return res.json({
       status: false,
       message: 'Permission Denied'
   }) 


    }

    

    let standByDatesOfcancelation = await AddStandByBooking.findOne({ _id: scheduleid, end: { $lt: new Date() } }).catch((error) => console.log(error));
    if (standByDatesOfcancelation) {

        return res.json({
            status: false,
            message: 'Past booking cannot cancel'
        })

    }

    /* end checking */
    const Validaterules = await cancelrues(req.body);
    if (Validaterules.status == false) { return res.json({ status: false, message: "Permission Denied" }); }


    // cancel stand by booking in pending state

    // check if it is a stand by booking id is passed

    let standByBooking = await AddStandByBooking.findOne({ _id: scheduleid }).catch((error) => console.log(error));

    // if this exist that means user is trying to cancel a stand by booking its pending state

    if (standByBooking) {

        console.log("entered first stanbook block");



        //get total day saved in db and real total days differnce . differnce is how many stand booking done

        const totalDaysInDB = standByBooking.TotalDay_Count;
        const realTotalDays = moment(new Date(standByBooking.end)).diff(moment(new Date(standByBooking.start)), "days") + 1;
        const standByBookingDaysCount = realTotalDays - totalDaysInDB;
        const allBookedDays = getDaysBetweenDates(standByBooking.start, standByBooking.end);

        console.log("betweenDates" + allBookedDays);

        const standByBookingDays = [];

        let standByBookingCounter = 0;
        while (standByBookingCounter < standByBookingDaysCount) {
            standByBookingDays.push(allBookedDays[standByBookingCounter])
            standByBookingCounter++
        }

        console.log(standByBookingDays, "standByBookingDaysOnee")

        const ValidateStandby = await cancelStandbyrules(Roles, standByBooking.User_Id, req.body.curntuser, standByBooking.BookingStatus);
        if (ValidateStandby.status == false) { return res.json({ status: false, message: "Permission Denied" }); }

        // owner canceled data update


        /* check boat is active*/

        let checkactive = Boats.findOne({ _id: mongoose.Types.ObjectId(standByBooking.Boat_Id), Boat_Status: 1 }).catch((error) => console.log(error));
        if (!checkactive) {

            return res.json({
                status: false,
                message: 'Boat is not active'
            })

        }

        /* check boat is suspended */

        let suspendcheck = await manageBoat.findOne({ Boat_Id: mongoose.Types.ObjectId(standByBooking.Boat_Id), Owner_Id: mongoose.Types.ObjectId(standByBooking.User_Id) }).catch((error) => console.log(error));
        if (suspendcheck.Block == false)
            return res.json({
                status: false,
                message: 'Suspended'
            })

        /* let standbyStart = new Date(standByBooking.start);
         let standbyEnd = standbyStart.setDate(standbyStart.getDate() +1);
         standbyEnd = new Date(standbyEnd).toISOString();*/

        if ((standByBookingDays.length) == 1) {
            var standbybookStart = standByBooking.start;
            var standBYEND = standByBooking.start;
            var standarr1 =moment(standByBooking.start);
            var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));    
        }
        else {

            var standbybookStart = standByBooking.start;
            var standarr1 =moment(standByBooking.start);
            if (standByBookingDays[1] != undefined){
                var getendtimeStand = new Date(standByBooking.end);
                var result_time = getendtimeStand.getUTCHours();
                var standbyEnd = new Date(standByBookingDays[1]);
                standbyEnd.setDate(standbyEnd.getDate() + 1);
                var standBYEND = new Date(new Date(standbyEnd).setUTCHours(result_time, 00, 00, 00));
                var stand_arr2 = moment(standByBookingDays[1]);
                var standbyWithouttimeEnd = new Date(new Date(stand_arr2).setUTCHours(13, 00, 00, 00));    
             
                //var standbyEnd = standByBookingDays[1];
            }
                
            else{

                var standBYEND = standByBooking.start;
                var standarr1 =moment(standByBooking.start);
                var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));    

            }

               


        }
        console.log("FirstOwnerCancel");

        await new OwnerStandByCancelModel({
            Boat_Name: standByBooking.Boat_Name,
            calendarId: standByBooking.calendarId,
            title: "Owner (Canceled stand by booking)",
            body: standByBooking.body,
            start: standbybookStart,
            end: standBYEND,
            start_NoTime: new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00)),
            end_NoTime: standbyWithouttimeEnd,
            goingDuration: standByBooking.goingDuration,
            comingDuration: standByBooking.comingDuration,
            category: standByBooking.category,
            dueDateClass: standByBooking.dueDateClass,
            location: standByBooking.location,
            attendees: standByBooking.attendees,
            recurrenceRule: standByBooking.recurrenceRule,
            color: standByBooking.color,
            bgColor: standByBooking.bgColor,
            dragBgColor: standByBooking.dragBgColor,
            borderColor: standByBooking.borderColor,
            customStyle: standByBooking.customStyle,
            raw: standByBooking.raw,
            User_RoleType: standByBooking.User_RoleType,
            Status: standByBooking.Status,
            Check_Status: standByBooking.Check_Status,
            Check_Month: standByBooking.Check_Month,
            Booking_ID: standByBooking.Booking_ID,
            commends: standByBooking.commends,
            LOA: standByBooking.LOA,
            Approved_LOA: standByBooking.Approved_LOA,
            BookingStatus: standByBooking.BookingStatus,
            Cancelled_Status: standByBooking.Cancelled_Status,
            Total_DaysBooked: standByBooking.TotalDay_Count,
            WeekDay_Count: standByBooking.WeekDay_Count,
            WeekEnd_Count: standByBooking.WeekEnd_Count,
            Total_DaysBooked_Reassign: standByBooking.Total_DaysBooked_Reassign,
            WeekDay_Count_Reassign: standByBooking.WeekDay_Count_Reassign,
            WeekEnd_Count_Reassign: standByBooking.WeekEnd_Count_Reassign,
            Booking_Type: standByBooking.Booking_Type,
            WeekDay_Count_Edit: standByBooking.WeekDay_Count_Edit,
            WeekEnd_Count_Edit: standByBooking.WeekEnd_Count_Edit,
            Total_Edit_Loa: standByBooking.Total_Edit_Loa,
            PartialCancellation_Status: standByBooking.PartialCancellation_Status,
            start_CancelledDate: standByBooking.start_CancelledDate,
            end_CancelledDate: standByBooking.end_CancelledDate,
            cancaledDays: standByBooking.cancaledDays,
            isBookingPending: standByBooking.isBookingPending,
            isBookingCancelled: standByBooking.isBookingCancelled,
            isBookingAccepted: standByBooking.isBookingAccepted,
            isNextDayBookingIncluded: standByBooking.isNextDayBookingIncluded,
            isStandByBookingIncluded: standByBooking.isStandByBookingIncluded,
            Boat_Id: standByBooking.Boat_Id,
            isAllDay: standByBooking.isAllDay,
            isPending: standByBooking.isPending,
            isFocused: standByBooking.isFocused,
            isVisible: standByBooking.isVisible,
            isReadOnly: standByBooking.isReadOnly,
            isPrivate: standByBooking.isPrivate,
            Is_StandByBooking: standByBooking.Is_StandByBooking,
            User_Id: standByBooking.User_Id,
            Admin_Id: standByBooking.Admin_Id,
            IsActive: standByBooking.IsActive,
            standByBookingId: standByBooking._id

        }).save().catch((error) => console.log(error))



        //update stand by booking cancel status
        await AddStandByBooking.updateOne({ _id: standByBooking._id }, { isOrginalBookingCanceled: true, showThisBookingInCalendar: false }).catch((error) => console.log(error));

        return res.json({
            status: true,
            Loa: 0,
            Weekday: 0,
            WeekEnd: 0,
            message: 'Schedule Details Deleted Successfully'
        })
    }

    //* Delete From Special Day booking */

    let DeleteSpecial = await Booking_Special_Days.update({Scheduleid:mongoose.Types.ObjectId(scheduleid), IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));


    Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(async (response) => {

        if (response) {

            var Boat_id = response.Boat_Id;
            var Owner_id = response.User_Id;
            console.log(Owner_id, 'hey')
            var start_Date = response.start;
            var Start_final = moment(start_Date);
            console.log(start_Date)
            console.log(Start_final)
            var Start_final_withoutTime = Start_final.startOf('day');
            var end_Date = response.end;
            var End_final = moment(end_Date);
            var End_final_withoutTime = End_final.startOf('day');
            console.log(Start_final_withoutTime)
            console.log(End_final_withoutTime)
            var RoleAssigned = response.User_RoleType;
            var Cancel_date = moment();
            console.log(Cancel_date)
            var dif = moment.duration(Start_final.diff(Cancel_date));
            console.log(dif.asHours());
            var Hrdif = Math.round(dif.asHours());
            var Totalday_prev = response.Total_DaysBooked_Reassign;

            //Jibin

            // var Weekdays_prev=response.WeekDay_Count_Reassign;
            // var WeekEndDays_prev=response.WeekEnd_Count_Reassign;

            //Jibin

            let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
            //console.log(AnniversaryDate,"AnniversaryDate");
            let getanniversary = new Date(AnniversaryDate.Launch_Date);
             let anni_year =  getanniversary.getFullYear();
            let anni_month = (getanniversary.getMonth())+1;

            var startyear = new Date(Start_final_withoutTime);
            var Start_Month = (startyear.getMonth(startyear))+1;

            var endyear = new Date(End_final_withoutTime);
            var End_Month = (endyear.getMonth(endyear))+1;
            if((Start_Month<anni_month)&&(End_Month>=anni_month) || (Start_Month>anni_month)&&(End_Month==anni_month)){

                var MonthBookingStatus =1;

              
            }
           
            else{

                var MonthBookingStatus =0;
                var getBookedyear = new Date(start_Date);
                var YearOne = getBookedyear.getFullYear();
                var MonthOne = getBookedyear.getMonth()+1;
                var nextYearBook = (parseInt(YearOne)+1);
                if(MonthOne<anni_month)
                var exp_year = ""+YearOne+anni_month;
                else
                var exp_year =""+nextYearBook+anni_month;

            }
           
           

           
            //Irfan

         
            let allBookingDaysBetweenStartAndEnd = getDaysBetweenDates(response.start, response.end);
            console.log(allBookingDaysBetweenStartAndEnd);

            let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(allBookingDaysBetweenStartAndEnd);

            var Weekdays_prev = numberOfWeekDays;
            var WeekEndDays_prev = numberOfWeekEnds;



          
            // var Weekdays_prev = response.WeekDay_Count; 
            // var WeekEndDays_prev = response.WeekEnd_Count;

            if (response.isStandByBookingIncluded) {

                //get stand by booking and get total weekday and weekend between start and end date and reduce it from weekday and weekend
                // of that field to get actual stand by booking week day and weekend

                let standByBooking = await AddStandByBooking.findOne({ _id: response.standByBookingId }).catch((error) => console.log(error));

                if (standByBooking) {

                    console.log("adminreject");

                    let allBookingDatesOfStandByBooking = getDaysBetweenDates(standByBooking.start, standByBooking.end);

                    let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(allBookingDatesOfStandByBooking);

                    var standByBookingWeekDays = numberOfWeekDays - standByBooking.WeekDay_Count
                    var standByBookingWeekendDays = numberOfWeekEnds - standByBooking.WeekEnd_Count;

                   

                    Weekdays_prev -= standByBookingWeekDays;
                    WeekEndDays_prev -= standByBookingWeekendDays;



                    //create a document in ownerStandByCancel model

                    //determine stand by booking days

                    //get total day saved in db and real total days differnce . differnce is how many stand booking done

                    const totalDaysInDB = response.Total_DaysBooked;
                    const realTotalDays = moment(new Date(end_Date)).diff(moment(new Date(start_Date)), "days") + 1;
                    const standByBookingDaysCount = realTotalDays - totalDaysInDB;
                    const allBookedDays = getDaysBetweenDates(start_Date, end_Date);

                    const standByBookingDays = [];

                    let standByBookingCounter = 0;
                    while (standByBookingCounter < standByBookingDaysCount) {
                        standByBookingDays.push(allBookedDays[standByBookingCounter])
                        standByBookingCounter++
                    }

                    console.log(standByBookingDays, "standByBookingDays")

                    if ((standByBookingDays.length) == 1) {
                        var standbybookStart = standByBooking.start;
                        var standBYEND = standByBooking.start;
                        var standarr1 =moment(standByBooking.start);
                        var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));  
                    }
                    else {

                        var standbybookStart = standByBooking.start;
                        var standarr1 =moment(standByBooking.start);
                        if (standByBookingDays[1] != undefined){
                            var getendtimeStand = new Date(standByBooking.end);
                            var result_time = getendtimeStand.getUTCHours();
                            var standbyEnd = new Date(standByBookingDays[1]);
                            standbyEnd.setDate(standbyEnd.getDate() + 1);
                            var standBYEND = new Date(new Date(standbyEnd).setUTCHours(result_time, 00, 00, 00));
                            var stand_arr2 = moment(standByBookingDays[1]);
                            var standbyWithouttimeEnd = new Date(new Date(stand_arr2).setUTCHours(13, 00, 00, 00));    
                         
                            //var standbyEnd = standByBookingDays[1];
                        }
                            
                        else{
            
                            var standBYEND = standByBooking.start;
                            var standarr1 =moment(standByBooking.start);
                            var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));    
            
                        }

                    }

                    /* let standbyStart = new Date(standByBooking.start);
                     let standbyEnd = standbyStart.setDate(standbyStart.getDate() +1);
                     standbyEnd = new Date(standbyEnd).toISOString();*/

                    console.log("ownercancelSecond");

                    await new OwnerStandByCancelModel({
                        Boat_Name: response.Boat_Name,
                        calendarId: response.calendarId,
                        title: "Owner (Canceled stand by booking)",
                        body: response.body,
                        start: new Date(standbybookStart),
                        end: new Date(standbyEnd),
                        start_NoTime: new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00)),
                        end_NoTime: standbyWithouttimeEnd,
                        goingDuration: response.goingDuration,
                        comingDuration: response.comingDuration,
                        category: response.category,
                        dueDateClass: response.dueDateClass,
                        location: response.location,
                        attendees: response.attendees,
                        recurrenceRule: response.recurrenceRule,
                        color: response.color,
                        bgColor: response.bgColor,
                        dragBgColor: response.dragBgColor,
                        borderColor: response.borderColor,
                        customStyle: response.customStyle,
                        raw: response.raw,
                        User_RoleType: response.User_RoleType,
                        Status: response.Status,
                        Check_Status: response.Check_Status,
                        Check_Month: response.Check_Month,
                        Booking_ID: response.Booking_ID,
                        commends: response.commends,
                        LOA: response.LOA,
                        Approved_LOA: response.Approved_LOA,
                        BookingStatus: response.BookingStatus,
                        Cancelled_Status: response.Cancelled_Status,
                        Total_DaysBooked: response.TotalDay_Count,
                        WeekDay_Count: response.WeekDay_Count,
                        WeekEnd_Count: response.WeekEnd_Count,
                        Total_DaysBooked_Reassign: response.Total_DaysBooked_Reassign,
                        WeekDay_Count_Reassign: response.WeekDay_Count_Reassign,
                        WeekEnd_Count_Reassign: response.WeekEnd_Count_Reassign,
                        Booking_Type: response.Booking_Type,
                        WeekDay_Count_Edit: response.WeekDay_Count_Edit,
                        WeekEnd_Count_Edit: response.WeekEnd_Count_Edit,
                        Total_Edit_Loa: response.Total_Edit_Loa,
                        PartialCancellation_Status: response.PartialCancellation_Status,
                        start_CancelledDate: response.start_CancelledDate,
                        end_CancelledDate: response.end_CancelledDate,
                        cancaledDays: response.cancaledDays,
                        isBookingPending: response.isBookingPending,
                        isBookingCancelled: response.isBookingCancelled,
                        isBookingAccepted: response.isBookingAccepted,
                        isNextDayBookingIncluded: response.isNextDayBookingIncluded,
                        isStandByBookingIncluded: response.isStandByBookingIncluded,
                        Boat_Id: response.Boat_Id,
                        isAllDay: response.isAllDay,
                        isPending: response.isPending,
                        isFocused: response.isFocused,
                        isVisible: response.isVisible,
                        isReadOnly: response.isReadOnly,
                        isPrivate: response.isPrivate,
                        Is_StandByBooking: response.Is_StandByBooking,
                        User_Id: response.User_Id,
                        Admin_Id: response.Admin_Id,
                        IsActive: response.IsActive,
                        standByBookingId: response._id

                    }).save().catch((error) => console.log(error))

                    //update stand by booking cancel status






                    await AddStandByBooking.updateOne({ _id: standByBooking._id }, { isOrginalBookingCanceled: true, showThisBookingInCalendar: false }).catch((error) => console.log(error));


                }




            }



            console.log(Weekdays_prev, "Weekdays_prev");
            console.log(WeekEndDays_prev, "WeekEndDays_prev")

            //irfan


            console.log(Hrdif, "Hr diffe");


            

            var dif = Start_final.diff(moment(), 'days')
          
            if (Roles == "Owner") {
                /* check boat is active*/

                let checkactive = Boats.findOne({ _id: mongoose.Types.ObjectId(Boat_id), Boat_Status: 1 }).catch((error) => console.log(error));
                if (!checkactive) {

                    return res.json({
                        status: false,
                        message: 'Boat is not active'
                    })

                }

                /* check boat is suspended */

                let suspendcheck = await manageBoat.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) }).catch((error) => console.log(error));
                if (suspendcheck.Block == false)
                    return res.json({
                        status: false,
                        message: 'Suspended'
                    })



                //***** Reduce Numbeer Of Cleans  */
                let getCleanDays = await No_OfCleans.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) }).catch((error) => console.log(error));
                if (getCleanDays) {
                    if (getCleanDays.Cleans > 0) {

                        let resultCleanday = (getCleanDays.Cleans) - 1;
                        const updateVals = { Cleans: resultCleanday };
                        const updateCond = { Boat_Id: mongoose.Types.ObjectId(Boat_id), Owner_Id: mongoose.Types.ObjectId(Owner_id) };
                        let durationupdate = await No_OfCleans.findOneAndUpdate(updateCond, updateVals).catch((error) => console.log(error));


                    }

                }
//console.log(getCurrentTimeFormattedDate(start_Date) ,getCurrentTimeFormattedDate(end_Date),"DATEEE");
                //***** Reduce Numbeer Of Cleans  *********//

                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
                    .then(boatDetails => {

                        var BoatName = boatDetails.Boat_Name
                        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                            .then(async (ownerDetails) => {

                                var OwnerName = ownerDetails.First_Name
                                var Email_id = ownerDetails.Email
                                var date = ownerDetails.Current_Time

                                



                                if (dif >= 0) {



                                    if (Hrdif <= 72 && response.isStandByBookingIncluded==false) {

                                        console.log("ENTERS IN LOA");


                                        //set pending days back to its value

                                        let allocatedDays = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));

                                        console.log(allocatedDays)

                                        var Loa = Math.ceil((72 - Hrdif) / 24);
                                        var Loa_Pos = Math.abs(Loa);
                                        console.log(Loa);
                                        console.log(Loa_Pos, 'positv');

                                        var WeekDay_Count = 0;
                                        var WeekEnd_Count = 0;
                                        if (Roles == RoleAssigned) {


                                            ////.....................

                                            var obj = Object();
                                            obj.start = Start_final;
                                            obj.end = End_final;

                                            var datas = getDaysInMonth_Sheduler(obj);

                                            var arr = [];
                                            ///.................
                                            datas.forEach(function (item) {
                                                Object.keys(item).forEach(function (key) {
                                                    arr.push(item[key]);
                                                    console.log(item[key]);
                                                });
                                            });
                                            console.log(arr)

                                            for (let index = 0; index < Loa_Pos; ++index) {
                                                console.log(arr[index]);
                                                let day = arr[index];

                                                if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {

                                                    WeekDay_Count = WeekDay_Count + 1;
                                                    console.log('Del1')
                                                }
                                                else {
                                                    WeekEnd_Count = WeekEnd_Count + 1;

                                                }

                                            }
                                            console.log(WeekDay_Count)
                                            console.log(WeekEnd_Count)
                                            var Total_Count = 0;
                                            Total_Count = WeekDay_Count + WeekEnd_Count;
                                            console.log(Total_Count, 'Del2')
                                            var WeekDay_Counts = WeekDay_Count;
                                            var WeekEnd_Counts = WeekEnd_Count;

                                            ///////   Raga Set LOA FOR PRELAUNCH //////


                                            if (response.Booking_Type == "prelaunch and launch booking") {

                                                let getBetweenScheduleDates = getDaysBetweenDatesYearFirst(response.start, response.end);

                                                let DeletingCurntDate = new Date();

                                                let threeDays72 = new Date();

                                                threeDays72.setDate(threeDays72.getDate() + 3);

                                                let betweenLoaDays = getDaysBetweenDatesYearFirst(DeletingCurntDate, threeDays72);

                                                const ResfilteredArray = betweenLoaDays.filter(value => getBetweenScheduleDates.includes(value));

                                                if (ResfilteredArray.length == 1) {

                                                    var newScheduleStartDate = ResfilteredArray[0];

                                                    var newScheduleEndDate = ResfilteredArray[0];

                                                } else {

                                                    var newScheduleStartDate = ResfilteredArray[0];

                                                    var newScheduleEndDate = ResfilteredArray[(ResfilteredArray.length) - 1];

                                                }


                                                await new Schedule({
                                                    Boat_Name: response.Boat_Name,
                                                    calendarId: response.calendarId,
                                                    title: "Loas (Booking)",
                                                    body: response.body,
                                                    start: newScheduleStartDate,
                                                    end: newScheduleEndDate,

                                                    start_NoTime: new Date(new Date(newScheduleStartDate).setUTCHours(00, 00, 00, 00)),
                                                    end_NoTime: new Date(new Date(newScheduleEndDate).setUTCHours(00, 00, 00, 00)),
                                                    goingDuration: response.goingDuration,
                                                    comingDuration: response.comingDuration,
                                                    category: response.category,
                                                    dueDateClass: response.dueDateClass,
                                                    location: response.location,
                                                    attendees: response.attendees,
                                                    recurrenceRule: response.recurrenceRule,
                                                    color: response.color,
                                                    bgColor: response.bgColor,
                                                    dragBgColor: response.dragBgColor,
                                                    borderColor: response.borderColor,
                                                    customStyle: response.customStyle,
                                                    raw: response.raw,
                                                    User_RoleType: "Owner",
                                                    Status: response.Status,
                                                    Check_Status: response.Check_Status,
                                                    Check_Month: response.Check_Month,
                                                    Booking_ID: response.Booking_ID,
                                                    commends: response.commends,
                                                    LOA: response.LOA,
                                                    Approved_LOA: response.Approved_LOA,
                                                    BookingStatus: "",
                                                    Cancelled_Status: 1,
                                                    Total_DaysBooked: ResfilteredArray.length,
                                                    WeekDay_Count: WeekDay_Count,
                                                    WeekEnd_Count: WeekEnd_Count,
                                                    Total_DaysBooked_Reassign: response.Total_DaysBooked_Reassign,
                                                    WeekDay_Count_Reassign: response.WeekDay_Count_Reassign,
                                                    WeekEnd_Count_Reassign: response.WeekEnd_Count_Reassign,
                                                    Booking_Type: response.Booking_Type,
                                                    WeekDay_Count_Edit: response.WeekDay_Count_Edit,
                                                    WeekEnd_Count_Edit: response.WeekEnd_Count_Edit,
                                                    Total_Edit_Loa: response.Total_Edit_Loa,
                                                    PartialCancellation_Status: response.PartialCancellation_Status,
                                                    start_CancelledDate: response.start_CancelledDate,
                                                    end_CancelledDate: response.end_CancelledDate,
                                                    cancaledDays: response.cancaledDays,
                                                    isBookingPending: response.isBookingPending,
                                                    isBookingCancelled: response.isBookingCancelled,
                                                    isBookingAccepted: response.isBookingAccepted,
                                                    isNextDayBookingIncluded: response.isNextDayBookingIncluded,
                                                    isStandByBookingIncluded: response.isStandByBookingIncluded,
                                                    Boat_Id: response.Boat_Id,
                                                    isAllDay: response.isAllDay,
                                                    isPending: response.isPending,
                                                    isFocused: response.isFocused,
                                                    isVisible: response.isVisible,
                                                    isReadOnly: response.isReadOnly,
                                                    isPrivate: response.isPrivate,
                                                    Is_StandByBooking: response.Is_StandByBooking,
                                                    User_Id: response.User_Id,
                                                    Admin_Id: null,
                                                    IsActive: false,
                                                    delStatus: 1,
                                                    standByBookingId: response._id,
                                                    Booking_Type: response.Booking_Type

                                                }).save().catch((error) => console.log(error))


                                            }

                                            ///////   Raga End LOA FOR PRELAUNCH //////

                                            //set pending days back to its value      

                                            //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                                            //is active is not here before
                                            Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                let stopExecution = { stop: false }
                                                let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                                                    console.log(error)
                                                    stopExecution = error
                                                })


                                                if (stopExecution.stop) {
                                                    return res.json({ status: true, message: stopExecution.error })
                                                }

                                                console.log(exp_year,"---------expiredyear:exp_year");

                                                if (isAvailableDay.type=="summer" && response.Booking_Type != 'prelaunch and launch booking')//check Date Between Summer Dates
                                                {

                                                    //reassigning

                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var E_day = result.Summer_WeekEndDays;

                                                        if (S_day >= Weekdays_prev)
                                                            var remSday = S_day - Weekdays_prev;
                                                        else
                                                            var remSday = S_day;

                                                        if ((E_day >= WeekEndDays_prev))
                                                            var remEday = E_day - WeekEndDays_prev;
                                                        else
                                                            var remEday = E_day;

                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                            {

                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remSday,
                                                                Summer_WeekEndDays: remEday,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },

                                                            function (err, data) {

                                                                console.log('Deletion1')
                                                            });
                                                    })
                                                }
                                                else if(isAvailableDay.type=="winter") {

                                                    ///  Owner Booking Days Were allowed only for Season Booking
                                                    if (response.Booking_Type != 'prelaunch and launch booking') {

                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {


                                                            var WS_day = result.Winter_WeekDays;
                                                            var WE_day = result.Winter_WeekEndDays;

                                                            if (WS_day >= Weekdays_prev)
                                                                var remWS_day = WS_day - Weekdays_prev;
                                                            else
                                                                var remWS_day = WS_day;

                                                            if (WE_day >= WeekEndDays_prev)
                                                                var remWE_day = WE_day - WeekEndDays_prev;
                                                            else
                                                                var remWE_day = WE_day;



                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                {

                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Winter_WeekDays: remWS_day,
                                                                    Winter_WeekEndDays: remWE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },

                                                                function (err, data) {

                                                                    console.log('Deletion2')
                                                                });
                                                        })

                                                    }


                                                    //reassigning


                         

                                                    //reassigning

                                                }
                                                else if(isAvailableDay.type=="both" && response.Booking_Type != 'prelaunch and launch booking'){

                                                   
                                                   var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var SE_day = result.Summer_WeekEndDays;
                                                        var W_day = result.Winter_WeekDays;
                                                        var WE_day = result.Winter_WeekEndDays;
    
                                                      
                                                        if(response.isStandByBookingIncluded){
                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, response.start) || {};
        
                                                            if (isIncludedInSummer){
    
                                                                 var newSummerWeekay= summerWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                 var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
                                                                 var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                                 var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
                                                            }else{
                                                                var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                                var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                                var newWinterWeekday = winterWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
    
                                                            }
                                                        }else{
    
                                                            var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                            var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                            var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                            var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
    
                                                        }
    
                                                      
                                                        if (S_day >= newSummerWeekay)
                                                            var remS_day = S_day - newSummerWeekay;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (SE_day >= newSummerWeekEnd)
                                                            var remSE_day = SE_day - newSummerWeekEnd;
                                                        else
                                                            var remSE_day = SE_day;
    
                                                            if (W_day >= newWinterWeekday)
                                                            var remW_day = W_day - newWinterWeekday;
                                                        else
                                                            var remW_day = W_day;
    
                                                        if (WE_day >= newWinterWeekEnd)
                                                            var remWE_day = WE_day - newWinterWeekEnd;
                                                        else
                                                            var remWE_day = WE_day;
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remSE_day,
                                                                Winter_WeekDays: remW_day,
                                                                Winter_WeekEndDays: remWE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion3')
                                                            });
                                                    })
    
                                                }


                                                console.log("Saving to Ownerpartialcancel table ");
                                                let getcaceldates_only = getDaysBetweenDatesFormat(response.start, response.end);
                                                let ownerPartial = new OwnerPartialCancelation();
                                                ownerPartial.Scheduleid = scheduleid;
                                                ownerPartial.Boat_Id = response.Boat_Id;
                                                ownerPartial.Owner_Id = response.User_Id;
                                                ownerPartial.Boat_Name = response.Boat_Name;
                                                ownerPartial.cancaledDays = getcaceldates_only;
                                                ownerPartial.StartDate = response.start;
                                                ownerPartial.Enddate = response.end;
                                                ownerPartial.Booking_ID = response.Booking_ID;
                                                ownerPartial.LOA = Loa_Pos;
                                                ownerPartial.WeekDay_Count = WeekDay_Counts;
                                                ownerPartial.WeekEnd_Count = WeekEnd_Counts;
                                                ownerPartial.WeekDay_Count_Edit = response.WeekDay_Count_Edit;
                                                ownerPartial.WeekEnd_Count_Edit = response.WeekEnd_Count_Edit;
                                                ownerPartial.Total_Edit_Loa = response.Total_Edit_Loa;
                                                ownerPartial.PartialCancellation_Status = response.PartialCancellation_Status;
                                                ownerPartial.BookingStatus = "Accepted";
                                                ownerPartial.save(function (err, saved) {
                                                    if (err) {
                                                        return;
                                                    }

                                                });
    

                                            })



                                            //set pending days back to its value



                                            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                                {


                                                    IsActive: false,
                                                    Cancelled_Status: 1,
                                                    Updated_time: moment(Date.now()),
                                                    LOA: Loa_Pos,
                                                    WeekDay_Count: WeekDay_Counts,
                                                    WeekEnd_Count: WeekEnd_Counts,
                                                    delStatus: 1

                                                },

                                                async function (err, data) {

                                                    console.log("FENTER");


                                                    //mail   


                                                    const emailState = 'Booking Cancelled.';
                                                    const emailContent = `Dear ${OwnerName}, <p>Your booking on Boat ${BoatName} at ${getCurrentTimeFormattedDate(start_Date)} To   ${getCurrentTimeFormattedDate(end_Date)}  has been successfully cancelled by Smart Boating Team</p>`;
                                                    const emailContentAdmin = `Dear Administrator,<p>The Smart Boating Team has successfully cancelled a booking for ${OwnerName} on ${BoatName}  at ${getCurrentTimeFormattedDate(start_Date)} To   ${getCurrentTimeFormattedDate(end_Date)} </p> `
                                                    const emailDetailName = 'Cancellation Details'
                                                    const emailDetails = [
                                                        { key: 'Boat Name', value: BoatName },

                                                    ];
                                                    const emailNameAndLink = {
                                                        name: 'Booking Link',
                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                    }


                                                    var mailOptions = {

                                                        from: "noreply.smartboatbooking@gmail.com",
                                                        to: Email_id,
                                                        subject: 'Booking Cancellation',
                                                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)

                                                    };

                                                    transporter.sendMail(mailOptions, function (error, info) {
                                                        if (error) {
                                                            console.log(error);
                                                        } else {
                                                            res.json({
                                                                status: true,
                                                                message: 'Successfully send'
                                                            })
                                                        }
                                                    });

                                                    var mailOptionsAdmin = {

                                                        from: "noreply.smartboatbooking@gmail.com",
                                                        to: Email_id,
                                                        subject: 'Booking Cancellation',
                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)


                                                    };

                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) {
                                                        if (error) {
                                                            console.log(error);
                                                        } else {
                                                            res.json({
                                                                status: true,
                                                                message: 'Successfully send'
                                                            })
                                                        }
                                                    });
                                                    //mail


                                                    if (err) {
                                                        res.json({
                                                            status: false,
                                                            message: 'AN ERROR OCCURED'
                                                        })
                                                    }
                                                    else {
                                                        console.log("ENTERED LOA TABLE");

                                                        res.json({

                                                            status: true,
                                                            Loa: Loa_Pos,
                                                            Weekday: WeekDay_Counts,
                                                            WeekEnd: WeekEnd_Counts,
                                                            message: 'Schedule details deleted successfully.' + '  ' + ' ' + ' ' + 'You will be allowed to rebook on ' + ' ' + moment(Start_final).format('DD-MM-YYYY') + ' ' + 'to' + ' ' + moment(End_final).format('DD-MM-YYYY') + ' ' + 'for' + ' ' + boatDetails.Boat_Name + ' ' + 'only after 24 hours from now'
                                                        })
                                                    }
                                                });


                                        }
                                        else {
                                            res.json({

                                                status: true,
                                                message: 'This booking is owned by an owner. Only an allowed user can delete this booking.'
                                            })


                                        }
                                    }
                                    else { 
                                    
                                        //set pending days back to its value
                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                                        //is active is not here before
                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                            let stopExecution = { stop: false }
                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                                                console.log(error)
                                                stopExecution = error
                                            })


                                            if (stopExecution.stop) {
                                                return res.json({ status: true, message: stopExecution.error })
                                            }

                                            var getBookedyear = new Date(start_Date);
                                            var YearOne = getBookedyear.getFullYear();
                                            var MonthOne = getBookedyear.getMonth()+1;
                                            var nextYearBook = (parseInt(YearOne)+1);
                                            if(MonthOne<anni_month)
                                            var exp_year = ""+YearOne+anni_month;
                                            else
                                            var exp_year =""+nextYearBook+anni_month;
                                            
                                          console.log(isAvailableDay.type,"-----------isAvailableDay.type");

                                            if ((isAvailableDay.type=="summer") && response.Booking_Type != 'prelaunch and launch booking')//check Date Between Summer Dates
                                            {


                                                //check if next booking included


                                                //reassigning

                                               


                                                if(MonthBookingStatus == 0){

                                                    

                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var E_day = result.Summer_WeekEndDays;

                                                        console.log(S_day,"-----S_day");
                                                        console.log(E_day,"-----E_day");
    
                                                        if (S_day >= Weekdays_prev)
                                                            var remS_day = S_day - Weekdays_prev;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (E_day >= WeekEndDays_prev)
                                                            var remE_day = E_day - WeekEndDays_prev;
                                                        else
                                                            var remE_day = E_day;
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion3')
                                                            });
                                                    })

                                                }else{

                                                    let lastday = getLastdayOfmonth(response.start);
                                                    let firstDay = getFirstDayOfMonth(response.end);
                                                    var start_mydate = new Date(response.start);
                                                    var getMonthEndyear = new Date(response.end);
                                                    var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                    var exp_year =""+nextyear+anni_month;
                                                    var startexp = ""+start_mydate.getFullYear()+anni_month;

                                                    console.log(exp_year,"----------exp_year");

                                                    console.log(startexp,"----------startexp");

                                                  
                                                    let YearOne_Start_Date = response.start;
                                                    let YearOne_End_Date = lastday;
                                                
                                                    let YearTwo_Start_Date = firstDay;
                                                    let YearTwo_End_Date = response.end;

                                                    var Start_final_yearone = moment(YearOne_Start_Date);
                                                    var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');

                                                    var End_final_yearone = moment(YearOne_End_Date);
                                                    var End_final_withoutTime_yearone = End_final_yearone.startOf('day');


                                                    var Start_final_yeartwo = moment(YearTwo_Start_Date);
                                                    var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');

                                                    var End_final_yeartwo = moment(YearTwo_End_Date);
                                                    var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');

                                                    let yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
                                                    let yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);

                                                    
                                                    if((yearOne_betweenDays.length)==0)
                                                    yearOne_betweenDays.push(Start_final_withoutTime_yearone);

                                                    if((yearTwo_betweenDays.length)==0)
                                                    yearTwo_betweenDays.push(Start_final_withoutTime_yeartwo);

                                                    console.log(yearOne_betweenDays,"---------yearOne_betweenDays");

                                                    console.log(yearTwo_betweenDays,"---------yearTwo_betweenDays");

                                                 
                                        
                                                    var FirstyearCount = CheckDaynames(yearOne_betweenDays);
                                                    var SecondYearCount = CheckDaynames(yearTwo_betweenDays);

                                                    

                                                    var Firstparse = JSON.parse(FirstyearCount);
                                                    var Secondparse = JSON.parse(SecondYearCount);
                                        
                                                  
                                                    var Weekdays_prev1 = Firstparse.weekdaycnt;
                                                    var WeekEndDays_prev1 =Firstparse. weekendCnt;

                                                    var Weekdays_prev2 = Secondparse.weekdaycnt;
                                                    var WeekEndDays_prev2 = Secondparse.weekendCnt;

                                                    console.log(Weekdays_prev1,"----------Weekdays_prev1");
                                                    console.log(WeekEndDays_prev1,"----------WeekEndDays_prev1");

                                                    console.log(Weekdays_prev2,"----------Weekdays_prev2");
                                                    console.log(WeekEndDays_prev2,"----------WeekEndDays_prev2");
                                                  

                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var E_day = result.Summer_WeekEndDays;
    
                                                        if (S_day >= Weekdays_prev1)
                                                            var remS_day = S_day - Weekdays_prev1;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (E_day >= WeekEndDays_prev1)
                                                            var remE_day = E_day - WeekEndDays_prev1;
                                                        else
                                                            var remE_day = E_day;

                                                            console.log();
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion3')
                                                            });
                                                    })


                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var E_day = result.Summer_WeekEndDays;
    
                                                        if (S_day >= Weekdays_prev2)
                                                            var remS_day = S_day - Weekdays_prev2;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (E_day >= WeekEndDays_prev2)
                                                            var remE_day = E_day - WeekEndDays_prev2;
                                                        else
                                                            var remE_day = E_day;
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, expiredyear:exp_year  },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion3')
                                                            });
                                                    })


                                                }

                                    
                                            }
                                            else if((isAvailableDay.type=="winter") && (response.Booking_Type != 'prelaunch and launch booking')){

                                                if (response.Booking_Type != 'prelaunch and launch booking') {

                                                    if(MonthBookingStatus ==0){

                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                           
                                                            var WS_day = result.Winter_WeekDays;
                                                            var WE_day = result.Winter_WeekEndDays;
    
                                                            if (WS_day >= Weekdays_prev)
                                                                var remWS_day = WS_day - Weekdays_prev;
                                                            else
                                                                var remWS_day = WS_day;
    
                                                            if (WE_day >= WeekEndDays_prev)
                                                                var remWE_day = WE_day - WeekEndDays_prev;
                                                            else
                                                                var remWE_day = WE_day;
    
                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                {
    
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Winter_WeekDays: remWS_day,
                                                                    Winter_WeekEndDays: remWE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
    
                                                                function (err, data) {
    
                                                                    console.log('Deletion4')
                                                                });
                                                        })
    

                                                    }else{

                                                        let lastday = getLastdayOfmonth(response.start);
                                                        let firstDay = getFirstDayOfMonth(response.end);
                                                        var start_mydate = new Date(start_Date);
                                                        var getMonthEndyear = new Date(end_Date);
                                                        var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                        var exp_year =""+nextyear+anni_month;
                                                        var startexp = ""+start_mydate.getFullYear()+anni_month;
    
                                                      
                                                        let YearOne_Start_Date = response.start;
                                                        let YearOne_End_Date = lastday;
                                                    
                                                        let YearTwo_Start_Date = firstDay;
                                                        let YearTwo_End_Date = response.end;
    
                                                        var Start_final_yearone = moment(YearOne_Start_Date);
                                                        var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');
    
                                                        var End_final_yearone = moment(YearOne_End_Date);
                                                        var End_final_withoutTime_yearone = End_final_yearone.startOf('day');
    
    
                                                        var Start_final_yeartwo = moment(YearTwo_Start_Date);
                                                        var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');
    
                                                        var End_final_yeartwo = moment(YearTwo_End_Date);
                                                        var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');
    
                                                        let yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
                                                        let yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);
    
                                                        
                                                        if((yearOne_betweenDays.length)==0)
                                                        yearOne_betweenDays.push(Start_final_withoutTime_yearone);
    
                                                        if((yearTwo_betweenDays.length)==0)
                                                        yearTwo_betweenDays.push(Start_final_withoutTime_yeartwo);
    
                                                     
                                            
                                                        var FirstyearCount = CheckDaynames(yearOne_betweenDays);
                                                        var SecondYearCount = CheckDaynames(yearTwo_betweenDays);
    
                                                        
    
                                                        var Firstparse = JSON.parse(FirstyearCount);
                                                        var Secondparse = JSON.parse(SecondYearCount);
                                            
                                                      
                                                        var Weekdays_prev1 = Firstparse.weekdaycnt;
                                                        var WeekEndDays_prev1 =Firstparse. weekendCnt;
    
                                                        var Weekdays_prev2 = Secondparse.weekdaycnt;
                                                        var WeekEndDays_prev2 = Secondparse.weekendCnt;
    
                                                      
    
                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                            //console.log(result)
                                                            var WS_day = result.Winter_WeekDays;
                                                            var WE_day = result.Winter_WeekEndDays;
        
                                                            if (WS_day >= Weekdays_prev)
                                                            var remWS_day = WS_day - Weekdays_prev;
                                                        else
                                                            var remWS_day = WS_day;

                                                        if (WE_day >= WeekEndDays_prev)
                                                            var remWE_day = WE_day - WeekEndDays_prev;
                                                        else
                                                            var remWE_day = WE_day;

                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                {
        
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Summer_WeekDays: remS_day,
                                                                    Summer_WeekEndDays: remE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
        
                                                                function (err, data) {
        
                                                                    console.log('Deletion3')
                                                                });
                                                        })
    
    
                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                            //console.log(result)
                                                            var S_day = result.Summer_WeekDays;
                                                            var E_day = result.Summer_WeekEndDays;
        
                                                            if (S_day >= Weekdays_prev2)
                                                                var remS_day = S_day - Weekdays_prev2;
                                                            else
                                                                var remS_day = S_day;
        
                                                            if (E_day >= WeekEndDays_prev2)
                                                                var remE_day = E_day - WeekEndDays_prev2;
                                                            else
                                                                var remE_day = E_day;
        
                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                {
        
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Summer_WeekDays: remS_day,
                                                                    Summer_WeekEndDays: remE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
        
                                                                function (err, data) {
        
                                                                    console.log('Deletion4')
                                                                });
                                                        })
    


                                                    }

                                                   

                                                }
                                                //reassigning


                                                //reassigning

                                            }

                                            else if(isAvailableDay.type=="both" && response.Booking_Type != 'prelaunch and launch booking'){
                                               

                                                if(MonthBookingStatus ==0){

                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var SE_day = result.Summer_WeekEndDays;
                                                        var W_day = result.Winter_WeekDays;
                                                        var WE_day = result.Winter_WeekEndDays;
    
                                                       
                                                        if(response.isStandByBookingIncluded){
                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, response.start) || {};
        
                                                            if (isIncludedInSummer){
    
                                                                 var newSummerWeekay= summerWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                 var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
                                                                 var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                                 var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
                                                            }else{
                                                                var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                                var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                                var newWinterWeekday = winterWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
    
                                                            }
                                                        }else{
    
                                                            var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                            var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                            var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                            var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
    
                                                        }
    
                                                       
    
                                                        if (S_day >= newSummerWeekay)
                                                            var remS_day = S_day - newSummerWeekay;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (SE_day >= newSummerWeekEnd)
                                                            var remSE_day = SE_day - newSummerWeekEnd;
                                                        else
                                                            var remSE_day = SE_day;
    
                                                            if (W_day >= newWinterWeekday)
                                                            var remW_day = W_day - newWinterWeekday;
                                                        else
                                                            var remW_day = W_day;
    
                                                        if (WE_day >= newWinterWeekEnd)
                                                            var remWE_day = WE_day - newWinterWeekEnd;
                                                        else
                                                            var remWE_day = WE_day;
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remSE_day,
                                                                Winter_WeekDays: remW_day,
                                                                Winter_WeekEndDays: remWE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion3')
                                                            });
                                                    })

                                                }else{

                                                    var Start_final_yearOne = moment(response.start);
                                                    var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
                                                    let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);

                                                    var End_final_yearTwo = moment(response.end);
                                                    var End_final_withoutTime_yeartwo = End_final_yearTwo.startOf('day');
                                                    var firstDayTwo = getFirstDayOfMonth(End_final_withoutTime_yeartwo);

                                                  
                                                    let firstDay = getFirstDayOfMonth(response.end);
                                                    var start_mydate = new Date(response.start);
                                                    var getMonthEndyear = new Date(response.end);
                                                    var nextyear = parseInt(getMonthEndyear.getFullYear())+1;
                                                    var exp_year =""+nextyear+anni_month;
                                                    var startexp = ""+start_mydate.getFullYear()+anni_month;
                                                    let YearOne_Start_Date = Start_final_withoutTime_yearOne;
                                                    let YearOne_End_Date = lastday;

                                                    console.log(YearOne_Start_Date,YearOne_End_Date,"----------");

                                                    let stopExecutionOne = { stop: false }
                                                    let isAvailableDayYearOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearOne_Start_Date, YearOne_End_Date).catch((error) => {
                                                        console.log(error)
                                                        stopExecutionOne = error
                                                    })
        
        
                                                    if (stopExecutionOne.stop) {
                                                        return res.json({ status: true, message: stopExecutionOne.error })
                                                    }
                                                    console.log(isAvailableDayYearOne.type,"----------------UUUUII");
                                                    
                                                    if(isAvailableDayYearOne.type == "both"){

                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearOne.summer_Arr));
                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearOne.winter_Arr));
                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                            //console.log(result)
                                                            var S_day = result.Summer_WeekDays;
                                                            var SE_day = result.Summer_WeekEndDays;
                                                            var W_day = result.Winter_WeekDays;
                                                            var WE_day = result.Winter_WeekEndDays;
        
                                                           
                                                            if(response.isStandByBookingIncluded){
                                                                let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, response.start) || {};
            
                                                                if (isIncludedInSummer){
        
                                                                     var newSummerWeekay= summerWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                     var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
                                                                     var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                                     var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
                                                                }else{
                                                                    var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                                    var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                                    var newWinterWeekday = winterWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                    var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
        
                                                                }
                                                            }else{
        
                                                                var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                                var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                                var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                                var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
        
                                                            }
        
                                                           
        
                                                            if (S_day >= newSummerWeekay)
                                                                var remS_day = S_day - newSummerWeekay;
                                                            else
                                                                var remS_day = S_day;
        
                                                            if (SE_day >= newSummerWeekEnd)
                                                                var remSE_day = SE_day - newSummerWeekEnd;
                                                            else
                                                                var remSE_day = SE_day;
        
                                                                if (W_day >= newWinterWeekday)
                                                                var remW_day = W_day - newWinterWeekday;
                                                            else
                                                                var remW_day = W_day;
        
                                                            if (WE_day >= newWinterWeekEnd)
                                                                var remWE_day = WE_day - newWinterWeekEnd;
                                                            else
                                                                var remWE_day = WE_day;
        
                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                {
        
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Summer_WeekDays: remS_day,
                                                                    Summer_WeekEndDays: remSE_day,
                                                                    Winter_WeekDays: remW_day,
                                                                    Winter_WeekEndDays: remWE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
        
                                                                function (err, data) {
        
                                                                    console.log('Deletion4')
                                                                });
                                                        })
    
            

                                                    }
                                                    else {

                                                        var Start_final_yearone = moment(YearOne_Start_Date);
                                                        var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');
    
                                                        var End_final_yearone = moment(YearOne_End_Date);
                                                        var End_final_withoutTime_yearone = End_final_yearone.startOf('day');
                                                        let yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
                                                        if((yearOne_betweenDays.length)==0)
                                                        yearOne_betweenDays.push(Start_final_withoutTime_yearone);
                                                        var FirstyearCount = CheckDaynames(yearOne_betweenDays);
                                                        var Firstparse = JSON.parse(FirstyearCount);
                                                        var Weekdays_prev1 = Firstparse.weekdaycnt;
                                                        var WeekEndDays_prev1 =Firstparse. weekendCnt;
                                                        
                                                      
                                                        if(isAvailableDayYearOne.type == "winter"){

                                                             OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                var W_day = result.Winter_WeekDays;
                                                                var WE_day = result.Winter_WeekEndDays;

                                                                if(response.isStandByBookingIncluded){
                                                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, response.start) || {};
                                                                    if (isIncludedInSummer){
        
                                                                    }else{
                                                                    
                                                                     var newWinterWeekday = W_day - standByBookingWeekDays;
                                                                     var newWinterWeekEnd = WE_day - standByBookingWeekendDays;
                                                                    
                                                                    }

                                                                }else{

                                                                    var newWinterWeekday = W_day;
                                                                    var newWinterWeekEnd = WE_day;

                                                                }

                                                               
                                                                //console.log(result)
                                                               
            
                                                                if (newWinterWeekday >= Weekdays_prev1)
                                                                    var remW_day = newWinterWeekday - Weekdays_prev1;
                                                                else
                                                                    var remWE_day = newWinterWeekday;
            
                                                                if (newWinterWeekEnd >= WeekEndDays_prev1)
                                                                    var remE_day = newWinterWeekEnd - WeekEndDays_prev1;
                                                                else
                                                                    var remE_day = newWinterWeekEnd;
        
                                                                    
            
                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                    {
            
                                                                        Boat_Id: Boat_id,
                                                                        Owner_Id: Owner_id,
                                                                        Winter_WeekDays: remW_day,
                                                                        Winter_WeekEndDays: remWE_day,
                                                                        IsActive: true,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now())
                                                                    },
            
                                                                    function (err, data) {
            
                                                                        console.log('Deletion9')
                                                                    });
                                                            })
        

                                                        }else if(isAvailableDayYearOne.type == "summer"){

                                                            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp }).then(result => {
                                                                //console.log(result)
                                                                var S_day = result.Summer_WeekDays;
                                                                var E_day = result.Summer_WeekEndDays;

                                                                if(response.isStandByBookingIncluded){
                                                                    let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, response.start) || {};
                                                                    if (isIncludedInSummer){
                                                                        var newSummerWeekday = S_day - standByBookingWeekDays;
                                                                        var newSummerWeekEnd = E_day - standByBookingWeekendDays;
        
                                                                    }
                                                                }else{

                                                                    var newSummerWeekday = S_day;
                                                                    var newSummerWeekEnd = E_day;

                                                                }
            
                                                                if (newSummerWeekday >= Weekdays_prev1)
                                                                    var remS_day = newSummerWeekday - Weekdays_prev1;
                                                                else
                                                                    var remS_day = newSummerWeekday;
            
                                                                if (newSummerWeekEnd >= WeekEndDays_prev1)
                                                                    var remE_day = newSummerWeekEnd - WeekEndDays_prev1;
                                                                else
                                                                    var remE_day = newSummerWeekEnd;
        
                                                                    
            
                                                                OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp },
                                                                    {
            
                                                                        Boat_Id: Boat_id,
                                                                        Owner_Id: Owner_id,
                                                                        Summer_WeekDays: remS_day,
                                                                        Summer_WeekEndDays: remE_day,
                                                                        IsActive: true,
                                                                        Current_Time: moment(Date.now()),
                                                                        Updated_time: moment(Date.now())
                                                                    },
            
                                                                    function (err, data) {
            
                                                                        console.log('Deletion3')
                                                                    });
                                                            })
        
        


                                                        }
               
    

    

                                                    }

                                                   
                                                
                                                    let YearTwo_Start_Date = firstDayTwo;
                                                    let YearTwo_End_Date = End_final_withoutTime_yeartwo;


                                                    
                                                    let stopExecutionTwo = { stop: false }
                                                    let isAvailableDayYearTwo = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,YearTwo_Start_Date, YearTwo_End_Date).catch((error) => {
                                                        console.log(error)
                                                        stopExecutionTwo = error
                                                    })
        
        
                                                    if (stopExecutionTwo.stop) {
                                                        return res.json({ status: true, message: stopExecutionTwo.error })
                                                    }

                                                   if(isAvailableDayYearTwo.type == "both"){

                                                    
                                                    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearTwo.summer_Arr));
                                                    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDayYearTwo.winter_Arr));
                                                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                        //console.log(result)
                                                        var S_day = result.Summer_WeekDays;
                                                        var SE_day = result.Summer_WeekEndDays;
                                                        var W_day = result.Winter_WeekDays;
                                                        var WE_day = result.Winter_WeekEndDays;
    
                                                       
                                                        if(response.isStandByBookingIncluded){
                                                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, YearTwo_Start_Date) || {};
        
                                                            if (isIncludedInSummer){
    
                                                                 var newSummerWeekay= summerWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                 var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
                                                                 var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                                 var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
                                                            }else{
                                                                var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                                var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                                var newWinterWeekday = winterWeekdayWeekend.weekdaycnt - standByBookingWeekDays;
                                                                var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt - standByBookingWeekendDays;
    
                                                            }
                                                        }else{
    
                                                            var newSummerWeekay= summerWeekdayWeekend.weekdaycnt;
                                                            var newSummerWeekEnd =summerWeekdayWeekend.weekendCnt;
                                                            var newWinterWeekday = winterWeekdayWeekend.weekdaycnt;
                                                            var newWinterWeekEnd = winterWeekdayWeekend.weekendCnt; 
    
                                                        }
    
                                                       
    
                                                        if (S_day >= newSummerWeekay)
                                                            var remS_day = S_day - newSummerWeekay;
                                                        else
                                                            var remS_day = S_day;
    
                                                        if (SE_day >= newSummerWeekEnd)
                                                            var remSE_day = SE_day - newSummerWeekEnd;
                                                        else
                                                            var remSE_day = SE_day;
    
                                                            if (W_day >= newWinterWeekday)
                                                            var remW_day = W_day - newWinterWeekday;
                                                        else
                                                            var remW_day = W_day;
    
                                                        if (WE_day >= newWinterWeekEnd)
                                                            var remWE_day = WE_day - newWinterWeekEnd;
                                                        else
                                                            var remWE_day = WE_day;
    
                                                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                            {
    
                                                                Boat_Id: Boat_id,
                                                                Owner_Id: Owner_id,
                                                                Summer_WeekDays: remS_day,
                                                                Summer_WeekEndDays: remSE_day,
                                                                Winter_WeekDays: remW_day,
                                                                Winter_WeekEndDays: remWE_day,
                                                                IsActive: true,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now())
                                                            },
    
                                                            function (err, data) {
    
                                                                console.log('Deletion5')
                                                            });
                                                    })

                                                       
                                                   }


                                                   else {

                                                    var Start_final_yeartwo = moment(YearTwo_Start_Date);
                                                    var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');

                                                    var End_final_yeartwo = moment(YearTwo_End_Date);
                                                    var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');
                                                    let yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);
                                                    if((yearTwo_betweenDays.length)==0)
                                                    yearTwo_betweenDays.push(Start_final_withoutTime_yeartwo);
                                                    var SecondYearCount = CheckDaynames(yearTwo_betweenDays);
                                                    var Secondparse = JSON.parse(SecondYearCount);
                                                    var Weekdays_prev2 = Secondparse.weekdaycnt;
                                                    var WeekEndDays_prev2 = Secondparse.weekendCnt;

                                                    
                                                  
                                                    if(isAvailableDayYearTwo.type == "winter"){

                                                         OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                            var W_day = result.Winter_WeekDays;
                                                            var WE_day = result.Winter_WeekEndDays;

                                                            if(response.isStandByBookingIncluded){
                                                                let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, YearTwo_Start_Date) || {};
                                                                if (isIncludedInSummer){
    
                                                                }else{
                                                                
                                                                 var newWinterWeekday = W_day - standByBookingWeekDays;
                                                                 var newWinterWeekEnd = WE_day - standByBookingWeekendDays;
                                                                
                                                                }

                                                            }else{

                                                                var newWinterWeekday = W_day;
                                                                var newWinterWeekEnd = WE_day;

                                                            }

                                                           
                                                            //console.log(result)
                                                           
        
                                                            if (newWinterWeekday >= Weekdays_prev2)
                                                                var remW_day = newWinterWeekday - Weekdays_prev2;
                                                            else
                                                                var remWE_day = newWinterWeekday;
        
                                                            if (newWinterWeekEnd >= WeekEndDays_prev2)
                                                                var remE_day = newWinterWeekEnd - WeekEndDays_prev2;
                                                            else
                                                                var remE_day = newWinterWeekEnd;
    
                                                                
        
                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                {
        
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Winter_WeekDays: remW_day,
                                                                    Winter_WeekEndDays: remWE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
        
                                                                function (err, data) {
        
                                                                    console.log('Deletion9')
                                                                });
                                                        })
    

                                                    }else if(isAvailableDayYearTwo.type == "summer"){

                                                        OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                                                            //console.log(result)
                                                            var S_day = result.Summer_WeekDays;
                                                            var E_day = result.Summer_WeekEndDays;

                                                            if(response.isStandByBookingIncluded){
                                                                let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, YearTwo_Start_Date) || {};
                                                                if (isIncludedInSummer){

                                                                    var newSummerWeekday = S_day - standByBookingWeekDays;
                                                                    var newSummerWeekEnd = E_day - standByBookingWeekendDays;
    
                                                                }
                                                            }else{

                                                                var newSummerWeekday = S_day;
                                                                var newSummerWeekEnd = E_day;

                                                            }
        
                                                            if (newSummerWeekday >= Weekdays_prev2)
                                                                var remS_day = newSummerWeekday - Weekdays_prev2;
                                                            else
                                                                var remS_day = newSummerWeekday;
        
                                                            if (newSummerWeekEnd >= WeekEndDays_prev2)
                                                                var remE_day = newSummerWeekEnd - WeekEndDays_prev2;
                                                            else
                                                                var remE_day = newSummerWeekEnd;
    
                                                                
        
                                                            OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                                                                {
        
                                                                    Boat_Id: Boat_id,
                                                                    Owner_Id: Owner_id,
                                                                    Summer_WeekDays: remS_day,
                                                                    Summer_WeekEndDays: remE_day,
                                                                    IsActive: true,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now())
                                                                },
        
                                                                function (err, data) {
        
                                                                    console.log('Deletion3')
                                                                });
                                                        })
    
    


                                                    }
           




                                                }
                                                    
        
                                                   



                                                }
                                                
                                               

                                               

            

                                            }

                                        })
                                        //set pending days back to its value                              
                                        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                            {

                                                IsActive: false,
                                                Cancelled_Status: 1,
                                                Updated_time: moment(Date.now()),
                                                LOA: 0,
                                                WeekDay_Count: 0,
                                                WeekEnd_Count: 0,
                                                delStatus: 1
                                            },

                                            function (err, data) {

                                                //mail           

                                                const emailState = 'Booking Cancelled.';
                                                const emailContent = `Dear ${OwnerName} your booking on Boat ${BoatName} on ${getCurrentTimeFormattedDate(start_Date)} To ${getCurrentTimeFormattedDate(end_Date)} has been successfully cancelled `;
                                                const emailContentAdmin = `Dear Administrator,The Boat ${BoatName}  on ${getCurrentTimeFormattedDate(start_Date)} To ${getCurrentTimeFormattedDate(end_Date)} has been successfully cancelled `
                                                const emailDetailName = 'Cancellation Details'
                                                const emailDetails = [
                                                    { key: 'Boat Name', value: BoatName },

                                                ];
                                                const emailNameAndLink = {
                                                    name: 'Booking Link',
                                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                                }

                                                var mailOptions = {

                                                    from: "noreply.smartboatbooking@gmail.com",
                                                    to: Email_id,
                                                    subject: 'Booking Cancellation',
                                                    html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)



                                                };

                                                transporter.sendMail(mailOptions, function (error, info) {
                                                    if (error) {
                                                        console.log(error);
                                                    } else {
                                                        res.json({
                                                            status: true,
                                                            info: 'Successfully send'
                                                        })
                                                    }
                                                });

                                                var mailOptionsAdmin = {

                                                    from: "noreply.smartboatbooking@gmail.com",
                                                    to: Email_id,
                                                    subject: 'Booking Cancellation',
                                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                                };

                                                transporter.sendMail(mailOptionsAdmin, function (error, info) {
                                                    if (error) {
                                                        console.log(error);
                                                    } else {
                                                        res.json({
                                                            status: true,
                                                            info: 'Successfully send'
                                                        })
                                                    }
                                                });

                                                //mail


                                                if (err) {
                                                    res.json({
                                                        status: false,
                                                        message: 'AN ERROR OCCURED'
                                                    })
                                                }
                                                else {
                                                    console.log("ENTERD LOA @");
                                                    res.json({

                                                        status: true,
                                                        Loa: 0,
                                                        Weekday: 0,
                                                        WeekEnd: 0,
                                                        message: 'Schedule details deleted successfully.' + '  ' + ' ' + ' ' + 'You will be allowed to rebook on ' + ' ' + moment(Start_final).format('DD-MM-YYYY') + ' ' + 'to' + ' ' + moment(End_final).format('DD-MM-YYYY') + ' ' + 'for' + ' ' + boatDetails.Boat_Name + ' ' + 'only after 24 hours from now'
                                                    })
                                                }
                                            });

                                    }
                                }

                                else {
                                    res.json({
                                        status: false,
                                        message: 'Booking on a previous day cannot be cancelled'
                                    })

                                }
                            })
                    })
            }
            else {

                const boatDetails = await Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).catch((error) => console.log(error)) || {}

                let BoatName = boatDetails.Boat_Name;
                let date = getCurrentTimeFormatted()


                if (dif >= 0) {

                    Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                        {

                            IsActive: false,
                            Cancelled_Status: 1,
                            Updated_time: moment(Date.now()),
                            LOA: 0,
                            Weekday: 0,
                            WeekEnd: 0,
                            delStatus: 1
                        },

                        function (err, data) {

                            //mail   


                            const emailState = 'Booking Cancelled.';
                            const emailContentAdmin = `Dear Administrator,The Boat ${BoatName}  on ${getCurrentTimeFormattedDate(start_Date)} To ${getCurrentTimeFormattedDate(end_Date)} has been successfully cancelled `
                            const emailDetailName = 'Cancellation Details'
                            const emailDetails = [
                                { key: 'Boat Name', value: BoatName },

                            ];
                            const emailNameAndLink = {
                                name: 'Booking Link',
                                link: `${process.env.CLIENT_URL}/boat-bookings`
                            }


                            var mailOptionsAdmin = {

                                from: "noreply.smartboatbooking@gmail.com",
                                to: "bookingsystem@smartboating.com.au",
                                subject: 'Booking Cancellation',
                                html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                            };

                            transporter.sendMail(mailOptionsAdmin, function (error, info) {
                                if (error) {
                                    console.log(error);
                                } else {
                                    res.json({
                                        status: true,
                                        info: 'Successfully send'
                                    })
                                }
                            });

                            //mail


                            if (err) {
                                res.json({
                                    status: false,
                                    message: 'AN ERROR OCCURED'
                                })
                            }
                            else {
                                res.json({

                                    status: true,
                                    Loa: 0,
                                    Weekday: 0,
                                    WeekEnd: 0,
                                    message: 'Schedule Details Deleted Successfully'
                                })
                            }
                        });
                }
                else {
                    res.json({
                        status: false,
                        message: 'Booking on a previous day cannot be cancelled'
                    })
                }
            }
        } // if end check response
        else {
            return res.json({

                status: false,
                message: "Permission Denied"

            });
        }
    })
    // flag for if
}

/// END DeleteSchedule
const GetBoatNames = (req, res, next) => {
    const searchletter = req.body.alphabet
    let re = new RegExp(searchletter, 'i')
    console.log(searchletter)
    Boats.find({ IsActive: true, Boat_Status: 1, "Boat_Name": re }).sort({ Boat_Name: 1 }).select({ _id: 1, Boat_Name: 1, Boattype_Name: 1, Location_Id: 1, Location_Name: 1 })
        .then(response => {
            res.send({
                response
            })
        })
        .catch(error => {
            res.json({
                message: error
            })
        })
}

//edit jibin 8/26/2021




const ViewBookingDetailsWithBoatAndOwner = async (req, res, next) => {

    let partialcancel = await OwnerPartialCancelation.find({}).catch((error) => console.log(error));
    mongoose.model('Tb_Schedule').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "User_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            {
                "$match": {
                    IsActive: true
                }
            },
            { $sort: { "_id": -1 } },

            {
                $project: {
                    calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, commends: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Is_StandByBooking: 1, IsActive: 1, Booking_ID: 1, Booking_Type: 1, WeekEnd_Count: 1, WeekDay_Count: 1, WeekDay_Count_Edit: 1, WeekEnd_Count_Edit: 1, WeekDay_Count_Reassign: 1, WeekEnd_Count_Reassign: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "OwnerDetails.Sailing_Ability": 1,
                    "OwnerDetails.Last_Name": 1,
                    "OwnerDetails.Family_Name": 1,
                    "OwnerDetails.Emergency_Contact_Mobile": 1,
                    "OwnerDetails.Email": 1,
                    "OwnerDetails.Emergency_Contact_Name": 1,
                    "OwnerDetails.Home_Address": 1,
                    "OwnerDetails.Housekeeping": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.IsActive": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,
                    "BoatDetails.SummerSeason_SDate": 1,
                    "BoatDetails.SummerSeason_EDate": 1,
                    "BoatDetails.WinterSeason_SDate": 1,
                    "BoatDetails.WinterSeason_EDate": 1,



                }
            }
        ]
    ).exec(function (err, response) {

        // var response = responses.map(function(el){
        //     el.BoatDetails = el.BoatDetails.filter(function(x){ return x.IsActive ==true; });
        //     return el;
        // });
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            //cancelled
            mongoose.model('Tb_Schedule').aggregate(
                [
                    {
                        "$lookup": {
                            "from": "tb_addowners",
                            "localField": "User_Id",
                            "foreignField": "_id",
                            "as": "OwnerDetails"
                        }
                    },
                    {
                        "$lookup": {
                            "from": "tb_boatmasters",
                            "localField": "Boat_Id",
                            "foreignField": "_id",
                            "as": "BoatDetails"
                        }
                    },

                    {
                        "$match": {
                            IsActive: false
                        }
                    },
                    { $sort: { "_id": -1 } },

                    {
                        $project: {
                            calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Booking_ID: 1, LOA: 1, BookingStatus: 1, Approved_LOA: 1, WeekEnd_Count: 1, WeekDay_Count: 1, WeekDay_Count_Edit: 1, WeekEnd_Count_Edit: 1, WeekDay_Count_Reassign: 1, WeekEnd_Count_Reassign: 1,

                            "OwnerDetails.Profile_Image": 1,
                            "OwnerDetails.First_Name": 1,
                            "OwnerDetails.Mobile": 1,
                            "OwnerDetails.Parking_Ability": 1,
                            "BoatDetails.Location_Name": 1,
                            "BoatDetails.Boattype_Name": 1,
                            "BoatDetails.Location_Id": 1,
                            "BoatDetails._id": 1,
                            "BoatDetails.Boattype_id": 1,
                            "BoatDetails.Boat_Name": 1,
                            "BoatDetails.Boat_Number": 1,
                            "BoatDetails.Boat_Facility": 1,
                            "BoatDetails.Boat_Description": 1,
                            "BoatDetails. Owners_Allowed": 1,
                            "BoatDetails.Launch_Date": 1,
                            "BoatDetails.PreLaunch_Date": 1,
                            "BoatDetails.Boat_Image": 1,
                            "BoatDetails.Boat_HandBook": 1,
                            "BoatDetails.Boat_Status": 1,
                            "BoatDetails.Total_Days": 1,
                            "BoatDetails.Summer_WeekDays": 1,
                            "BoatDetails. Summer_WeekEndDays": 1,
                            "BoatDetails.Winter_WeekDays": 1,
                            "BoatDetails.Winter_WeekEndDays": 1,



                        }
                    }
                ]
            ).exec(function (err, Cancelledresponse) {


                //cancelled
                //standby


                mongoose.model('Tb_AddStandByBooking').aggregate(
                    [
                        {
                            "$lookup": {
                                "from": "tb_addowners",
                                "localField": "User_Id",
                                "foreignField": "_id",
                                "as": "OwnerDetails"
                            }
                        },
                        {
                            "$lookup": {
                                "from": "tb_boatmasters",
                                "localField": "Boat_Id",
                                "foreignField": "_id",
                                "as": "BoatDetails"
                            }
                        },

                        {
                            "$match": {
                                IsActive: true, showThisBookingInCalendar: true
                            }
                        },
                        { $sort: { "_id": -1 } },

                        {
                            $project: {
                                calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Is_StandByBooking: 1, IsActive: 1, Booking_ID: 1,
                                "OwnerDetails.Profile_Image": 1,
                                "OwnerDetails.First_Name": 1,
                                "OwnerDetails.Mobile": 1,
                                "OwnerDetails.Parking_Ability": 1,
                                "OwnerDetails.Sailing_Ability": 1,
                                "OwnerDetails.Last_Name": 1,
                                "OwnerDetails.Family_Name": 1,
                                "OwnerDetails.Emergency_Contact_Mobile": 1,
                                "OwnerDetails.Email": 1,
                                "OwnerDetails.Emergency_Contact_Name": 1,
                                "OwnerDetails.Home_Address": 1,
                                "BoatDetails._id": 1,
                                "BoatDetails.Location_Name": 1,
                                "BoatDetails.Boattype_Name": 1,
                                "BoatDetails.Location_Id": 1,
                                "BoatDetails.Boattype_id": 1,
                                "BoatDetails.Boat_Name": 1,
                                "BoatDetails.Boat_Number": 1,
                                "BoatDetails.Boat_Facility": 1,
                                "BoatDetails.Boat_Description": 1,
                                "BoatDetails. Owners_Allowed": 1,
                                "BoatDetails.Launch_Date": 1,
                                "BoatDetails.PreLaunch_Date": 1,
                                "BoatDetails.Boat_Image": 1,
                                "BoatDetails.Boat_HandBook": 1,
                                "BoatDetails.Boat_Status": 1,
                                "BoatDetails.Total_Days": 1,
                                "BoatDetails.IsActive": 1,
                                "BoatDetails.Summer_WeekDays": 1,
                                "BoatDetails. Summer_WeekEndDays": 1,
                                "BoatDetails.Winter_WeekDays": 1,
                                "BoatDetails.Winter_WeekEndDays": 1,
                                bookingType: "Stand by booking"



                            }
                        }
                    ]
                ).exec(function (err, StandbyBooking) {

                    //standby





                    res.json({
                        status: true,
                        response, Cancelledresponse, StandbyBooking, partialcancel
                    })
                })
            })
        }

    })
}


//Cancelled Booking



const ViewCancelledBooking = (req, res, next) => {

    mongoose.model('Tb_Schedule').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "User_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            // {
            //     "$match": { IsActive:false
            //     }
            // }, 
            { $sort: { "_id": -1 } },

            {
                $project: {
                    calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Booking_ID: 1, LOA: 1, BookingStatus: 1, Approved_LOA: 1, WeekEnd_Count: 1, WeekDay_Count: 1, WeekDay_Count_Edit: 1, WeekEnd_Count_Edit: 1, Total_Edit_Loa: 1, PartialCancellation_Status: 1, start_CancelledDate: 1, end_CancelledDate: 1, cancaledDays: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,


                }
            }
        ]
    ).exec(function (err, response) {
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            res.json({
                status: true,
                response
            })

        }
    })
}


const ViewCancelledBookingNew = (req, res, next) => {

    mongoose.model('owner_partialcancelations').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "Owner_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            // {
            //     "$match": { IsActive:false
            //     }
            // }, 
            { $sort: { "_id": -1 } },

            {
                $project: {
                    Scheduleid: 1, Booking_ID: 1, LOA: 1, BookingStatus: 1, Approved_LOA: 1, WeekEnd_Count: 1, WeekDay_Count: 1, WeekDay_Count_Edit: 1, WeekEnd_Count_Edit: 1, Total_Edit_Loa: 1, PartialCancellation_Status: 1, start_CancelledDate: 1, end_CancelledDate: 1, cancaledDays: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,


                }
            }
        ]
    ).exec(function (err, response) {
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            res.json({
                status: true,
                response
            })

        }
    })
}




//Get Booking By Boat Id

//Add Booking Days For Owner

async function AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month){
    console.log(start_Date,end_Date,anni_month);

    var StartOfFirst =  momentTimezone(start_Date).tz(process.env.TIME_ZONE).format();
    var BeginDate = StartOfFirst.toString();
  
   var start_mydate = new Date(BeginDate);
    var end_Monthdate_Startyear = new Date((start_mydate.getFullYear()), (start_mydate.getMonth()+1), 0);

    var MonthStart = momentTimezone(end_Monthdate_Startyear).tz(process.env.TIME_ZONE).format();
    var endMonthdateStartyear = MonthStart.toString();
   
  
    var EndOfFirst = momentTimezone(end_Date).tz(process.env.TIME_ZONE).format();
    var EndingDate = EndOfFirst.toString();

    var getMonthEndyear = new Date(EndingDate);
 
   
    var start_Monthdate_Endyear = new Date((getMonthEndyear.getFullYear()), (getMonthEndyear.getMonth()), 1);

    var MonthEnd = momentTimezone(start_Monthdate_Endyear).tz(process.env.TIME_ZONE).format();
    var startMonthdateEndyear = MonthEnd.toString();


    var Start_final_yearOne = moment(start_Date);
     var Start_final_withoutTime_yearOne = Start_final_yearOne.startOf('day');
    let lastday = getLastdayOfmonth(Start_final_withoutTime_yearOne);
                                                                                                  

    
  
    //var YearOne_Start_Date = BeginDate;
    //var YearOne_End_Date = endMonthdateStartyear;
    var YearOne_Start_Date = Start_final_withoutTime_yearOne;
    var YearOne_End_Date = lastday;

    
  
    var YearTwo_Start_Date = startMonthdateEndyear;
    var YearTwo_End_Date = getMonthEndyear;

    var Start_final_yearone = moment(YearOne_Start_Date);
    var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');

    var End_final_yearone = moment(YearOne_End_Date);
    var End_final_withoutTime_yearone = End_final_yearone.startOf('day');


    var Start_final_yeartwo = moment(YearTwo_Start_Date);
    var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');

    var End_final_yeartwo = moment(YearTwo_End_Date);
    var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');

    var yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
    var yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);

   
    /// Calcualte Week Days and Week Ends Separate ///
  
    var weekendarrYearOne =[];
    var weekdayarrYearOne =[]
  
    var weekendarrYearTwo =[];
    var weekdayarrYearTwo =[]
  
  
    var BulKdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    if((yearOne_betweenDays.length)==0){
        var knowDay = new Date(Start_final_withoutTime_yearone);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
    }else{

        for(i=0;i<(yearOne_betweenDays).length;i++){
  
            var knowDay = new Date(yearOne_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
      
      
        }
      

    }

    if((yearTwo_betweenDays.length)==0){

        var knowDay = new Date(Start_final_withoutTime_yeartwo);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);

    }else{

        for(i=0;i<(yearTwo_betweenDays).length;i++){
  
            var knowDay = new Date(yearTwo_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);
        
        
        }

    }

  
    
  
  
  var WeekDayCountYearOne = weekdayarrYearOne.length;
  var WeekEndCountYearOne = weekendarrYearOne.length;
  
  var WeekDayCountYearTwo = weekdayarrYearTwo.length;
  var WeekEndCountYearTwo = weekendarrYearTwo.length;

  
  
  var TotalCountyearOne = parseInt(WeekDayCountYearOne)+parseInt(WeekEndCountYearOne);
  var TotalCountyeartwo = parseInt(WeekDayCountYearTwo)+parseInt(WeekEndCountYearTwo);
  
  var nextyear = parseInt(getMonthEndyear.getFullYear())+1;

  var exp_year =""+nextyear+anni_month;

  var startexp = ""+start_mydate.getFullYear()+anni_month;


 let checkDayExist = await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).catch((error) => console.log(error));
  
  if(!checkDayExist){


  
      var bookedDays = await new OwnerBooking_Days({
          Summer_WeekDays: 0,
          Summer_WeekDays: 0,
          Winter_WeekDays: 0,
          Winter_WeekDays: 0,
          IsActive: true,
          Boat_Id: Boat_id,
          Owner_Id: Owner_id,
          dispStatus:1,
          expiredyear:exp_year
        
        }).save().catch(error => console.log(error))
  
  }
 let Boatresults = await Boats.findOne({ _id: Boat_id, IsActive: true }).catch((error) => console.log(error));
 
  let stopExecution = { stop: false }
  let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo).catch((error) => {
    stopExecution = error
})

if(isAvailableDay.type == "both"){
    var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
    var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
    var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
    var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
    var Summer_Sdate = isAvailableDay.summer_Arr[0];
    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]

    var Winter_Sdate = isAvailableDay.winter_Arr[0];
    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
    var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
    var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
}


else{

    var YearTwoAdd = await AddBookingDays_Owner(Boat_id, Owner_id, YearTwo_Start_Date, end_Date, TotalCountyeartwo, WeekDayCountYearTwo, WeekEndCountYearTwo,exp_year,isAvailableDay.type);

}

let isAvailableDayOne = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, YearOne_Start_Date, YearOne_End_Date).catch((error) => {
    stopExecution = error
})

if(isAvailableDayOne.type == "both"){
    var summerWeekdayWeekendOne = JSON.parse(CheckDaynames(isAvailableDayOne.summer_Arr));
    var winterWeekdayWeekendOne = JSON.parse(CheckDaynames(isAvailableDayOne.winter_Arr));
   
    var TotalSummerDaysOne = parseInt(summerWeekdayWeekendOne.weekdaycnt)+parseInt(summerWeekdayWeekendOne.weekendCnt);
    var TotalWinterDaysOne = parseInt(winterWeekdayWeekendOne.weekdaycnt)+parseInt(winterWeekdayWeekendOne.weekendCnt);
    var Summer_SdateOne = isAvailableDayOne.summer_Arr[0];
    var Summer_EdateOne = isAvailableDayOne.summer_Arr[(isAvailableDayOne.summer_Arr.length)-1]

    var Winter_SdateOne = isAvailableDayOne.winter_Arr[0];
    var Winter_EdateOne = isAvailableDayOne.winter_Arr[(isAvailableDayOne.winter_Arr.length)-1]
    var x1 = AddBookingDays_Owner(Boat_id, Owner_id, Summer_SdateOne, Summer_EdateOne, TotalSummerDaysOne,  summerWeekdayWeekendOne.weekdaycnt, summerWeekdayWeekendOne.weekendCnt,startexp,"summer")
    var y1 = AddBookingDays_Owner(Boat_id, Owner_id, Winter_SdateOne, Winter_EdateOne, TotalWinterDaysOne,  winterWeekdayWeekendOne.weekdaycnt, winterWeekdayWeekendOne.weekendCnt,startexp,"winter")
}else{

    var YearOneAdd = await AddBookingDays_Owner(Boat_id, Owner_id, start_Date, endMonthdateStartyear, TotalCountyearOne, WeekDayCountYearOne, WeekEndCountYearOne,startexp,isAvailableDayOne.type);

}

  
  
  return true;
 
  
  } 
  
async function AddDiffrentYearDaysEdit(Boat_id, Owner_id, start_Date, end_Date,anni_month,start_Date_old,end_Date_old) {

    /// ***  Current Booking ******////

    var StartOfFirst =  momentTimezone(start_Date).tz(process.env.TIME_ZONE).format();
    var BeginDate = StartOfFirst.toString();
  
   var start_mydate = new Date(BeginDate);
    var end_Monthdate_Startyear = new Date((start_mydate.getFullYear()), (start_mydate.getMonth()+1), 0);

    var MonthStart = momentTimezone(end_Monthdate_Startyear).tz(process.env.TIME_ZONE).format();
    var endMonthdateStartyear = MonthStart.toString();
   
    
    let EndOfFirst = momentTimezone(end_Date).tz(process.env.TIME_ZONE).format();
    var EndingDate = EndOfFirst.toString();

    var getMonthEndyear = new Date(EndingDate);
 
   
    var start_Monthdate_Endyear = new Date((getMonthEndyear.getFullYear()), (getMonthEndyear.getMonth()), 1);

    var MonthEnd = momentTimezone(start_Monthdate_Endyear).tz(process.env.TIME_ZONE).format();
    var startMonthdateEndyear = MonthEnd.toString();

    
  
    var YearOne_Start_Date = BeginDate;
    var YearOne_End_Date = endMonthdateStartyear;
  
    var YearTwo_Start_Date = startMonthdateEndyear;
    var YearTwo_End_Date = getMonthEndyear;

    var Start_final_yearone = moment(YearOne_Start_Date);
    var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');

    var End_final_yearone = moment(YearOne_End_Date);
    var End_final_withoutTime_yearone = End_final_yearone.startOf('day');


    var Start_final_yeartwo = moment(YearTwo_Start_Date);
    var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');

    var End_final_yeartwo = moment(YearTwo_End_Date);
    var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');

 
    var yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
    var yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);
  

  
   
    /// Calcualte Week Days and Week Ends Separate ///
  
    var weekendarrYearOne =[];
    var weekdayarrYearOne =[]
  
    var weekendarrYearTwo =[];
    var weekdayarrYearTwo =[]
  
  
    var BulKdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    if((yearOne_betweenDays.length)==0){
        var knowDay = new Date(Start_final_withoutTime_yearone);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
    }else{

        for(i=0;i<(yearOne_betweenDays).length;i++){
  
            var knowDay = new Date(yearOne_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
      
      
        }
      

    }

    if((yearTwo_betweenDays.length)==0){

        var knowDay = new Date(Start_final_withoutTime_yeartwo);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);

    }else{

        for(i=0;i<(yearTwo_betweenDays).length;i++){
  
            var knowDay = new Date(yearTwo_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);
        
        
        }

    }

  
    
  
  
  var WeekDayCountYearOne = weekdayarrYearOne.length;
  var WeekEndCountYearOne = weekendarrYearOne.length;
  
  var WeekDayCountYearTwo = weekdayarrYearTwo.length;
  var WeekEndCountYearTwo = weekendarrYearTwo.length;

  
  
  var TotalCountyearOne = parseInt(WeekDayCountYearOne)+parseInt(WeekEndCountYearOne);
  var TotalCountyeartwo = parseInt(WeekDayCountYearTwo)+parseInt(WeekEndCountYearTwo);
  
  var nextyear = parseInt(getMonthEndyear.getFullYear())+1;

  var exp_year =""+nextyear+anni_month;

  var startexp = ""+start_mydate.getFullYear()+anni_month;


  


  //*** Previous Booking  */

    /// ***  Current Booking ******////

    //console.log(end_Date_old,"------------end_Date_old");

    let StartOfFirstPrev =  momentTimezone(start_Date_old).tz(process.env.TIME_ZONE).format();
    var BeginDatePrev = StartOfFirstPrev.toString();
  
   var start_mydatePrev = new Date(BeginDatePrev);
    var end_Monthdate_StartyearPrev = new Date((start_mydatePrev.getFullYear()), (start_mydatePrev.getMonth()+1), 0);

    var MonthStartPrev = momentTimezone(end_Monthdate_StartyearPrev).tz(process.env.TIME_ZONE).format();
    var endMonthdateStartyearPrev = MonthStartPrev.toString();
   
    
    var EndOfFirstPrev = momentTimezone(end_Date_old).tz(process.env.TIME_ZONE).format();
    var EndingDatePrev = EndOfFirstPrev.toString();

    var getMonthEndyearPrev = new Date(EndingDatePrev);
 
   
    var start_Monthdate_EndyearPrev = new Date((getMonthEndyearPrev.getFullYear()), (getMonthEndyearPrev.getMonth()), 1);

    var MonthEndPrev = momentTimezone(start_Monthdate_EndyearPrev).tz(process.env.TIME_ZONE).format();
    var startMonthdateEndyearPrev = MonthEndPrev.toString();

    
  
    var YearOne_Start_DatePrev= BeginDatePrev;
    var YearOne_End_DatePrev = endMonthdateStartyearPrev;
  
    var YearTwo_Start_DatePrev = startMonthdateEndyearPrev;
    var YearTwo_End_DatePrev = getMonthEndyearPrev;

    var Start_final_yearonePrev = moment(YearOne_Start_DatePrev);
    var Start_final_withoutTime_yearonePrev = Start_final_yearonePrev.startOf('day');

    var End_final_yearonePrev = moment(YearOne_End_DatePrev);
    var End_final_withoutTime_yearonePrev = End_final_yearonePrev.startOf('day');


    var Start_final_yeartwoPrev = moment(YearTwo_Start_DatePrev);
    var Start_final_withoutTime_yeartwoPrev = Start_final_yeartwoPrev.startOf('day');

    var End_final_yeartwoPrev = moment(YearTwo_End_DatePrev);
    var End_final_withoutTime_yeartwoPrev = End_final_yeartwoPrev.startOf('day');

  
    if(start_mydatePrev.getMonth() == getMonthEndyearPrev.getMonth()){

       
        var yearOne_betweenDaysPrev = getDaysBetweenDates(Start_final_withoutTime_yearonePrev,End_final_withoutTime_yeartwoPrev);

        var prevflag = 1;
       

    }else{

        var yearOne_betweenDaysPrev = getDaysBetweenDates(Start_final_withoutTime_yearonePrev,End_final_withoutTime_yearonePrev)
        var yearTwo_betweenDaysPrev = getDaysBetweenDates(Start_final_withoutTime_yeartwoPrev,End_final_withoutTime_yeartwoPrev);

        var prevflag=0;


    }

   
//console.log(yearTwo_betweenDaysPrev,"-----------------yearTwo_betweenDaysPrev");
   
    /// Calcualte Week Days and Week Ends Separate ///
  
    var weekendarrYearOnePrev =[];
    var weekdayarrYearOnePrev =[]
  
    var weekendarrYearTwoPrev =[];
    var weekdayarrYearTwoPrev =[]
 
  
    var BulKdaysPrev = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    if((yearOne_betweenDaysPrev.length)==0){
        var knowDayPrev = new Date(Start_final_withoutTime_yearonePrev);
        if((BulKdaysPrev[knowDayPrev.getDay()] == "Sunday")||(BulKdaysPrev[knowDayPrev.getDay()] == "Saturday"))
        weekendarrYearOnePrev.push( BulKdaysPrev[knowDayPrev.getDay()]);
        else
        weekdayarrYearOnePrev.push(BulKdaysPrev[knowDayPrev.getDay()]);
    }else{

        for(i=0;i<(yearOne_betweenDaysPrev).length;i++){
  
            var knowDayPrev = new Date(yearOne_betweenDaysPrev[i]);
           
            if((BulKdays[knowDayPrev.getDay()] == "Sunday")||(BulKdays[knowDayPrev.getDay()] == "Saturday"))
            weekendarrYearOnePrev.push( BulKdays[knowDayPrev.getDay()]);
            else
            weekdayarrYearOnePrev.push(BulKdays[knowDayPrev.getDay()]);
      
      
        }
      

    }

    if(prevflag ==0){

        if((yearTwo_betweenDaysPrev.length)==0){

            var knowDayPrev = new Date(Start_final_withoutTime_yeartwoPrev);
            if((BulKdaysPrev[knowDayPrev.getDay()] == "Sunday")||(BulKdays[knowDayPrev.getDay()] == "Saturday"))
            weekendarrYearTwoPrev.push( BulKdaysPrev[knowDayPrev.getDay()]);
            else
            weekdayarrYearTwoPrev.push(BulKdaysPrev[knowDayPrev.getDay()]);
    
        }else{
    
            for(i=0;i<(yearTwo_betweenDaysPrev).length;i++){
      
                var knowDayPrev = new Date(yearTwo_betweenDaysPrev[i]);
                if((BulKdaysPrev[knowDayPrev.getDay()] == "Sunday")||(BulKdaysPrev[knowDayPrev.getDay()] == "Saturday"))
                weekendarrYearTwoPrev.push( BulKdaysPrev[knowDayPrev.getDay()]);
                else
                weekdayarrYearTwoPrev.push(BulKdaysPrev[knowDayPrev.getDay()]);
            
            
            }
    
        }

    }
   
   

  //console.log(weekdayarrYearTwoPrev,"----------weekdayarrYearTwoPrev");

  
  
  var WeekDayCountYearOnePrev = weekdayarrYearOnePrev.length;
  var WeekEndCountYearOnePrev = weekendarrYearOnePrev.length;

  if(prevflag == 0){

    var WeekDayCountYearTwoPrev = weekdayarrYearTwoPrev.length;
    var WeekEndCountYearTwoPrev = weekendarrYearTwoPrev.length;
        
  }
  else{

    var WeekDayCountYearTwoPrev = 0;
    var WeekEndCountYearTwoPrev =0;

  }


  var TotalCountyearOnePrev = parseInt(WeekDayCountYearOnePrev)+parseInt(WeekEndCountYearOnePrev);
  var TotalCountyeartwoPrev = parseInt(WeekDayCountYearTwoPrev)+parseInt(WeekEndCountYearTwoPrev);

  
 

  if(start_mydate.getMonth() == start_mydatePrev.getMonth()){ 

    var weekDayReassignOne = Math.abs(WeekDayCountYearOne-WeekDayCountYearOnePrev);
    var weekEndReassignOne = Math.abs(WeekEndCountYearOne-WeekEndCountYearOnePrev);
  

  }else{

    var weekDayReassignOne = WeekDayCountYearOne;
    var weekEndReassignOne = WeekEndCountYearOne;
  
  }

  //console.log(WeekDayCountYearTwo,"-----------WeekDayCountYearTwo");

  //console.log(WeekDayCountYearTwoPrev,"-----------WeekDayCountYearTwoPrev");


 
  if(getMonthEndyearPrev.getMonth()==getMonthEndyear.getMonth()){

      if(prevflag == 0){

        var weekDayReassignTwo = WeekDayCountYearTwo-WeekDayCountYearTwoPrev;
        var weekEndReassignTwo = WeekEndCountYearTwo-WeekEndCountYearTwoPrev;

      }else{
        var weekDayReassignTwo = WeekDayCountYearTwo-WeekDayCountYearOnePrev;
        var weekEndReassignTwo = WeekEndCountYearTwo-WeekEndCountYearOnePrev;
      }

    

  }else{

    var weekDayReassignTwo = WeekDayCountYearTwo;
    var weekEndReassignTwo = WeekEndCountYearTwo;

  }


  //console.log(weekDayReassignTwo,"-----------weekDayReassignTwo");

  //console.log(weekEndReassignTwo,"-----------weekEndReassignTwo");

 

 var TotalCountYearReassignOne = TotalCountyearOne-TotalCountyearOnePrev;
 var TotalCountYearReassignTwo = TotalCountyearOne-TotalCountyearOnePrev;

 
  AddBookingDays_Owner(Boat_id, Owner_id, YearOne_Start_Date, YearOne_End_Date, TotalCountYearReassignOne, weekDayReassignOne, weekEndReassignOne,startexp);
  AddBookingDays_Owner(Boat_id, Owner_id, YearTwo_Start_Date, YearTwo_End_Date, TotalCountYearReassignTwo, weekDayReassignTwo, weekEndReassignTwo,exp_year);
  

    
};


async function AddDiffrentYearDaysEditMerge(Boat_id, Owner_id, start_Date, end_Date,anni_month,type) {

    /// ***  Current Booking ******//// 
    console.log(start_Date,end_Date,"----------------PPPp");

    var StartOfFirst =  momentTimezone(start_Date).tz(process.env.TIME_ZONE).format();
    var BeginDate = StartOfFirst.toString();
  
   var start_mydate = new Date(BeginDate);
    var end_Monthdate_Startyear = new Date((start_mydate.getFullYear()), (start_mydate.getMonth()+1), 0);

    var MonthStart = momentTimezone(end_Monthdate_Startyear).tz(process.env.TIME_ZONE).format();
    var endMonthdateStartyear = MonthStart.toString();
   
    
    let EndOfFirst = momentTimezone(end_Date).tz(process.env.TIME_ZONE).format();
    var EndingDate = EndOfFirst.toString();

    var getMonthEndyear = new Date(EndingDate);
 
   
    var start_Monthdate_Endyear = new Date((getMonthEndyear.getFullYear()), (getMonthEndyear.getMonth()), 1);

    var MonthEnd = momentTimezone(start_Monthdate_Endyear).tz(process.env.TIME_ZONE).format();
    var startMonthdateEndyear = MonthEnd.toString();

    
  
    var YearOne_Start_Date = BeginDate;
    var YearOne_End_Date = endMonthdateStartyear;
  
    var YearTwo_Start_Date = startMonthdateEndyear;
    var YearTwo_End_Date = getMonthEndyear;

    var Start_final_yearone = moment(YearOne_Start_Date);
    var Start_final_withoutTime_yearone = Start_final_yearone.startOf('day');

    var End_final_yearone = moment(YearOne_End_Date);
    var End_final_withoutTime_yearone = End_final_yearone.startOf('day');


    var Start_final_yeartwo = moment(YearTwo_Start_Date);
    var Start_final_withoutTime_yeartwo = Start_final_yeartwo.startOf('day');

    var End_final_yeartwo = moment(YearTwo_End_Date);
    var End_final_withoutTime_yeartwo = End_final_yeartwo.startOf('day');

    console.log(Start_final_withoutTime_yearone);

    console.log(End_final_withoutTime_yearone);

    console.log(Start_final_withoutTime_yeartwo);

    console.log(End_final_withoutTime_yeartwo);


 
    var yearOne_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yearone,End_final_withoutTime_yearone)
    var yearTwo_betweenDays = getDaysBetweenDates(Start_final_withoutTime_yeartwo,End_final_withoutTime_yeartwo);
  

  
   
    /// Calcualte Week Days and Week Ends Separate ///
  
    var weekendarrYearOne =[];
    var weekdayarrYearOne =[]
  
    var weekendarrYearTwo =[];
    var weekdayarrYearTwo =[]
  
  
    var BulKdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    if((yearOne_betweenDays.length)==0){
        var knowDay = new Date(Start_final_withoutTime_yearone);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
    }else{

        for(i=0;i<(yearOne_betweenDays).length;i++){
  
            var knowDay = new Date(yearOne_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearOne.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearOne.push(BulKdays[knowDay.getDay()]);
      
      
        }
      

    }

    if((yearTwo_betweenDays.length)==0){

        var knowDay = new Date(Start_final_withoutTime_yeartwo);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);

    }else{

        for(i=0;i<(yearTwo_betweenDays).length;i++){
  
            var knowDay = new Date(yearTwo_betweenDays[i]);
            if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
            weekendarrYearTwo.push( BulKdays[knowDay.getDay()]);
            else
            weekdayarrYearTwo.push(BulKdays[knowDay.getDay()]);
        
        
        }

    }

  
    console.log(weekdayarrYearOne,"-------weekdayarrYearOne");
    console.log(weekendarrYearOne,"-------weekdayarrYearOne");

    console.log(weekdayarrYearTwo,"-------weekdayarrYearTwo");
    console.log(weekendarrYearTwo,"-------weekendarrYearTwo");
  
  
  var WeekDayCountYearOne = weekdayarrYearOne.length;
  var WeekEndCountYearOne = weekendarrYearOne.length;
  
  var WeekDayCountYearTwo = weekdayarrYearTwo.length;
  var WeekEndCountYearTwo = weekendarrYearTwo.length;

  
  
  var TotalCountyearOne = parseInt(WeekDayCountYearOne)+parseInt(WeekEndCountYearOne);
  var TotalCountyeartwo = parseInt(WeekDayCountYearTwo)+parseInt(WeekEndCountYearTwo);
  
  var nextyear = parseInt(getMonthEndyear.getFullYear())+1;

  var exp_year =""+nextyear+anni_month;

  var startexp = ""+start_mydate.getFullYear()+anni_month;


  


 

  let OwnerbookigpendingPrev = await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:startexp}).catch((error) => console.log(error));

 if(OwnerbookigpendingPrev){

    if(type == 'summer'){

        var summerweekday = OwnerbookigpendingPrev.Summer_WeekDays;
        var summerweekend = OwnerbookigpendingPrev.Summer_WeekEndDays;
    }else{

        var winterweekday = OwnerbookigpendingPrev.Winter_WeekDays;
        var winterweekend = OwnerbookigpendingPrev.Winter_WeekEndDays;


    }

     
 }

 let OwnerbookigpendingNext = await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).catch((error) => console.log(error));

 if(OwnerbookigpendingNext){

    if(type == 'summer'){

        var summerweekdayNext = OwnerbookigpendingNext.Summer_WeekDays;
        var summerweekendNext = OwnerbookigpendingNext.Summer_WeekEndDays;
    }else{

        var winterweekdayNext = OwnerbookigpendingNext.Winter_WeekDays;
        var winterweekendNext = OwnerbookigpendingNext.Winter_WeekEndDays;


    }

     
 }

 if(type == "summer"){

    var RemaingOneWeekday = WeekDayCountYearOne;
    var RemaingOneWeekend = WeekEndCountYearOne;

    if(WeekDayCountYearTwo>0)
    var RemaingTwoWeekday = WeekDayCountYearTwo -summerweekdayNext;
    else
    var RemaingTwoWeekday =WeekDayCountYearTwo;
    if(WeekEndCountYearTwo>0)
    var RemaingTwoWeekend = WeekEndCountYearTwo -summerweekendNext;
    else
    var RemaingTwoWeekend =WeekEndCountYearTwo;

 }else{

  
    var RemaingOneWeekday = WeekDayCountYearOne;
    var RemaingOneWeekend = WeekEndCountYearOne;

    if(WeekDayCountYearTwo>0)
    var RemaingTwoWeekday = WeekDayCountYearTwo -winterweekdayNext;
    else
    var RemaingTwoWeekday =WeekDayCountYearTwo;
    if(WeekEndCountYearTwo>0)
    var RemaingTwoWeekend = WeekEndCountYearTwo -winterweekendNext;
    else
    var RemaingTwoWeekend =WeekEndCountYearTwo;

   

 }

 


 AddBookingDays_Owner(Boat_id, Owner_id, YearOne_Start_Date, YearOne_End_Date, TotalCountyearOne, RemaingOneWeekday, RemaingOneWeekend,startexp);
 AddBookingDays_Owner(Boat_id, Owner_id, YearTwo_Start_Date, YearTwo_End_Date, TotalCountyeartwo, RemaingTwoWeekday, RemaingTwoWeekend,exp_year);

  
    
};




async function AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,type) {

    console.log("Inside AddBookingDays_Owner");
    //console.log(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count)

    console.log(exp_year,"---------EXPTAER-------");

    console.log(WeekDay_Count, "WeekDay_Count AddBookingDays_Owner")
    console.log(WeekEnd_Count, "WeekEnd_Count AddBookingDays_Owner")

    /*var Start_final = moment(start_Date);
    var Start_final_withoutTime = Start_final.startOf('day');

    var End_final = moment(end_Date);
    var End_final_withoutTime = End_final.startOf('day');*/

    
   

    //Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (BoatresultsSummer) => {

       /* let stopExecution = { stop: false }
        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, BoatresultsSummer.SummerSeason_SDate, BoatresultsSummer.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
            console.log(error)
            stopExecution = error
        })


        if (stopExecution.stop) {
            return res.json({ status: true, message: stopExecution.error })
        }*/
        //console.log(isAvailableDay.type,"-------------------isAvailableDay.type");

        if (type=="summer")//check Date Between Summer Dates
        {




            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {


                if (result == null) {


                    let AddBookingDays_Owner = new OwnerBooking_Days({

                        Boat_Id: Boat_id,
                        Owner_Id: Owner_id,
                        Summer_WeekDays: WeekDay_Count,
                        Summer_WeekEndDays: WeekEnd_Count,
                        IsActive: true,
                        Current_Time: moment(Date.now()),
                        Updated_time: moment(Date.now()),
                        expiredyear:exp_year

                    });

                    AddBookingDays_Owner.save()
                        .then(response => {
                            return true;
                        })
                        .catch(error => {
                            console.log(error)
                            return false;
                        })

                }

                else {
                    console.log('updation1')
                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {

                        var S_day = result.Summer_WeekDays;
                        var E_day = result.Summer_WeekEndDays;

                        console.log(S_day, "S_day")
                        console.log(E_day, "E_day")
                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year},
                            {

                                Boat_Id: Boat_id,
                                Owner_Id: Owner_id,
                                Summer_WeekDays: WeekDay_Count + S_day,
                                Summer_WeekEndDays: WeekEnd_Count + E_day,
                                IsActive: true,
                                Current_Time: moment(Date.now()),
                                Updated_time: moment(Date.now()),
                                expiredyear:exp_year
                            },

                            function (err, data) {
                                if (err) {
                                    console.log('fail')
                                    return false

                                }
                                else {
                                    console.log('success')
                                    return true

                                }

                            });
                    })
                }

            });
        }
        else {
            //winter
            console.log('iam here')
            OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {


                console.log(result, "check if exist")

                if (result == null) {
                    console.log('iam here')


                    let AddBookingDays_Owner = new OwnerBooking_Days({

                        Boat_Id: Boat_id,
                        Owner_Id: Owner_id,
                        Winter_WeekDays: WeekDay_Count,
                        Winter_WeekEndDays: WeekEnd_Count,
                        IsActive: true,
                        Current_Time: moment(Date.now()),
                        Updated_time: moment(Date.now()),
                        expiredyear:exp_year

                    });

                    AddBookingDays_Owner.save()
                        .then(response => {

                            return true
                        })
                        .catch(error => {
                            console.log(error)
                            return false
                        })

                }

                else {
                    OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year }).then(result => {
                        
                        var WS_day = result.Winter_WeekDays;
                        var WE_day = result.Winter_WeekEndDays;

                        console.log(result, "existing booked data")

                        console.log(WS_day, WE_day, "WS AND WE DAYS");

                        console.log("WeekDay_Count+WS_day", WeekDay_Count + WS_day);

                        console.log("WeekEnd_Count+WE_day", WeekEnd_Count + WE_day);

                        console.log({ Boat_Id: Boat_id, Owner_Id: Owner_id });

                        console.log('in Updation winter');
                        OwnerBooking_Days.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year },
                            {

                                Boat_Id: Boat_id,
                                Owner_Id: Owner_id,
                                Winter_WeekDays: WeekDay_Count + WS_day,
                                Winter_WeekEndDays: WeekEnd_Count + WE_day,
                                IsActive: true,
                                Current_Time: moment(Date.now()),
                                Updated_time: moment(Date.now()),
                                expiredyear:exp_year
                            },

                            { new: true },

                            function (err, data) {
                                if (err) {
                                    console.log(err, "error in updateing pending days")
                                    return false
                                }
                                else {
                                    console.log(data, "updated data")
                                    console.log('sucesssss')
                                    return true

                                }

                            });
                    })
                }

            });


            //winter
        }
    //})

};





//Add Booking Days For Owner

//get Owner Pending Days
//get Owner Pending Days
const GetAllPendingDaysOfOwner = async (req, res, next) => {
  
    var Owner_id = mongoose.Types.ObjectId(req.body.Owner_Id);
    var Boat_id = mongoose.Types.ObjectId(req.body.Boat_Id);
    var year = req.body.year;
    var month = req.body.month;
    
    var arr = [];

  let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
  //console.log(AnniversaryDate,"AnniversaryDate");
  let getanniversary = new Date(AnniversaryDate.Launch_Date);
   let anni_year =  getanniversary.getFullYear();
  let anni_month = (getanniversary.getMonth())+1;
  
  let nextyear = (parseInt(year)+1);
  if(month<anni_month)
  var exp_year = ""+year+anni_month;
  else
  var exp_year =""+nextyear+anni_month;
  

  let check_Booking = await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id}).catch((error) => console.log(error));
  if(!check_Booking){

   var bookedDays = await new OwnerBooking_Days({
        Summer_WeekDays: 0,
        Summer_WeekDays: 0,
        Winter_WeekDays: 0,
        Winter_WeekDays: 0,
        IsActive: true,
        Boat_Id: Boat_id,
        Owner_Id: Owner_id,
        dispStatus:1,
        expiredyear:exp_year
      
      }).save().catch(error => console.log(error))
      
      
  }
  else{

    var condition1 ={ Boat_Id: Boat_id, Owner_Id: Owner_id};
    var update1  ={dispStatus:0};
    var  updatePending = await OwnerBooking_Days.update(condition1,update1,{multi:true}).catch((error) => console.log(error));


      let checkexpire =  await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year}).catch((error) => console.log(error));

        if(checkexpire){

           
            var condition ={ Boat_Id: Boat_id, Owner_Id: Owner_id,expiredyear:exp_year};
            var update  ={dispStatus:1};
            var  updatePending = await OwnerBooking_Days.update(condition,update).catch((error) => console.log(error));
  
    }else{

        var bookedDays = await new OwnerBooking_Days({
            Summer_WeekDays: 0,
            Summer_WeekDays: 0,
            Winter_WeekDays: 0,
            Winter_WeekDays: 0,
            IsActive: true,
            Boat_Id: Boat_id,
            Owner_Id: Owner_id,
            dispStatus:1,
            expiredyear:exp_year
          
          }).save().catch(error => console.log(error))


    }


   

  }



    //reset start
    //Check duration and current year and lastly reseted year then if it is not matched reset reset booked dates to allocated dates



    let currentTime = new Date().getTime();




    let durationData = await Duration.findOne({ Boat_Id: Boat_id, IsActive: true, Owner_Id: Owner_id }).catch((error) => console.log(error))

    var ExpiryDateDuration = "";

    if (durationData) {

        var ExpiryDateDuration = durationData.Duration_EDate;

        console.log(new Date(currentTime));

        console.log(new Date(durationData.lastResetedAnniversary));

        console.log("currentTime",currentTime);
        console.log("lastResetedAnniversary",durationData.lastResetedAnniversary)


        /*if (currentTime >= durationData.lastResetedAnniversary) {

            console.log("inside grrater anivers")

            let allocatedDays = await manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));
            let bookedDays = await OwnerBooking_Days.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error))

            //if there is no booked day create one


            if (!bookedDays) {



                bookedDays = await new OwnerBooking_Days({
                    Summer_WeekDays: 0,
                    Summer_WeekDays: 0,
                    Winter_WeekDays: 0,
                    Winter_WeekDays: 0,
                    IsActive: true,
                    Boat_Id: Boat_id,
                    Owner_Id: Owner_id
                }).save().catch(error => console.log(error))



            }


            //reset 
            if (allocatedDays && bookedDays) {

                console.log("________________________PENDING______________DAYA");


                //taking backup of pending days and saving it to array 

                let currentYear = moment(new Date()).format('YYYY');

                let pendingDaysData = {}
                pendingDaysData[currentYear] = {
                    Summer_WeekDays: bookedDays.Summer_WeekDays,
                    Summer_WeekEndDays: bookedDays.Summer_WeekEndDays,
                    Winter_WeekDays: bookedDays.Winter_WeekDays,
                    Winter_WeekEndDays: bookedDays.Winter_WeekEndDays

                }
                bookedDays.previousYearsPendingDaysData = bookedDays.previousYearsPendingDaysData.concat([pendingDaysData])



                bookedDays.Summer_WeekDays = 0;
                bookedDays.Summer_WeekEndDays = 0;
                bookedDays.Winter_WeekDays = 0;
                bookedDays.Winter_WeekEndDays = 0;

                await bookedDays.save().catch((error) => console.log(error))
                let currentAnniversary = new Date(durationData.lastResetedAnniversary)
                console.log(new Date(currentAnniversary))
                let nextAnniversary = currentAnniversary.setFullYear(currentAnniversary.getFullYear() + 1)
                console.log(new Date(nextAnniversary))
                durationData.lastResetedAnniversary = nextAnniversary;
                await durationData.save().catch((error) => console.log(error))
            }
        }*/
    }



    //reset end


    mongoose
        .model("Tb_OwnerBookingDays")
        .aggregate([
            {
                $lookup: {
                    from: "tb_boatmasters",
                    localField: "Boat_Id",
                    foreignField: "_id",
                    as: "BoatDetails",
                },
            },
            {
                $match: { Owner_Id: Owner_id, Boat_Id: Boat_id,dispStatus:1 },
            },
            {
                $project: {
                    Summer_WeekDays: 1,
                    Summer_WeekEndDays: 1,
                    Winter_WeekDays: 1,
                    Winter_WeekEndDays: 1,

                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    // "BoatDetails.Winter_WeekDays": 1,
                    // "BoatDetails.Winter_WeekEndDays": 1,
                },
            },
        ])
        .exec(function (err, BookedDays) {
            manageBoat.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).then((OwnerAllocationDays) => {
                Boats.findOne({ _id: Boat_id }).then((LaunchPreLaunch) => {
                    console.log(LaunchPreLaunch.Launch_Date);
                    var AllocatedDays = [];
                    AllocatedDays.push({
                        Summer_WeekDays: OwnerAllocationDays.Summer_WeekDays,
                        Summer_WeekEndDays: OwnerAllocationDays.Summer_WeekEndDays,
                        Winter_WeekDays: OwnerAllocationDays.Winter_WeekDays,
                        Winter_WeekEndDays: OwnerAllocationDays.Winter_WeekEndDays,
                        Launch_Date: LaunchPreLaunch.Launch_Date,
                        PreLaunch_Date: LaunchPreLaunch.PreLaunch_Date,
                    });

                    res.json({
                        status: true,
                        Response: { BookedDays, AllocatedDays, "ExpiryDate": ExpiryDateDuration.replace(/-/g, "/") },
                    });
                });
            });
        });
};




//get Owner Pending Days

// Accept reject



const StandByBooking_AcceptReject = (req, res, next) => {
    const bookingid = req.body._id
    const actions = req.body.action_todo;

    AddStandByBooking.findById({ _id: mongoose.Types.ObjectId(bookingid) }).then(async (response) => {
        var ownerid = response.User_Id;
        var boatname = response.Boat_Name;
        var starttime = response.start;
        var endtime = response.end;
        var Booked_time = response.Current_Time;
      
        let suspendcheck = await manageBoat.findOne({ Boat_Id: mongoose.Types.ObjectId(response.Boat_Id), Owner_Id: mongoose.Types.ObjectId(ownerid) }).catch((error) => console.log(error));
        if (suspendcheck.Block == false)
            return res.json({
                status: false,
                message: 'Suspended'
            })

        if (actions == "Accept") {

            const ogWeekendDaysCount = response.WeekEnd_Count;
            const ogWeekDaysCount = response.WeekDay_Count;
            const ogTotalDaysCount = response.TotalDay_Count;

            //console.log(response, 'response in StandByBooking_AcceptReject')
            // check if stand by booking need to be merged

            const dayBeforeIncomingStartDate = new Date(new Date(new Date(starttime).setDate(new Date(starttime).getDate() - 1)).setUTCHours(00, 00, 00, 00));
            const dayAfterIncomingEndDate = new Date(new Date(new Date(endtime).setDate(new Date(endtime).getDate() + 1)).setUTCHours(00, 00, 00, 00));

            console.log(dayBeforeIncomingStartDate, "dayBeforeIncomingStartDate")
            console.log(dayAfterIncomingEndDate, "dayAfterIncomingEndDate")


            const bookingBeforeStandByBooking = await Schedule.findOne({ Boat_Id: response.Boat_Id, User_Id: response.User_Id, IsActive: true, $and: [{ start_NoTime: { $lte: dayBeforeIncomingStartDate } }, { end_NoTime: { $gte: dayBeforeIncomingStartDate } }] }).catch((error) => console.log(error))
            const bookingAfterStandByBooking = await Schedule.findOne({ Boat_Id: response.Boat_Id, User_Id: response.User_Id, IsActive: true, $and: [{ start_NoTime: { $lte: dayAfterIncomingEndDate } }, { end_NoTime: { $gte: dayAfterIncomingEndDate } }] }).catch((error) => console.log(error))

            bookingBeforeStandByBooking && console.log("bookingBeforeStandByBooking found")
            bookingAfterStandByBooking && console.log("bookingAfterStandByBooking found")

            // if bookingBeforeStandByBooking and bookingAfterStandByBooking found change start and end date and also change totalday count weekday count weekend count

            if (bookingBeforeStandByBooking && bookingAfterStandByBooking) {
                response.start = bookingBeforeStandByBooking.start
                response.end = bookingAfterStandByBooking.end
                response.start_NoTime = bookingBeforeStandByBooking.start_NoTime
                response.end_NoTime = bookingAfterStandByBooking.end_NoTime

                response.TotalDay_Count = response.TotalDay_Count + bookingBeforeStandByBooking.Total_DaysBooked + bookingAfterStandByBooking.Total_DaysBooked;
                response.WeekDay_Count = response.WeekDay_Count + bookingBeforeStandByBooking.WeekDay_Count + bookingAfterStandByBooking.WeekDay_Count;
                response.WeekEnd_Count = response.WeekEnd_Count + bookingBeforeStandByBooking.WeekEnd_Count + bookingAfterStandByBooking.WeekEnd_Count;

                //now delete both bookingBeforeStandByBooking and bookingAfterStandByBooking by that i mean update it IsActive:false

                await Schedule.updateMany({ $or: [{ _id: bookingBeforeStandByBooking._id }, { _id: bookingAfterStandByBooking._id }] }, { IsActive: false }).catch((error) => console.log(error))
            } else if (bookingBeforeStandByBooking) {
                response.start = bookingBeforeStandByBooking.start
                response.start_NoTime = bookingBeforeStandByBooking.start_NoTime

                response.TotalDay_Count = response.TotalDay_Count + bookingBeforeStandByBooking.Total_DaysBooked;
                response.WeekDay_Count = response.WeekDay_Count + bookingBeforeStandByBooking.WeekDay_Count;
                response.WeekEnd_Count = response.WeekEnd_Count + bookingBeforeStandByBooking.WeekEnd_Count;

                //now delete bookingBeforeStandByBooking

                await Schedule.updateOne({ _id: bookingBeforeStandByBooking._id }, { IsActive: false }).catch((error) => console.log(error))

            } else if (bookingAfterStandByBooking) {
                response.end = bookingAfterStandByBooking.end
                response.end_NoTime = bookingAfterStandByBooking.end_NoTime

                response.TotalDay_Count = response.TotalDay_Count + bookingAfterStandByBooking.Total_DaysBooked;
                response.WeekDay_Count = response.WeekDay_Count + bookingAfterStandByBooking.WeekDay_Count;
                response.WeekEnd_Count = response.WeekEnd_Count + bookingAfterStandByBooking.WeekEnd_Count;

                //now delete bookingAfterStandByBooking

                await Schedule.updateOne({ _id: bookingAfterStandByBooking._id }, { IsActive: false }).catch((error) => console.log(error))

            }



            var obj = Object();
            obj.body = response;
            jsonObject = obj;

            console.log(jsonObject, 'json object passed to AddScheduleStandByBooking')



            AddScheduleStandByBooking(jsonObject, ogWeekendDaysCount, ogWeekDaysCount, ogTotalDaysCount).then(() => {

                AddStandByBooking.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(bookingid) },
                    {

                        BookingStatus: "Accepted",
                        IsActive: false,
                        Updated_time: moment(Date.now())

                    },

                    function (err, data) {
                        if (err) {

                        }
                        else {
                            //mail   
                            NewOwners.findById({ _id: mongoose.Types.ObjectId(ownerid) }).then(Ownerresponse => {
                                var Email_id = Ownerresponse.Email;
                                //mail

                                const emailState = 'StandBy Booking Accepted.';
                                const emailContent = `Dear ${Ownerresponse.First_Name}, The StandBybooking for Boat ${boatname} has accepted by Smart Boating Team on ${getCurrentTimeFormatted()}`;
                                const emailContentAdmin = `Dear Adminsistrator, You have accepted the standby booking for the owner ${Ownerresponse.First_Name} on Boat ${boatname} at ${getCurrentTimeFormatted()}`;
                                const emailDetailName = 'Booking Details'
                                const emailDetails = [
                                    { key: 'Boat Name', value: boatname },
                                    { key: 'Booking Date', value: Booked_time },
                                ];
                                const emailNameAndLink = {
                                    name: 'Booking  Link',
                                    link: `${process.env.CLIENT_URL}/boat-bookings`
                                }

                                var mailOptions = {

                                    from: "noreply.smartboatbooking@gmail.com",
                                    to: Email_id,
                                    subject: 'Standby Booking Accepted',
                                    html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)


                                };

                                transporter.sendMail(mailOptions, function (error, info) {

                                });

                                var mailOptionsAdmin = {

                                    from: "noreply.smartboatbooking@gmail.com",
                                    to: "admin@smartboating.com.au",
                                    subject: 'Standby Booking Accepted',
                                    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)


                                };

                                transporter.sendMail(mailOptionsAdmin, function (error, info) {



                                });
                                //mail
                                res.json({
                                    status: true,
                                    message: 'Booking Accepted Successfully'
                                })

                            })
                        }
                    });

            }).catch((error) => {
                res.json(error)
            })


        }
        else {
            NewOwners.findById({ _id: mongoose.Types.ObjectId(ownerid) }).then(Ownerresponse => {
                var Email_id = Ownerresponse.Email;

                AddStandByBooking.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(bookingid) },
                    {

                        BookingStatus: "Rejected",
                        IsActive: false,
                        Updated_time: moment(Date.now()),
                        showThisBookingInCalendar: false

                    },

                    async function (err, data) {
                        
                        if (err) {
                            res.json({
                                status: false,
                                message: 'AN ERROR OCCURED'
                            })
                        }
                        else {



                            //set stand by booking days to a dummy user because no one else can make this booking and every owners will see it as a red booking

                            //determine stand by booking days

                            //get total day saved in db and real total days differnce . differnce is how many stand booking done

                            const totalDaysInDB = response.TotalDay_Count;
                            const realTotalDays = moment(new Date(endtime)).diff(moment(new Date(starttime)), "days") + 1;
                            const standByBookingDaysCount = realTotalDays - totalDaysInDB;
                            const allBookedDays = getDaysBetweenDates(starttime, endtime);
                            console.log(allBookedDays,"ALLBOOKDAYSS");
                            const standByBookingDays = [];

                            let standByBookingCounter = 0;
                            while (standByBookingCounter < standByBookingDaysCount) {
                                standByBookingDays.push(allBookedDays[standByBookingCounter])
                                standByBookingCounter++
                            }

                            console.log(standByBookingDays, "standByBookingDays");
                            //console.log(standByBookingDays[0]);
                            console.log("leng:::" + standByBookingDays.length);

                            if (((standByBookingDays.length) == 1)) {
                               
                                var standbybookStart = response.start;
                                var standBYEND = response.start;
                                var standarr1 =moment(response.start);
                                
                                var standbyWithouttime = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));
                                var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));
                            }
                            else if((standByBookingDays.length)==0){

                                var standbybookStart = response.start;
                                let isoDate = new Date(response.end);
                                let resulttime = isoDate.getUTCHours();
                                var standarr1 = moment(response.start);
                                var standbyWithouttime = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));

                                var standbyEnd = new Date(allBookedDays[1]);
                                standbyEnd.setDate(standbyEnd.getDate() + 1);
                                var standBYEND = new Date(new Date(standbyEnd).setUTCHours(resulttime, 00, 00, 00));
                                var standarr2 = moment(standBYEND);
                                var standbyWithouttimeEnd = new Date(new Date(standarr2).setUTCHours(13, 00, 00, 00));  

                             
                            }
                            else {

                                var standbybookStart = response.start;
                                let isoDate = new Date(response.end);
                                let resulttime = isoDate.getUTCHours();
                                var standarr1 = moment(response.start);
                                var standbyWithouttime = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));
                              
                              
                                if(standByBookingDays[1]!=undefined){
                                    var standbyEnd = new Date(standByBookingDays[1]);
                                    standbyEnd.setDate(standbyEnd.getDate() + 1);
                                    var standBYEND = new Date(new Date(standbyEnd).setUTCHours(resulttime, 00, 00, 00));
                                   
                                    var standarr2 = moment(standByBookingDays[1]);
                                 
                                    var standbyWithouttimeEnd = new Date(new Date(standarr2).setUTCHours(13, 00, 00, 00));         

                                }else{

                                    var standBYEND = response.end;
                                     
                                     var standbyWithouttimeEnd = new Date(new Date(standarr1).setUTCHours(13, 00, 00, 00));    

                                }
                              
                                
                                
                               

                            }

                           
                         
                          
                            await new Schedule({
                                Boat_Name: response.Boat_Name,
                                calendarId: response.calendarId,
                                title: "Admin (Rejected Booking)",
                                body: response.body,
                                start: standbybookStart,
                                end: standBYEND,
                                //start_NoTime:new Date(new Date(standByBookingDays[0]).setUTCHours(00,00,00,00)),
                                //end_NoTime:new Date(new Date(standByBookingDays[standByBookingDays.length - 1]).setUTCHours(00,00,00,00)),
                                start_NoTime:  standbyWithouttime,
                                end_NoTime: standbyWithouttimeEnd,
                               
                                goingDuration: response.goingDuration,
                                comingDuration: response.comingDuration,
                                category: response.category,
                                dueDateClass: response.dueDateClass,
                                location: response.location,
                                attendees: response.attendees,
                                recurrenceRule: response.recurrenceRule,
                                color: response.color,
                                bgColor: response.bgColor,
                                dragBgColor: response.dragBgColor,
                                borderColor: response.borderColor,
                                customStyle: response.customStyle,
                                raw: response.raw,
                                User_RoleType: "Admin",
                                Status: response.Status,
                                Check_Status: response.Check_Status,
                                Check_Month: response.Check_Month,
                                Booking_ID: response.Booking_ID,
                                commends: response.commends,
                                LOA: response.LOA,
                                Approved_LOA: response.Approved_LOA,
                                BookingStatus: "Rejected",
                                Cancelled_Status: response.Cancelled_Status,
                                Total_DaysBooked: response.TotalDay_Count,
                                WeekDay_Count: response.WeekDay_Count,
                                WeekEnd_Count: response.WeekEnd_Count,
                                Total_DaysBooked_Reassign: response.Total_DaysBooked_Reassign,
                                WeekDay_Count_Reassign: response.WeekDay_Count_Reassign,
                                WeekEnd_Count_Reassign: response.WeekEnd_Count_Reassign,
                                Booking_Type: response.Booking_Type,
                                WeekDay_Count_Edit: response.WeekDay_Count_Edit,
                                WeekEnd_Count_Edit: response.WeekEnd_Count_Edit,
                                Total_Edit_Loa: response.Total_Edit_Loa,
                                PartialCancellation_Status: response.PartialCancellation_Status,
                                start_CancelledDate: response.start_CancelledDate,
                                end_CancelledDate: response.end_CancelledDate,
                                cancaledDays: response.cancaledDays,
                                isBookingPending: response.isBookingPending,
                                isBookingCancelled: response.isBookingCancelled,
                                isBookingAccepted: response.isBookingAccepted,
                                isNextDayBookingIncluded: response.isNextDayBookingIncluded,
                                isStandByBookingIncluded: response.isStandByBookingIncluded,
                                Boat_Id: response.Boat_Id,
                                isAllDay: response.isAllDay,
                                isPending: response.isPending,
                                isFocused: response.isFocused,
                                isVisible: response.isVisible,
                                isReadOnly: response.isReadOnly,
                                isPrivate: response.isPrivate,
                                Is_StandByBooking: response.Is_StandByBooking,
                                User_Id: null,
                                Admin_Id: null,
                                IsActive: response.IsActive,
                                standByBookingId: response._id

                            }).save().catch((error) => console.log(error))


                            //



                            //mail

                            const emailState = 'StandBy Booking Rejected.';
                            const emailContent = `Dear ${Ownerresponse.First_Name} the StandBybooking for Boat ${boatname} has Rejected by smartBoating on ${getCurrentTimeFormatted()}`;
                            const emailContentAdmin = `Dear Adminsistrator you have accepted the standby booking for the owner ${Ownerresponse.First_Name} the StandBybooking for Boat ${boatname} has rejected by smartBoating on ${getCurrentTimeFormatted()}`;
                            const emailDetailName = 'Booking Details'
                            const emailDetails = [
                                { key: 'Boat Name', value: boatname },
                                { key: 'Booking Date', value: Booked_time },
                            ];
                            const emailNameAndLink = {
                                name: 'Booking  Link',
                                link: `${process.env.CLIENT_URL}/boat-bookings`
                            }

                            var mailOptions = {

                                from: "noreply.smartboatbooking@gmail.com",
                                to: Email_id,
                                subject: 'Standby Booking Rejected',
                                html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)


                            };

                            transporter.sendMail(mailOptions, function (error, info) {

                            });

                            var mailOptionsAdmin = {

                                from: "noreply.smartboatbooking@gmail.com",
                                to: "admin@smartboating.com.au",
                                subject: 'Standby Booking Rejected',
                                html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)

                            };

                            transporter.sendMail(mailOptionsAdmin, function (error, info) {



                            });
                            //mail
                            res.json({
                                status: true,
                                message: 'Booking Rejected'
                            })



                        }
                    });
            })
        }
    })
}


//filter by Date

const ViewBookingDetailsFilterByDates = (req, res, next) => {
    var Date1 = new Date(req.body.Launch_Date1);
    var Date2 = new Date(req.body.Launch_Date2);
    var Datetype = req.body.DateType

    mongoose.model('Tb_Schedule').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "User_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            {
                "$match": {
                    IsActive: true
                }
            },
            { $sort: { "_id": -1 } },

            {
                $project: {
                    calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Is_StandByBooking: 1, IsActive: 1, Booking_ID: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "OwnerDetails.Sailing_Ability": 1,
                    "OwnerDetails.Last_Name": 1,
                    "OwnerDetails.Family_Name": 1,
                    "OwnerDetails.Emergency_Contact_Mobile": 1,
                    "OwnerDetails.Email": 1,
                    "OwnerDetails.Emergency_Contact_Name": 1,
                    "OwnerDetails.Home_Address": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.IsActive": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,



                }
            }
        ]
    ).exec(function (err, responses) {
        // var response = responses.map(function(el){
        //     el.BoatDetails = el.BoatDetails.filter(function(x){ return x.IsActive ==true; });
        //     return el;
        // });
        if (Datetype == "Launch_Date") {
            var response = responses.map(function (el) {
                el.BoatDetails = el.BoatDetails.filter(function (x) { return (x.Launch_Date >= Date1 && x.Launch_Date <= Date2); });
                return el;
            });
        }
        else {
            var response = responses.map(function (el) {
                el.BoatDetails = el.BoatDetails.filter(function (x) { return (x.PreLaunch_Date >= Date1 && x.PreLaunch_Date <= Date2); });
                return el;
            });

        }
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            //cancelled
            mongoose.model('Tb_Schedule').aggregate(
                [
                    {
                        "$lookup": {
                            "from": "tb_addowners",
                            "localField": "User_Id",
                            "foreignField": "_id",
                            "as": "OwnerDetails"
                        }
                    },
                    {
                        "$lookup": {
                            "from": "tb_boatmasters",
                            "localField": "Boat_Id",
                            "foreignField": "_id",
                            "as": "BoatDetails"
                        }
                    },

                    {
                        "$match": {
                            IsActive: false
                        }
                    },
                    { $sort: { "_id": -1 } },

                    {
                        $project: {
                            calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Booking_ID: 1,

                            "OwnerDetails.Profile_Image": 1,
                            "OwnerDetails.First_Name": 1,
                            "OwnerDetails.Mobile": 1,
                            "OwnerDetails.Parking_Ability": 1,
                            "BoatDetails.Location_Name": 1,
                            "BoatDetails.Boattype_Name": 1,
                            "BoatDetails.Location_Id": 1,
                            "BoatDetails._id": 1,
                            "BoatDetails.Boattype_id": 1,
                            "BoatDetails.Boat_Name": 1,
                            "BoatDetails.Boat_Number": 1,
                            "BoatDetails.Boat_Facility": 1,
                            "BoatDetails.Boat_Description": 1,
                            "BoatDetails. Owners_Allowed": 1,
                            "BoatDetails.Launch_Date": 1,
                            "BoatDetails.PreLaunch_Date": 1,
                            "BoatDetails.Boat_Image": 1,
                            "BoatDetails.Boat_HandBook": 1,
                            "BoatDetails.Boat_Status": 1,
                            "BoatDetails.Total_Days": 1,
                            "BoatDetails.Summer_WeekDays": 1,
                            "BoatDetails. Summer_WeekEndDays": 1,
                            "BoatDetails.Winter_WeekDays": 1,
                            "BoatDetails.Winter_WeekEndDays": 1,


                        }
                    }
                ]
            ).exec(function (err, Cancelledresponses) {

                if (Datetype == "Launch_Date") {
                    var Cancelledresponse = Cancelledresponses.map(function (el) {
                        el.BoatDetails = el.BoatDetails.filter(function (x) { return (x.Launch_Date >= Date1 && x.Launch_Date <= Date2); });
                        return el;
                    });
                }
                else {
                    var Cancelledresponse = Cancelledresponses.map(function (el) {
                        el.BoatDetails = el.BoatDetails.filter(function (x) { return (x.PreLaunch_Date >= Date1 && x.PreLaunch_Date <= Date2); });
                        return el;
                    });

                }
                //cancelled


                res.json({
                    status: true,
                    response, Cancelledresponse
                })
            })

        }

    })

}
//filterby Date

//approve


const ApproveCancellation = (req, res, next) => {

    var scheduleid = req.body._id;
    var Loa = req.body.LOA;
    var PartialStatus = req.body.PartialCancellation_Status;
    var TotalLoa_Edit = req.body.Total_Edit_Loa;
    var partialcnacelationid = req.body.partialcnacelationid;




    Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(response => {


        var Boat_id = response.Boat_Id;
        var Owner_id = response.User_Id;
        var start_Date = response.start;
        var Start_final = moment(start_Date);
        console.log(start_Date)
        console.log(Start_final)
        var Start_final_withoutTime = Start_final.startOf('day');
        var end_Date = response.end;
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');
        console.log(Start_final_withoutTime)
        console.log(End_final_withoutTime)
        var RoleAssigned = response.User_RoleType;
        var Cancel_date = moment();
        console.log(Cancel_date)
        var dif = moment.duration(Start_final.diff(Cancel_date));
        console.log(dif.asHours());
        var Hrdif = Math.round(dif.asHours());
        var Totalday_prev = response.Total_DaysBooked_Reassign;
        var Weekdays_prev = response.WeekDay_Count_Reassign;
        var WeekEndDays_prev = response.WeekEnd_Count_Reassign;
        console.log(Weekdays_prev, 'hiiiii')
        console.log(WeekEndDays_prev, 'hiiiii')
        if (PartialStatus == 1) {
            var WeekDay_Count = req.body.WeekDay_Count_Edit;
            var WeekEnd_Count = req.body.WeekEnd_Count_Edit;
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if (TotalLoa_Edit >= Total_Count) {
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //  SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return res.json({ status: true, message: stopExecution.error })
                        }

                        if (isAvailableDay && isAvailableDay.status)//check Date Between Summer Dates
                        {

                            //check if next booking included



                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                });
                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                            


                        }
                        else {


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                           



                        }
                    })
                })


                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        Updated_time: moment(Date.now()),
                        BookingStatus: "PartiallyAccepted",
                        PartialCancellation_Status: 0,
                        Approved_LOA: Total_Count,

                    },

                    function (err, data) {
                        if (err) {
                            res.json({
                                status: false,
                                message: 'AN ERROR OCCURED'
                            })
                        }
                        else {
                            res.json({

                                status: true,
                                message: 'Cancelled Successfully'
                            })
                        }
                    });
            }
            else {
                res.json({

                    status: true,
                    message: 'WeekDay and WeekEnd LOA must not be greater than Total LOA '
                })

            }
        }
        else {

            var WeekDay_Count = req.body.WeekDay_Count;
            var WeekEnd_Count = req.body.WeekEnd_Count;
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if (Loa >= Total_Count) {
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return res.json({ status: true, message: stopExecution.error })
                        }

                        if (isAvailableDay && isAvailableDay.status)//check Date Between Summer Dates
                        {


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('reassigneddddddddddddddddddddddddddddddddddddddddd')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                           



                        }
                        else {


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('Winter sucesss')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                           


                        }
                    })
                })


                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        IsActive: false,
                        Updated_time: moment(Date.now()),
                        Approved_LOA: Loa,
                        BookingStatus: "Accepted",


                    },

                    function (err, data) {
                        if (err) {
                            res.json({
                                status: false,
                                message: 'AN ERROR OCCURED'
                            })
                        }
                        else {
                            res.json({

                                status: true,
                                message: 'Cancelled Successfully'
                            })
                        }
                    });
            }
            else {
                res.json({

                    status: true,
                    message: 'WeekDay and WeekEnd LOA must not be greater than Total LOA '
                })
            }
        }
    })

}

//approve


const ApproveCancellationNew = async (req, res, next) => {

    var scheduleid = req.body._id;
    var Loa = req.body.LOA;
    var PartialStatus = req.body.PartialCancellation_Status;
    var TotalLoa_Edit = req.body.Total_Edit_Loa;
    var partialcancelationid = req.body.partialcancelationid;
    const condition = { _id: mongoose.Types.ObjectId(partialcancelationid) };
    const update = { LOA: 0, Approved_LOA: Loa };

    Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(async(response) => {


        var Boat_id = response.Boat_Id;
        var Owner_id = response.User_Id;
        var start_Date = response.start;
        var Start_final = moment(start_Date);
       
        var Start_final_withoutTime = Start_final.startOf('day');
        var end_Date = response.end;
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');
        console.log(Start_final_withoutTime)
        console.log(End_final_withoutTime)
        var RoleAssigned = response.User_RoleType;
        var Cancel_date = moment();
        console.log(Cancel_date)
        var dif = moment.duration(Start_final.diff(Cancel_date));
        console.log(dif.asHours());
        var Hrdif = Math.round(dif.asHours());
        var Totalday_prev = response.Total_DaysBooked_Reassign;
        var Weekdays_prev = response.WeekDay_Count_Reassign;
        var WeekEndDays_prev = response.WeekEnd_Count_Reassign;
        console.log(Weekdays_prev, 'hiiiii')
        console.log(WeekEndDays_prev, 'hiiiii')
        let booktype = response.Booking_Type;
        if (booktype == 'prelaunch and launch booking')
            var del_Status = 0;
        else
            var del_Status = response.delStatus;
            let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
            //console.log(AnniversaryDate,"AnniversaryDate");
            let getanniversary = new Date(AnniversaryDate.Launch_Date);
             let anni_year =  getanniversary.getFullYear();
            let anni_month = (getanniversary.getMonth())+1;

            var startyear = new Date(Start_final_withoutTime);
            var Start_Month = (startyear.getMonth(startyear))+1;

            var endyear = new Date(End_final_withoutTime);
            var End_Month = (endyear.getMonth(endyear))+1;
            if((Start_Month<anni_month)&&(End_Month>=anni_month) || (Start_Month>anni_month)&&(End_Month==anni_month)){

                var MonthBookingStatus =1;

              
            }
           
            else{

                var MonthBookingStatus =0;
                var getBookedyear = new Date(start_Date);
                var YearOne = getBookedyear.getFullYear();
                var MonthOne = getBookedyear.getMonth()+1;
                var nextYearBook = (parseInt(YearOne)+1);
                if(MonthOne<anni_month)
                var exp_year = ""+YearOne+anni_month;
                else
                var exp_year =""+nextYearBook+anni_month;

            }
         
         

        if (PartialStatus == 1) {
            var WeekDay_Count = req.body.WeekDay_Count_Edit;
            var WeekEnd_Count = req.body.WeekEnd_Count_Edit;
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if ((TotalLoa_Edit >= Total_Count)) {
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //  SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate,start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return res.json({ status: true, message: stopExecution.error })
                        }
                       // console.log(MonthBookingStatus,exp_year,"------------------BBBBB")

                        if (isAvailableDay.type=="summer" && booktype != 'prelaunch and launch booking')//check Date Between Summer Dates
                        {

                            //check if next booking included



                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('Appproved---')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                          


                        }
                        else if(isAvailableDay.type=="winter"){

                            if (booktype != 'prelaunch and launch booking') {

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                    {

                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                    },
                                    { new: true },
                                    function (err, data) {
                                        console.log('Winter sucesss')
                                    });

                                    
                                    if(MonthBookingStatus ==1)

                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                   else


                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                              


                            }




                        }
                        else if(isAvailableDay.type=="both"){

                            let { isIncludedInSummer } = getBookingIsFromWhichSeasonBasedOnStartDate(Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, response.start) || {};

                            if (isIncludedInSummer) {

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                          

                                
                            } else {
                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                          
                            }

                        }




                    })
                })


                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        Updated_time: moment(Date.now()),
                        BookingStatus: "PartiallyAccepted",
                        PartialCancellation_Status: 0,
                        Approved_LOA: Total_Count,
                        delStatus: delStatus

                    },

                    function (err, data) {
                        if (err) {
                            res.json({
                                status: false,
                                message: 'AN ERROR OCCURED'
                            })
                        }
                        else {
                            let partialupdate = OwnerPartialCancelation.findOneAndUpdate(condition, update).catch((error) => console.log(error));
                            res.json({

                                status: true,
                                message: 'Cancelled Successfully'
                            })
                        }
                    });
            }
            else {
                res.json({

                    status: true,
                    message: 'WeekDay and WeekEnd LOA must not be greater than Total LOA '
                })

            }


        }
        else {

            var WeekDay_Count = req.body.WeekDay_Count;
            var WeekEnd_Count = req.body.WeekEnd_Count;
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if (Loa >= Total_Count) {
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return res.json({ status: true, message: stopExecution.error })
                        }

                        if (isAvailableDay && isAvailableDay.status && booktype != 'prelaunch and launch booking')//check Date Between Summer Dates
                        {


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('Approve LOA----')
                                });
                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                          


                        }
                        else {

                            if (booktype != 'prelaunch and launch booking') {

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                    {

                                        Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                        Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                    },
                                    { new: true },
                                    function (err, data) {

                                        console.log('Winter sucesss')
                                    });

                                    
                                    if(MonthBookingStatus ==1)

                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                   else


                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                              
                            }




                        }
                    })
                })


                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        IsActive: false,
                        Updated_time: moment(Date.now()),
                        Approved_LOA: Loa,
                        BookingStatus: "Accepted",
                        delStatus: del_Status


                    },

                    function (err, data) {
                        if (err) {
                            res.json({
                                status: false,
                                message: 'AN ERROR OCCURED'
                            })
                        }
                        else {
                            let partialupdate = OwnerPartialCancelation.findOneAndUpdate(condition, update).catch((error) => console.log(error));
                            res.json({

                                status: true,
                                message: 'Cancelled Successfully'
                            })
                        }
                    });
            }
            else {
                res.json({

                    status: true,
                    message: 'WeekDay and WeekEnd LOA must not be greater than Total LOA '
                })
            }

        }
    })

}





//save Special Day
async function AddSpecialDay(scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final) {

    console.log('Add Special Day Function');

    let OwnerDuration = await Duration.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));

    let AddSpecialDays_Owner = new Booking_Special_Days({

        Boat_Id: Boat_id,
        Owner_Id: Owner_id,
        SpecialDay_Id: Specialdayid,
        Scheduleid:scheduleid,
        start: specialday,
        start_NoTime: Start_final,
        IsActive: true,
        OwnerDurationStart: OwnerDuration.From_Date,
        OwnerDurationEnd: OwnerDuration.To_Date,
        Current_Time: moment(Date.now()),
        Updated_time: moment(Date.now())

    });

    AddSpecialDays_Owner.save()
        .then(response => {
            return true;
        })
        .catch(error => {
            console.log(error)
            return false;
        })

}

async function CheckSpecialDaysExist(Boat_id, Owner_id, obj,scheduleid) {
    console.log(obj,"OBJJJ-----------");

    console.log('im here in Special Day Checking');

    var flag = 1;

    let OwnerDurationDays = await Duration.findOne({ Owner_Id: Owner_id, IsActive: true, Boat_Id: Boat_id }).catch((error) => console.log(error));

    let getSpecialdayDays = await Add_Special_Days.find({}).catch((error) => console.log(error));

    let countOfbook = await Booking_Special_Days.distinct('SpecialDay_Id',{$and:[{'Boat_Id':Boat_id,'Owner_Id':Owner_id,IsActive: true,OwnerDurationStart: OwnerDurationDays.From_Date, OwnerDurationEnd: OwnerDurationDays.To_Date}]}).catch((error) => console.log(error));
    console.log(countOfbook,"countOfbook---");
    if(countOfbook)

       var bookcount = countOfbook.length;
    
    else

     var bookcount = 0;

     if(bookcount<=(getSpecialdayDays.length)){

        var flag=0;

     }

    /*let getSpecialdayDays = await Add_Special_Days.findById({ _id: mongoose.Types.ObjectId(obj[0]._id) }).catch((error) => console.log(error));

   

    let getAllSpecialDays = getDaysBetweenDates(getSpecialdayDays.Start_Date, getSpecialdayDays.End_Date);

    var flag = 0;

    const specialbooking = await Booking_Special_Days.find({ Owner_Id: Owner_id, IsActive: true, Boat_Id: Boat_id, OwnerDurationStart: OwnerDurationDays.From_Date, OwnerDurationEnd: OwnerDurationDays.To_Date }).catch((error) => console.log(error));

    let AllBookedSpecialDays = [];

    let AllBookedSpecialIDS = [];

    if (specialbooking.length) {
        specialbooking.map((specialBooking) => {

            AllBookedSpecialDays.push(specialBooking.start);

            AllBookedSpecialIDS.push(specialBooking.SpecialDay_Id);

        });

        console.log("AllBookedSpecialDays:::" + AllBookedSpecialDays);

        if (AllBookedSpecialIDS[0] == obj[0]._id) {

            if (getAllSpecialDays.length == AllBookedSpecialDays.length) {

                if(scheduleid!=0){

                    let updateData = await Booking_Special_Days.update({ Owner_Id: Owner_id, Boat_Id: Boat_id,Scheduleid:scheduleid, IsActive: true }, { $set: { IsActive: false } }, { multi: true }).catch((error) => console.log(error));
                    
                }
   


            }

            //flag = 1;



        } else {


            flag = 1;
        }


    }*/


    return flag;

}




//check Special Day Exist

//vinayak 7/20/2021


const ViewCancelledBookingById = (req, res, next) => {
    const User_Id = mongoose.Types.ObjectId(req.body.User_Id);
    mongoose.model('Tb_Schedule').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "User_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            {
                "$match": {
                    User_Id: User_Id, IsActive: false
                }
            },
            { $sort: { "_id": -1 } },

            {
                $project: {
                    calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Booking_ID: 1, LOA: 1, BookingStatus: 1, Approved_LOA: 1, WeekEnd_Count: 1, WeekDay_Count: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,


                }
            }
        ]
    ).exec(function (err, response) {
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            res.json({
                status: true,
                response
            })

        }
    })
}


//


//
const ViewBookingById = (req, res, next) => {
    const User_Id = mongoose.Types.ObjectId(req.body.User_Id);
    mongoose.model('Tb_Schedule').aggregate(
        [
            {
                "$lookup": {
                    "from": "tb_addowners",
                    "localField": "User_Id",
                    "foreignField": "_id",
                    "as": "OwnerDetails"
                }
            },
            {
                "$lookup": {
                    "from": "tb_boatmasters",
                    "localField": "Boat_Id",
                    "foreignField": "_id",
                    "as": "BoatDetails"
                }
            },

            {
                "$match": {
                    User_Id: User_Id, IsActive: true
                }
            },
            { $sort: { "_id": -1 } },

            {
                $project: {
                    calendarId: 1, start: 1, end: 1, start_NoTime: 1, end_NoTime: 1, category: 1, dueDateClass: 1, User_RoleType: 1, Current_Time: 1, Updated_time: 1, Booking_ID: 1, LOA: 1, BookingStatus: 1, Approved_LOA: 1,
                    "OwnerDetails.Profile_Image": 1,
                    "OwnerDetails.First_Name": 1,
                    "OwnerDetails.Mobile": 1,
                    "OwnerDetails.Parking_Ability": 1,
                    "BoatDetails._id": 1,
                    "BoatDetails.Location_Name": 1,
                    "BoatDetails.Boattype_Name": 1,
                    "BoatDetails.Location_Id": 1,
                    "BoatDetails.Boattype_id": 1,
                    "BoatDetails.Boat_Name": 1,
                    "BoatDetails.Boat_Number": 1,
                    "BoatDetails.Boat_Facility": 1,
                    "BoatDetails.Boat_Description": 1,
                    "BoatDetails. Owners_Allowed": 1,
                    "BoatDetails.Launch_Date": 1,
                    "BoatDetails.PreLaunch_Date": 1,
                    "BoatDetails.Boat_Image": 1,
                    "BoatDetails.Boat_HandBook": 1,
                    "BoatDetails.Boat_Status": 1,
                    "BoatDetails.Total_Days": 1,
                    "BoatDetails.Summer_WeekDays": 1,
                    "BoatDetails. Summer_WeekEndDays": 1,
                    "BoatDetails.Winter_WeekDays": 1,
                    "BoatDetails.Winter_WeekEndDays": 1,


                }
            }
        ]
    ).exec(function (err, response) {
        if (err) {
            res.json({
                status: false,
                message: 'AN ERROR OCCURED'
            })
        }
        else {
            res.json({
                status: true,
                response
            })

        }
    })
}

//vinayak 7/20/2021

//Delete OwnerBookings
const DeleteScheduleForOwner = (req, res, next) => {


    var scheduleid = req.body._id;


    Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(response => {


        var Boat_id = response.Boat_Id;
        var Owner_id = response.User_Id;
        var start_Date = response.start;
        var Start_final = moment(start_Date);
        console.log(start_Date)
        console.log(Start_final)
        var Start_final_withoutTime = Start_final.startOf('day');
        var end_Date = response.end;
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');
        console.log(Start_final_withoutTime)
        console.log(End_final_withoutTime)
        var RoleAssigned = response.User_RoleType;
        var Cancel_date = moment();
        console.log(Cancel_date)
        var dif = moment.duration(Start_final.diff(Cancel_date));
        console.log(dif.asHours());
        var Hrdif = Math.round(dif.asHours());

        console.log(Hrdif);

        console.log(RoleAssigned);

        var dif = Start_final.diff(moment(), 'days')
        console.log(dif)

        Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) })
            .then(boatDetails => {

                var BoatName = boatDetails.Boat_Name
                NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) })
                    .then(ownerDetails => {

                        var OwnerName = ownerDetails.First_Name
                        var Email_id = ownerDetails.Email
                        var date = ownerDetails.Current_Time

                        console.log(BoatName, OwnerName, Email_id, date)

                        if (dif >= 0) {

                            if (Hrdif <= 72) {
                                var Loa = Math.round((Hrdif - 72) / 24);
                                var Loa_Pos = Math.abs(Loa);
                                console.log(Loa);
                                console.log(Loa_Pos, 'positv');

                                var WeekDay_Count = 0;
                                var WeekEnd_Count = 0;

                                ////.....................

                                var obj = Object();
                                obj.start = Start_final;
                                obj.end = End_final;

                                var datas = getDaysInMonth_Sheduler(obj);
                                console.log(datas)
                                var arr = [];
                                ///.................
                                datas.forEach(function (item) {
                                    Object.keys(item).forEach(function (key) {
                                        arr.push(item[key]);
                                        console.log(item[key]);
                                    });
                                });
                                console.log(arr)

                                for (let index = 0; index < Loa_Pos; ++index) {
                                    console.log(arr[index]);
                                    let day = arr[index];

                                    if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {
                                        WeekDay_Count = WeekDay_Count + 1;
                                        console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiii')
                                    }
                                    else {
                                        WeekEnd_Count = WeekEnd_Count + 1;

                                    }

                                }
                                console.log(WeekDay_Count)
                                console.log(WeekEnd_Count)
                                var Total_Count = 0;
                                Total_Count = WeekDay_Count + WeekEnd_Count;
                                var WeekDay_Counts = WeekDay_Count;
                                var WeekEnd_Counts = WeekEnd_Count;

                                console.log(Total_Count, 'hiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')




                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                    {

                                        IsActive: false,
                                        Cancelled_Status: 1,
                                        Updated_time: moment(Date.now()),
                                        LOA: Loa_Pos

                                    },

                                    function (err, data) {


                                        //mail   

                                        const emailState = 'Booking Cancelled.';
                                        const emailContent = `Dear ${OwnerName} your booking on Boat ${BoatName} on ${date} has been successfully cancelled.`;
                                        const emailContentAdmin = `Dear Administrator The Boat ${BoatName} on ${date} has been successfully cancelled.`;
                                        const emailDetailName = 'Cancellation Details'
                                        const emailDetails = [
                                            { key: 'Boat Name', value: BoatName }
                                        ];
                                        const emailNameAndLink = {
                                            name: 'Booking  Link',
                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                        }


                                        var mailOptions = {

                                            from: "noreply.smartboatbooking@gmail.com",
                                            to: Email_id,
                                            subject: 'Booking Cancellation',
                                            html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)

                                        };

                                        transporter.sendMail(mailOptions, function (error, info) {
                                            if (error) {
                                                console.log(error);
                                            } else {
                                                res.json({
                                                    status: true,
                                                    info: 'Successfully send'
                                                })
                                            }
                                        });

                                        var mailOptionsAdmin = {

                                            from: "noreply.smartboatbooking@gmail.com",
                                            to: Email_id,
                                            subject: 'Booking Cancellation',
                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)


                                        };

                                        transporter.sendMail(mailOptionsAdmin, function (error, info) {
                                            if (error) {
                                                console.log(error);
                                            } else {
                                                res.json({
                                                    status: true,
                                                    info: 'Successfully send'
                                                })
                                            }
                                        });
                                        //mail


                                        if (err) {
                                            res.json({
                                                status: false,
                                                message: 'AN ERROR OCCURED'
                                            })
                                        }
                                        else {
                                            res.json({

                                                status: true,
                                                Loa: Loa_Pos,
                                                Weekday: WeekDay_Counts,
                                                WeekEnd: WeekEnd_Counts,
                                                message: 'If you proceed with this cancellation,' + ' ' + Loa_Pos + ' ' + ' LOA will be applicable for you. Please click OK to confirm your cancellation'
                                            })
                                        }
                                    });


                            }
                            else {
                                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                                    {

                                        IsActive: false,
                                        Cancelled_Status: 1,
                                        Updated_time: moment(Date.now()),
                                        LOA: 0
                                    },

                                    function (err, data) {

                                        //mail           

                                        const emailState = 'Booking Cancelled.';
                                        const emailContent = `Dear ${OwnerName} your booking on Boat ${BoatName} on ${date} has been successfully cancelled.`;
                                        const emailContentAdmin = `Dear Administrator The Boat ${BoatName} on ${date} has been successfully cancelled.`;
                                        const emailDetailName = 'Cancellation Details'
                                        const emailDetails = [
                                            { key: 'Boat Name', value: BoatName }
                                        ];
                                        const emailNameAndLink = {
                                            name: 'Booking  Link',
                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                        }

                                        var mailOptions = {

                                            from: "noreply.smartboatbooking@gmail.com",
                                            to: Email_id,
                                            subject: 'Booking Cancellation',
                                            html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)


                                        };

                                        transporter.sendMail(mailOptions, function (error, info) {
                                            if (error) {
                                                console.log(error);
                                            } else {
                                                res.json({
                                                    status: true,
                                                    info: 'Successfully send'
                                                })
                                            }
                                        });

                                        var mailOptionsAdmin = {

                                            from: "noreply.smartboatbooking@gmail.com",
                                            to: Email_id,
                                            subject: 'Booking Cancellation',
                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
                                        };

                                        transporter.sendMail(mailOptionsAdmin, function (error, info) {
                                            if (error) {
                                                console.log(error);
                                            } else {
                                                res.json({
                                                    status: true,
                                                    info: 'Successfully send'
                                                })
                                            }
                                        });

                                        //mail


                                        if (err) {
                                            res.json({
                                                status: false,
                                                message: 'AN ERROR OCCURED'
                                            })
                                        }
                                        else {
                                            res.json({

                                                status: true,
                                                Loa: 0,
                                                Weekday: 0,
                                                WeekEnd: 0,
                                                message: 'If you proceed with this cancellation,' + ' ' + 0 + ' ' + ' LOA will be applicable for you. Please click OK to confirm your cancellation'
                                            })
                                        }
                                    });

                            }
                        }

                        else {
                            res.json({
                                status: false,
                                message: 'Booking on a previous day cannot be cancelled'
                            })

                        }
                    })
            })


    })
}


//Delete OwnerBookings

//StandbyBooking Adding
//StandbyBooking Adding
const AddScheduleStandByBooking = async (req, ogWeekendDaysCount, ogWeekDaysCount, ogTotalDaysCount) => {
    return new Promise(async (resolve, reject) => {
        console.log(req.body, 'AddScheduleStandByBooking');
        const globalbookingid = await GetNextBookingID();
        console.log(globalbookingid);
        var check_Status = req.body.Check_Status;
        console.log("CHKST::" + check_Status);
        var Total_Count = Number(req.body.TotalDay_Count);
        var WeekDay_Count = Number(req.body.WeekDay_Count);
        var WeekEnd_Count = Number(req.body.WeekEnd_Count);
        var User_role = req.body.User_RoleType;
        var Boat_id = req.body.Boat_Id;
        var Owner_id = req.body.User_Id;
        var start_Date = req.body.start;
        let standByBookingId = req.body._id
        //var specialDayCheck=0;//special day
        var specialDayCheck = req.body.specialDayCheck; //special day
        console.log(specialDayCheck, 'check here');
        console.log(start_Date);
        var end_Date = req.body.end;
        var TodaysDate = moment();
        var CurrentDate = moment(TodaysDate).format('DD-MM-YYYY');
        var Noofcleans=1;
        //var start_Date_NoTime=new Date(start_Date);
        //console.log(start_Date_NoTime.toString(),'hi');
        var Start_final = moment(start_Date);
        console.log(Start_final, 'checkkkk1');
        var Start_final_withoutTime = Start_final.startOf('day');

        // var end_Date_NoTime=new Date(end_Date);
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');

        //**  Check Booking is in same month or not ***//

        let AnniversaryDate = await Boats.findOne({"_id":Boat_id},{"Launch_Date":1}).catch((error) => console.log(error));
  
        let getanniversary = new Date(AnniversaryDate.Launch_Date);
        let anni_month = (getanniversary.getMonth())+1;

            var startyear = new Date(Start_final_withoutTime);
            var Start_Month = (startyear.getMonth(startyear))+1;

            var endyear = new Date(End_final_withoutTime);
            var End_Month = (endyear.getMonth(endyear))+1;

            

        if((Start_Month<anni_month)&&(End_Month>=anni_month) || (Start_Month>anni_month)&&(End_Month==anni_month)){

           var MonthBookingStatus =1;

        }else{

            var getBookedyear = new Date(req.body.start);
            var YearOne = getBookedyear.getFullYear();
            var MonthOne = getBookedyear.getMonth()+1;
            var nextYearBook = (parseInt(YearOne)+1);
            if(MonthOne<anni_month)
            var exp_year = ""+YearOne+anni_month;
            else
            var exp_year =""+nextYearBook+anni_month;

            var MonthBookingStatus =0;


        }


        var dif = Start_final.diff(moment(), 'days');
        console.log(dif);

        if (req.body.Status == 'Enable') {
            var Module_status = 1;
        } else if (req.body.Status == 'Disable') {
            var Module_status = 0;
        }


        //get month
        const Getmonth = new Date(Start_final);
        LaunchPreMonth = Getmonth.toLocaleString('default', { month: 'long' });
        //getmonth

        NewOwners.findById({ _id: mongoose.Types.ObjectId(Owner_id) }).then((OwnerDetails) => {
            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(async(boatDetails) => {
                if (boatDetails.Boat_Status == '1') {
                    //check whether boat is Active or not
                    //between Launch And PreLuanch
                    let bookingType = getBookingTypeofAbooking(req.body.start, req.body.end, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);

                    if (check_Status == '1' && specialDayCheck == 0) {
                        console.log(dif, 'diffff');
                        if (dif >= 0) {
                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, User_Id: Owner_id, Check_Status: check_Status, Check_Month: LaunchPreMonth }).then((Checkresult) => {
                                console.log(Checkresult.length, 'length');
                                var _LengthCheck = Checkresult.length;
                                if (_LengthCheck == 0) {
                                    console.log('pre and launchhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh');
                                    PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id }).then((bookingDays) => {
                                        var b_days = bookingDays.Booking_Days;
                                        console.log(b_days);
                                        console.log(Total_Count);
                                        if (Total_Count <= b_days) {
                                            console.log('hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii');

                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(
                                                (result) => {
                                                    console.log(result.length, 'length');
                                                    var _Length = result.length;
                                                    if (_Length == 0) {
                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                                            if (result2 == null) {
                                                                console.log('hi1');
                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                                    if (results == null) {
                                                                        console.log('hi2');
                                                                        Schedule.findOne({
                                                                            Boat_Id: Boat_id,
                                                                            isBookingPending: false,
                                                                            IsActive: true,
                                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                                        }).then((results) => {
                                                                            if (results == null) {
                                                                                console.log('hi3');

                                                                                //Add
                                                                                console.log('Admin');
                                                                                
                                                                                let Add_Schedule = new Schedule({
                                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                                    Booking_ID: globalbookingid,
                                                                                    Boat_Name: req.body.Boat_Name,
                                                                                    Total_DaysBooked: Total_Count,
                                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                                    title: req.body.title,
                                                                                    body: req.body.body,
                                                                                    start: req.body.start,
                                                                                    end: req.body.end,
                                                                                    start_NoTime: Start_final_withoutTime,
                                                                                    end_NoTime: End_final_withoutTime,
                                                                                    goingDuration: req.body.goingDuration,
                                                                                    comingDuration: req.body.comingDuration,
                                                                                    isAllDay: req.body.isAllDay,
                                                                                    category: req.body.category,
                                                                                    dueDateClass: req.body.dueDateClass,
                                                                                    location: req.body.location,
                                                                                    attendees: req.body.attendees,
                                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                                    isPending: req.body.isPending,
                                                                                    isFocused: req.body.isFocused,
                                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                                    isVisible: req.body.isVisible,
                                                                                    isReadOnly: req.body.isReadOnly,
                                                                                    isPrivate: req.body.isPrivate,
                                                                                    color: req.body.color,
                                                                                    bgColor: req.body.bgColor,
                                                                                    dragBgColor: req.body.dragBgColor,
                                                                                    borderColor: req.body.borderColor,
                                                                                    customStyle: req.body.customStyle,
                                                                                    raw: req.body.raw,
                                                                                    state: req.body.state,
                                                                                    Check_Status: req.body.Check_Status,
                                                                                    commends: req.body.commends,
                                                                                    Check_Month: LaunchPreMonth,
                                                                                    User_RoleType: req.body.User_RoleType,
                                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                                    Status: Module_status,
                                                                                    IsActive: req.body.IsActive,
                                                                                    Current_Time: moment(Date.now()),
                                                                                    Updated_time: moment(Date.now()),
                                                                                    Booking_Type: bookingType,
                                                                                    WeekDay_Count,
                                                                                    WeekEnd_Count,
                                                                                    isStandByBookingIncluded: true,
                                                                                    standByBookingId
                                                                                });

                                                                                Add_Schedule.save()
                                                                                    .then(async (response) => {
                                                                                        let isCleanDay = await AddCleans(mongoose.Types.ObjectId(req.body.Boat_Id), mongoose.Types.ObjectId(req.body.User_Id), 1, req.body.User_RoleType).catch((error) => {
                                                                                            console.log(error)

                                                                                        })
                                                                                        console.log('booking saved to schedule');

                                                                                        //mail
                                                                                        const emailState = 'Successfully Booked.';
                                                                                        const emailContent = `Dear ${OwnerDetails.First_Name} your Boat ${boatDetails.Boat_Name} has been succesfully booked on ${getCurrentTimeFormatted()}`;
                                                                                        const emailContentAdmin = `Dear Adminsistrator the Boat ${boatDetails.Boat_Name} has been successfully booked by ${OwnerDetails.First_Name} on ${getCurrentTimeFormatted()}`;
                                                                                        const emailDetailName = 'Booking Details'
                                                                                        const emailDetails = [
                                                                                            { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                                            { key: 'Booking Date', value: getCurrentTimeFormatted() },
                                                                                        ];
                                                                                        const emailNameAndLink = {
                                                                                            name: 'Booking  Link',
                                                                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                                        }


                                                                                        var mailOptions = {
                                                                                            from: 'noreply.smartboatbooking@gmail.com',
                                                                                            to: OwnerDetails.Email,
                                                                                            subject: 'Successfully Booked',
                                                                                            html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)

                                                                                        };

                                                                                        transporter.sendMail(mailOptions, function (error, info) { });

                                                                                        var mailOptionsAdmin = {
                                                                                            from: 'noreply.smartboatbooking@gmail.com',
                                                                                            to: 'admin@smartboating.com.au',
                                                                                            subject: 'Successfully Booked',
                                                                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)

                                                                                        };

                                                                                        transporter.sendMail(mailOptionsAdmin, function (error, info) { });
                                                                                        //mail

                                                                                        return resolve({ status: true, message: 'The booking has been successfully created' });
                                                                                    })
                                                                                    .catch((error) => {
                                                                                        return reject({
                                                                                            message: error,
                                                                                        });
                                                                                    });
                                                                            } else {
                                                                                return reject({
                                                                                    status: true,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                                });
                                                                            }
                                                                        });
                                                                        //Add
                                                                    } else {
                                                                        return reject({
                                                                            status: true,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                        });
                                                                    }
                                                                });
                                                            } else {
                                                                return reject({
                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        });
                                                    } else {
                                                        return reject({
                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                }
                                            );
                                        } else {
                                            return reject({
                                                status: true,
                                                message: 'Allowed Booking Days Exceeds max count Between launch Date And Pre-Launch Date',
                                            });
                                        }
                                    });
                                } else {
                                    return reject({
                                        status: true,
                                        message: 'The booking allocation for the pre-launch period has been exceeded. Please try booking after launch date of the boat.',
                                    });
                                }
                            });
                        } else {
                            console.log('inside between Launch And PreLuanch');
                            return reject({
                                status: false,
                                message: 'A booking cannot be created for a previous day',
                            });
                        }
                    }

                    //between Launch And PreLaunch

                    //After Launch before current date

                    if (check_Status == '2' && specialDayCheck == 0) {
                        if (dif >= 0) {
                            Schedule.findOne({
                                Boat_Id: Boat_id,
                                User_Id: Owner_id,
                                IsActive: false,
                                Cancelled_Status: 1,
                                $or: [
                                    { end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } },
                                    { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } },
                                    { start_NoTime: Start_final_withoutTime },
                                    { end_NoTime: End_final_withoutTime },
                                    { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] },
                                    { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] },
                                ],
                            }).then(
                                (
                                    Cancelresults //for cancellation
                                ) => {
                                    if (Cancelresults == null) {
                                        Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(
                                            (result) => {
                                                console.log(result.length, 'length');
                                                var _Length = result.length;
                                                if (_Length == 0) {
                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                                        if (result2 == null) {
                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                                if (results == null) {
                                                                    Schedule.findOne({
                                                                        Boat_Id: Boat_id,
                                                                        isBookingPending: false,
                                                                        IsActive: true,
                                                                        $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                                    }).then((results) => {
                                                                        if (results == null) {
                                                                            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then((response) => {
                                                                                var SummerWeekdays = response.Summer_WeekDays;
                                                                                var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                var WinterWeekDays = response.Winter_WeekDays;
                                                                                var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {

                                                                                    let stopExecution = { stop: false }
                                                                                    if(ogTotalDaysCount>1){

                                                                                        var remaingDays = parseInt(ogTotalDaysCount)-1;
                                                                                        var standbyStart = new Date(req.body.end);
                                                                                        standbyStart.setDate(date.getDate() - remaingDays);
                                                                                        var standbYEnd   = req.body.end;

                                                                                    }
                                                                                    else if(ogTotalDaysCount ==1){

                                                                                        var standbyStart = req.body.end;
                                                                                        var standbYEnd   = req.body.end;
                                                                                    }
                                                                                    else if(ogTotalDaysCount ==0){

                                                                                        var standbyStart = req.body.start;
                                                                                        var standbYEnd  = req.body.end;

                                                                                    }
                                                                                    
                                                                                    let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, standbyStart, standbYEnd).catch((error) => {
                                                                                        
                                                                                        console.log(error)
                                                                                        stopExecution = error
                                                                                    })

                                                                                   
                                                                                    if (stopExecution.stop) {
                                                                                        return res.json({ status: true, message: stopExecution.error })
                                                                                    }
                                                                                    let isNextDaysError = false
                                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                            isNextDaysError = true
                                                                                            return res.json(error)
                                                                                        })


                                                                                        if (isNextDaysError) return

                                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                        
                                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;

                                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                        if(element){

                                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                        }else{

                                                                                            return reject({
                                                                                                status: false,
                                                                                                message: 'Consecutive days for this boat is Empty'
                                                                                            })

                                                                                        }

                                                                                        
                                                                                    if(isAvailableDay.type=="summer"){

                                                                                        if(SummerConsecutiveDays>=ogTotalDaysCount){

                                                                                            //count of weekday and week end

                                                                                            
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - ogWeekDaysCount,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - ogWeekendDaysCount
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                if(MonthBookingStatus ==1)
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                else
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"summer");
                                                                                                
                                                                                                let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                
                                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));

                                                                                                let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);

                                                                                                if(MailSend){

                                                                                                    return resolve({

                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully created'
                                                                                                    })

                                                                                                }

                                                                                                

                                                                                                
                                                        

                                                                                        }else{

                                                                                            return reject({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                    }
                                                                                    else if(isAvailableDay.type=="winter"){

                                                                                        if(WinterConsecutiveDays>=ogTotalDaysCount){
                                                                                            
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Winter_WeekDays: WinterWeekDays - ogWeekDaysCount,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - ogWeekendDaysCount

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });

                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else

                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"winter")
                                                                                                    
                                                                                                    let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
    
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
    
                                                                                                    if(MailSend){
    
                                                                                                        return resolve({
    
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
    
                                                                                                    }

                                                                                            

                                                                                        }else{
                                                                                            return reject({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })
                                                                                        }

                                                                                    }
                                                                                    else if(isAvailableDay.type=="both"){

                                                                                        if(isAvailableDay.bookingType == "Summer booking")
                                                                                        var consecutiveCount = SummerConsecutiveDays;
                                                                                        else
                                                                                        var consecutiveCount = WinterConsecutiveDays;

                                                                                        if(consecutiveCount>ogTotalDaysCount){

                                                                                        
                                                                                        var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                        var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                        var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                        var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                        

                                                                                        

                                                                                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                {

                                                                                                    Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                    Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                
                                                                                                },
                                                                                                { new: true },
                                                                                                function (err, data) {
                                                                                                
                                                                                                
                                                                                                });
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {

                                                                                                        Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                        Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt

                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {


                                                                                                    });

                                                                                                    var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                    var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                          
                                                                                                    var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                    var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                      
                                                                                                  


                                                                                                    if(MonthBookingStatus ==1){
                                                                                                        
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        


                                                                                                    }
                                                                                                    
                                                                                                    else{
                                                                                                        

                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                        var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                    }
                                                                                                        let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
        
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
        
                                                                                                        if(MailSend){
        
                                                                                                            return resolve({
        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
        
                                                                                                        }
    

                                                                                                    
                                                                                                    
                                                                                                    

                                             
                                                                                        
                                                                                        
                                                                                        }else{
                                                                                            return reject({
                                                                                                status: false,
                                                                                                message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                            })

                                                                                        }

                                                                                        

                                                                                    }


                                                                                   
                                
                                                                                });
                                                                            });
                                                                        } else {
                                                                            return reject({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                            });
                                                                        }
                                                                    });
                                                                } else {
                                                                    return reject({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                    });
                                                                }
                                                            });
                                                        } else {
                                                            return reject({
                                                                status: false,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                            });
                                                        }
                                                    }); //else inside function owner
                                                } else {
                                                    return reject({
                                                        status: false,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                    });
                                                }
                                            }
                                        );
                                    } else {
                                       
                                        var todaysdate = moment();
                                       
                                        var canceldate = moment(Cancelresults.Updated_time);
                                        var dif = moment.duration(todaysdate.diff(canceldate));
                                      
                                        var Hrdif = Math.round(dif.asHours());

                                        

                                        if (Hrdif > 24) {
                                            Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(
                                                (result) => {
                                                    console.log(result.length, 'length');
                                                    var _Length = result.length;
                                                    if (_Length == 0) {
                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                                            if (result2 == null) {
                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                                    if (results == null) {
                                                                        Schedule.findOne({
                                                                            Boat_Id: Boat_id,
                                                                            isBookingPending: false,
                                                                            IsActive: true,
                                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                                        }).then((results) => {
                                                                            if (results == null) {
                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then((response) => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                        let stopExecution = { stop: false }
                                                                                        if(ogTotalDaysCount>1){

                                                                                            var remaingDays = parseInt(ogTotalDaysCount)-1;
                                                                                            var standbyStart = new Date(req.body.end);
                                                                                            standbyStart.setDate(date.getDate() - remaingDays);
                                                                                            var standbYEnd   = req.body.end;
    
                                                                                        }
                                                                                        else if(ogTotalDaysCount ==1){
    
                                                                                            var standbyStart = req.body.end;
                                                                                            var standbYEnd   = req.body.end;
                                                                                        }
                                                                                        else if(ogTotalDaysCount ==0){
    
                                                                                            var standbyStart = req.body.start;
                                                                                            var standbYEnd  = req.body.end;
    
                                                                                        }
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, standbyStart, standbYEnd).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
                                                                                        
                                                                                        
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
                                                                                        
                                                                                        
                                                                                            if (isNextDaysError) return
                                                                                        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
                                                                                        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
                                                                                        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
                                                                                        
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                            
                                                                                        if(isAvailableDay.type=="summer"){
                                                                                        
                                                                                            if(SummerConsecutiveDays>=ogTotalDaysCount){
                                                                                        
                                                                                                //count of weekday and week end
                                                                                        
                                                                                                
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
                                                                                        
                                                                                                        Summer_WeekDays: SummerWeekdays - ogWeekDaysCount,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - ogWeekendDaysCount
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"summer");
                                                                                                    
                                                                                                    let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                    if(MailSend){
                                                                                        
                                                                                                        return resolve({
                                                                                        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
                                                                                        
                                                                                                    }
                                                                                        
                                                                                                    
                                                                                        
                                                                                                    
                                                                                        
                                                                                        
                                                                                            }else{
                                                                                        
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                        }
                                                                                        else if(isAvailableDay.type=="winter"){
                                                                                        
                                                                                            if(WinterConsecutiveDays>=ogTotalDaysCount){
                                                                                                
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                        
                                                                                                            Winter_WeekDays: WinterWeekDays - ogWeekDaysCount,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - ogWeekendDaysCount
                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                                        });
                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                        
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"winter")
                                                                                                        
                                                                                                        let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                        if(MailSend){
                                                                                        
                                                                                                            return resolve({
                                                                                        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
                                                                                        
                                                                                                        }
                                                                                        
                                                                                                
                                                                                        
                                                                                            }else{
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }
                                                                                        
                                                                                        }
                                                                                        else if(isAvailableDay.type=="both"){
                                                                                        
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
                                                                                        
                                                                                            if(consecutiveCount>ogTotalDaysCount){
                                                                                        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                        
                                                                                            
                                                                                        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
                                                                                        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                                        });
                                                                                        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                        
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                          
                                                                                                      
                                                                                        
                                                                                        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
                                                                                        
                                                                                        
                                                                                                        }
                                                                                                        
                                                                                                        else{
                                                                                                            
                                                                                        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                        }
                                                                                                            let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                            if(MailSend){
                                                                                        
                                                                                                                return resolve({
                                                                                        
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully created'
                                                                                                                })
                                                                                        
                                                                                                            }
                                                                                        
                                                                                        
                                                                                            
                                                                                            }else{
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                            
                                                                                        
                                                                                        }
                                                                                        
                                                                                        

                                                                                    });
                                                                                });
                                                                            } else {
                                                                                return reject({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                                });
                                                                            }
                                                                        });
                                                                    } else {
                                                                        return reject({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                        });
                                                                    }
                                                                });
                                                            } else {
                                                                return reject({
                                                                    status: false,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        }); //else inside function owner
                                                    } else {
                                                        return reject({
                                                            status: false,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                }
                                            );
                                        } else {
                                            return reject({
                                                status: false,
                                                message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again',
                                            });
                                        }
                                    }
                                }
                            );
                        } else {
                            return reject({
                                status: false,
                                message: 'A booking cannot be created for a previous day',
                            });
                        }
                    }

                    //between Launch And PreLuanch
                    if (check_Status == '3' && specialDayCheck == 0) {
                        if (dif >= 0) {
                            //for Previous Date
                            if (User_role == 'Admin') {
                                //for Admin
                                Schedule.find({ Boat_Id: Boat_id, IsActive: true, isBookingPending: false, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then((result) => {
                                    console.log(result.length, 'length');
                                    var _Length = result.length;
                                    if (_Length == 0) {
                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                            if (result2 == null) {
                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                    if (results == null) {
                                                        Schedule.findOne({
                                                            Boat_Id: Boat_id,
                                                            isBookingPending: false,
                                                            IsActive: true,
                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                        }).then((results) => {
                                                            if (results == null) {
                                                                //Add
                                                                console.log('Admin');
                                                                let bookingType = getBookingTypeofAbooking(req.body.start, req.body.end, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);
                                                                let Add_Schedule = new Schedule({
                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: req.body.start,
                                                                    end: req.body.end,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Booking_Type: bookingType,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now()),
                                                                    WeekDay_Count,
                                                                    WeekEnd_Count,
                                                                    isStandByBookingIncluded: true,
                                                                    standByBookingId
                                                                });

                                                                Add_Schedule.save()
                                                                    .then(async (response) => {
                                                                        console.log('booking saved to schedule');

                                                                        let isCleanDay = await AddCleans(mongoose.Types.ObjectId(req.body.Boat_Id), mongoose.Types.ObjectId(req.body.User_Id), 1, req.body.User_RoleType).catch((error) => {
                                                                            console.log(error)

                                                                        })

                                                                        //mail
                                                                        const emailState = 'Successfully Booked.';
                                                                        const emailContent = `Dear ${OwnerDetails.First_Name} your Boat ${boatDetails.Boat_Name} has been succesfully booked on ${getCurrentTimeFormatted()}`;
                                                                        const emailContentAdmin = `Dear Adminsistrator the Boat ${boatDetails.Boat_Name} has been successfully booked by ${OwnerDetails.First_Name} on ${getCurrentTimeFormatted()}`;
                                                                        const emailDetailName = 'Booking Details'
                                                                        const emailDetails = [
                                                                            { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                            { key: 'Booking Date', value: getCurrentTimeFormatted() },
                                                                        ];
                                                                        const emailNameAndLink = {
                                                                            name: 'Booking  Link',
                                                                            link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                        }

                                                                        var mailOptionsAdmin = {
                                                                            from: 'noreply.smartboatbooking@gmail.com',
                                                                            to: 'admin@smartboating.com.au',
                                                                            subject: 'Successfully Booked',
                                                                            html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)

                                                                        };

                                                                        transporter.sendMail(mailOptionsAdmin, function (error, info) { });
                                                                        //mail

                                                                        return reject({
                                                                            status: true,
                                                                            message: 'The admin booking has been successfully created',
                                                                        });
                                                                    })
                                                                    .catch((error) => {
                                                                        return reject({
                                                                            message: error,
                                                                        });
                                                                    });
                                                            } else {
                                                                return reject({
                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        });
                                                        //Add
                                                    } else {
                                                        return reject({
                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                });
                                            } else {
                                                return reject({
                                                    status: true,
                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                });
                                            }
                                        });
                                    } else {
                                        return reject({
                                            status: true,
                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                        });
                                    }
                                });
                            } //For Owner
                            else {
                                Schedule.findOne({
                                    Boat_Id: Boat_id,
                                    User_Id: Owner_id,
                                    IsActive: false,
                                    Cancelled_Status: 1,
                                    $or: [
                                        { end_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } },
                                        { start_NoTime: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } },
                                        { start_NoTime: Start_final_withoutTime },
                                        { end_NoTime: End_final_withoutTime },
                                        { $and: [{ start: { $gte: start_Date } }, { end: { $lte: End_final_withoutTime } }] },
                                        { $and: [{ start: { $lte: start_Date } }, { end: { $gte: End_final_withoutTime } }] },
                                    ],
                                }).then(
                                    (
                                        Cancelresults //for cancellation
                                    ) => {
                                        if (Cancelresults == null) {
                                            console.log('cancellation2');

                                            Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(
                                                (result) => {
                                                    console.log(result.length, 'length');
                                                    var _Length = result.length;
                                                    if (_Length == 0) {
                                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                                            if (result2 == null) {
                                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                                    if (results == null) {
                                                                        Schedule.findOne({
                                                                            Boat_Id: Boat_id,
                                                                            isBookingPending: false,
                                                                            IsActive: true,
                                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                                        }).then((results) => {
                                                                            if (results == null) {
                                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then((response) => {
                                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                                    var WinterweekendDays = response.Winter_WeekEndDays;
                                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                        let stopExecution = { stop: false }
                                                                                        if(ogTotalDaysCount>1){

                                                                                            var remaingDays = parseInt(ogTotalDaysCount)-1;
                                                                                            var standbyStart = new Date(req.body.end);
                                                                                            standbyStart.setDate(standbyStart.getDate() - remaingDays);
                                                                                            var standbYEnd   = req.body.end;
                                                                                            console.log(standbyStart,"-------------------------------standbyStart");
                                                                                            console.log(standbYEnd,"-------------------------------standbYEnd");
    
                                                                                        }
                                                                                        else if(ogTotalDaysCount ==1){
    
                                                                                            var standbyStart = req.body.end;
                                                                                            var standbYEnd   = req.body.end;
                                                                                        }
                                                                                        else if(ogTotalDaysCount ==0){
    
                                                                                            var standbyStart = req.body.start;
                                                                                            var standbYEnd  = req.body.end;
    
                                                                                        }
                                                                                       
                                                                                       
                                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, standbyStart, standbYEnd).catch((error) => {
                                                                                            
                                                                                            console.log(error)
                                                                                            stopExecution = error
                                                                                        })
                                                                                        
                                                                                        
                                                                                        if (stopExecution.stop) {
                                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                                        }
                                                                                        let isNextDaysError = false
                                                                                            let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                                isNextDaysError = true
                                                                                                return res.json(error)
                                                                                            })
                                                                                        
                                                                                        
                                                                                            if (isNextDaysError) return
                                                                                        
                                                                                            var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                            
                                                                                            var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
                                                                                        
                                                                                            let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                            if(element){
                                                                                        
                                                                                                var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                            }else{
                                                                                        
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'Consecutive days for this boat is Empty'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                            
                                                                                        if(isAvailableDay.type=="summer"){
                                                                                        
                                                                                            if(SummerConsecutiveDays>=ogTotalDaysCount){
                                                                                        
                                                                                                //count of weekday and week end
                                                                                        
                                                                                                
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
                                                                                        
                                                                                                        Summer_WeekDays: SummerWeekdays - ogWeekDaysCount,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - ogWeekendDaysCount
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    if(MonthBookingStatus ==1)
                                                                                                    var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                    else
                                                                                                    var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"summer");
                                                                                                    
                                                                                                    let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                    let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                    let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                    if(MailSend){
                                                                                        
                                                                                                        return resolve({
                                                                                        
                                                                                                            status: true,
                                                                                                            message: 'The booking has been successfully created'
                                                                                                        })
                                                                                        
                                                                                                    }
                                                                                        
                                                                                               
                                                                                        
                                                                                        
                                                                                            }else{
                                                                                        
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                        }
                                                                                        else if(isAvailableDay.type=="winter"){
                                                                                        
                                                                                            if(WinterConsecutiveDays>=ogTotalDaysCount){
                                                                                                
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                        
                                                                                                            Winter_WeekDays: WinterWeekDays - ogWeekDaysCount,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - ogWeekendDaysCount
                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                                        });
                                                                                        
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                        
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"winter")
                                                                                                        
                                                                                                        let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                        if(MailSend){
                                                                                        
                                                                                                            return resolve({
                                                                                        
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
                                                                                        
                                                                                                        }
                                                                                        
                                                                                                
                                                                                        
                                                                                            }else{
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                            }
                                                                                        
                                                                                        }
                                                                                        else if(isAvailableDay.type=="both"){
                                                                                        
                                                                                            if(isAvailableDay.bookingType == "Summer booking")
                                                                                            var consecutiveCount = SummerConsecutiveDays;
                                                                                            else
                                                                                            var consecutiveCount = WinterConsecutiveDays;
                                                                                        
                                                                                            if(consecutiveCount>ogTotalDaysCount){
                                                                                        
                                                                                            
                                                                                            var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                            var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                            var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                            var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                            
                                                                                        
                                                                                            
                                                                                        
                                                                                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                    {
                                                                                        
                                                                                                        Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                        Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                    
                                                                                                    },
                                                                                                    { new: true },
                                                                                                    function (err, data) {
                                                                                                    
                                                                                                    
                                                                                                    });
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                        
                                                                                                            Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                            Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                                        });
                                                                                        
                                                                                                        var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                        var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                        
                                                                                                        var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                        var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                          
                                                                                                      
                                                                                        
                                                                                        
                                                                                                        if(MonthBookingStatus ==1){
                                                                                                            
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            
                                                                                        
                                                                                        
                                                                                                        }
                                                                                                        
                                                                                                        else{
                                                                                                            
                                                                                        
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                            var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                        }
                                                                                                            let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                    
                                                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                        
                                                                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                        
                                                                                                            if(MailSend){
                                                                                        
                                                                                                                return resolve({
                                                                                        
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully created'
                                                                                                                })
                                                                                        
                                                                                                            }
                                                                                        
                                                                                            
                                                                                            
                                                                                            }else{
                                                                                                return reject({
                                                                                                    status: false,
                                                                                                    message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                })
                                                                                        
                                                                                            }
                                                                                        
                                                                                            
                                                                                        
                                                                                        }
                                                                                        
                                                                                        
                                                                                    });
                                                                                });
                                                                            } else {
                                                                                return reject({
                                                                                    status: false,
                                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                                });
                                                                            }
                                                                        });
                                                                    } else {
                                                                        return reject({
                                                                            status: false,
                                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                        });
                                                                    }
                                                                });
                                                            } else {
                                                                return reject({
                                                                    status: false,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        }); //else inside function owner
                                                    } else {
                                                        return reject({
                                                            status: false,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                }
                                            );
                                        } else {
                                            //

                                           
                                            var todaysdate = moment();
                                           
                                            var canceldate = moment(Cancelresults.Updated_time);
                                            var dif = moment.duration(todaysdate.diff(canceldate));
                                          
                                            var Hrdif = Math.round(dif.asHours());

                                          

                                            if (Hrdif > 24) {
                                                Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then(
                                                    (result) => {
                                                        console.log(result.length, 'length');
                                                        var _Length = result.length;
                                                        if (_Length == 0) {
                                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                                                if (result2 == null) {
                                                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                                        if (results == null) {
                                                                            Schedule.findOne({
                                                                                Boat_Id: Boat_id,
                                                                                isBookingPending: false,
                                                                                IsActive: true,
                                                                                $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                                            }).then((results) => {
                                                                                if (results == null) {
                                                                                    Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then((response) => {
                                                                                        var SummerWeekdays = response.Summer_WeekDays;
                                                                                        var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                                        var WinterWeekDays = response.Winter_WeekDays;
                                                                                        var WinterweekendDays = response.Winter_WeekEndDays;

                                                                                        //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                                        Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                                            let stopExecution = { stop: false }
                                                                                            if(ogTotalDaysCount>1){

                                                                                                var remaingDays = parseInt(ogTotalDaysCount)-1;
                                                                                                var standbyStart = new Date(req.body.end);
                                                                                                standbyStart.setDate(date.getDate() - remaingDays);
                                                                                                var standbYEnd   = req.body.end;
        
                                                                                            }
                                                                                            else if(ogTotalDaysCount ==1){
        
                                                                                                var standbyStart = req.body.end;
                                                                                                var standbYEnd   = req.body.end;
                                                                                            }
                                                                                            else if(ogTotalDaysCount ==0){
        
                                                                                                var standbyStart = req.body.start;
                                                                                                var standbYEnd  = req.body.end;
        
                                                                                            }
                                                                                           
                                                                                          
                                                                                            let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, standbyStart, standbYEnd).catch((error) => {
                                                                                                
                                                                                                console.log(error)
                                                                                                stopExecution = error
                                                                                            })
                                                                                            
                                                                                            
                                                                                            if (stopExecution.stop) {
                                                                                                return res.json({ status: true, message: stopExecution.error })
                                                                                            }
                                                                                            let isNextDaysError = false
                                                                                                let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                                                    isNextDaysError = true
                                                                                                    return res.json(error)
                                                                                                })
                                                                                            
                                                                                            
                                                                                                if (isNextDaysError) return
                                                                                            
                                                                                                var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                                
                                                                                                var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
                                                                                            
                                                                                                let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                                                if(element){
                                                                                            
                                                                                                    var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                                                    var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                                                }else{
                                                                                            
                                                                                                    return reject({
                                                                                                        status: false,
                                                                                                        message: 'Consecutive days for this boat is Empty'
                                                                                                    })
                                                                                            
                                                                                                }
                                                                                            
                                                                                                
                                                                                            if(isAvailableDay.type=="summer"){
                                                                                            
                                                                                                if(SummerConsecutiveDays>=ogTotalDaysCount){
                                                                                            
                                                                                                    //count of weekday and week end
                                                                                            
                                                                                                    
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                            
                                                                                                            Summer_WeekDays: SummerWeekdays - ogWeekDaysCount,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - ogWeekendDaysCount
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        if(MonthBookingStatus ==1)
                                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                        else
                                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"summer");
                                                                                                        
                                                                                                        let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                        
                                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                            
                                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                            
                                                                                                        if(MailSend){
                                                                                            
                                                                                                            return resolve({
                                                                                            
                                                                                                                status: true,
                                                                                                                message: 'The booking has been successfully created'
                                                                                                            })
                                                                                            
                                                                                                        }
                                                                                            
                                                                                                        
                                                                                            
                                                                                                        
                                                                                            
                                                                                            
                                                                                                }else{
                                                                                            
                                                                                                    return reject({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
                                                                                            
                                                                                                }
                                                                                            
                                                                                            }
                                                                                            else if(isAvailableDay.type=="winter"){
                                                                                            
                                                                                                if(WinterConsecutiveDays>=ogTotalDaysCount){
                                                                                                    
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
                                                                                            
                                                                                                                Winter_WeekDays: WinterWeekDays - ogWeekDaysCount,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - ogWeekendDaysCount
                                                                                            
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                                            });
                                                                                            
                                                                                                            if(MonthBookingStatus ==1)
                                                                                                            var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                            else
                                                                                            
                                                                                                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"winter")
                                                                                                            
                                                                                                            let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                        
                                                                                                            let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                            
                                                                                                            let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                            
                                                                                                            if(MailSend){
                                                                                            
                                                                                                                return resolve({
                                                                                            
                                                                                                                    status: true,
                                                                                                                    message: 'The booking has been successfully created'
                                                                                                                })
                                                                                            
                                                                                                            }
                                                                                            
                                                                                                    
                                                                                            
                                                                                                }else{
                                                                                                    return reject({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
                                                                                                }
                                                                                            
                                                                                            }
                                                                                            else if(isAvailableDay.type=="both"){
                                                                                            
                                                                                                if(isAvailableDay.bookingType == "Summer booking")
                                                                                                var consecutiveCount = SummerConsecutiveDays;
                                                                                                else
                                                                                                var consecutiveCount = WinterConsecutiveDays;
                                                                                            
                                                                                                if(consecutiveCount>ogTotalDaysCount){
                                                                                            
                                                                                                
                                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                                var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                                var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                                
                                                                                            
                                                                                                
                                                                                            
                                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                        {
                                                                                            
                                                                                                            Summer_WeekDays: SummerWeekdays - summerWeekdayWeekend.weekdaycnt,
                                                                                                            Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                                        
                                                                                                        },
                                                                                                        { new: true },
                                                                                                        function (err, data) {
                                                                                                        
                                                                                                        
                                                                                                        });
                                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                                            {
                                                                                            
                                                                                                                Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                                Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                                                                            
                                                                                                            },
                                                                                                            { new: true },
                                                                                                            function (err, data) {
                                                                                            
                                                                                            
                                                                                                            });
                                                                                            
                                                                                                            var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                                            var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                                                                            
                                                                                                            var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                                            var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1]
                                                                                                              
                                                                                                          
                                                                                            
                                                                                            
                                                                                                            if(MonthBookingStatus ==1){
                                                                                                                
                                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                                                
                                                                                            
                                                                                            
                                                                                                            }
                                                                                                            
                                                                                                            else{
                                                                                                                
                                                                                            
                                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                                            }
                                                                                                                let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                        
                                                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                                                                            
                                                                                                                let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                                                                            
                                                                                                                if(MailSend){
                                                                                            
                                                                                                                    return resolve({
                                                                                            
                                                                                                                        status: true,
                                                                                                                        message: 'The booking has been successfully created'
                                                                                                                    })
                                                                                            
                                                                                                                }
                                                                                            
                                                                                            
                                                                                                
                                                                                                }else{
                                                                                                    return reject({
                                                                                                        status: false,
                                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                                    })
                                                                                            
                                                                                                }
                                                                                            
                                                                                                
                                                                                            
                                                                                            }
                                                                                            
                                                                                            
                                                                                        });
                                                                                    });
                                                                                } else {
                                                                                    return reject({
                                                                                        status: false,
                                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                                    });
                                                                                }
                                                                            });
                                                                        } else {
                                                                            return reject({
                                                                                status: false,
                                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                            });
                                                                        }
                                                                    });
                                                                } else {
                                                                    return reject({
                                                                        status: false,
                                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                    });
                                                                }
                                                            }); //else inside function owner
                                                        } else {
                                                            return reject({
                                                                status: false,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                            });
                                                        }
                                                    }
                                                );
                                            } else {
                                                return reject({
                                                    status: false,
                                                    message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again',
                                                });
                                            } //

                                            // return reject({
                                            //     status:false,
                                            //     message: 'You will be allowed to rebook on '+' ' +moment(Start_final).format('DD-MM-YYYY') +' '  +'to' +' ' +moment(End_final).format('DD-MM-YYYY') +' '  +'for' +' ' +boatDetails.Boat_Name +' '  +'only after 24 hours from now'
                                            // })
                                        }
                                    }
                                );
                            }
                        } else {
                            return reject({
                                status: false,
                                message: 'A booking cannot be created for a previous day',
                            });
                        }
                    }

                    if ((check_Status = '4' && User_role == 'Maintenance')) {
                        if (dif >= 0) {
                            //for Previous Date
                            Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then((result) => {
                                console.log(result.length, 'length');
                                var _Length = result.length;
                                if (_Length == 0) {
                                    Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                        if (result2 == null) {
                                            Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                if (results == null) {
                                                    Schedule.findOne({
                                                        Boat_Id: Boat_id,
                                                        isBookingPending: false,
                                                        IsActive: true,
                                                        $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                    }).then((results) => {
                                                        if (results == null) {
                                                            //Add
                                                            console.log('Admin');
                                                            let bookingType = getBookingTypeofAbooking(req.body.start, req.body.end, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);
                                                            let Add_Schedule = new Schedule({
                                                                Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                Booking_ID: globalbookingid,
                                                                Boat_Name: req.body.Boat_Name,
                                                                Total_DaysBooked: Total_Count,
                                                                calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                title: req.body.title,
                                                                body: req.body.body,
                                                                start: req.body.start,
                                                                end: req.body.end,
                                                                start_NoTime: Start_final_withoutTime,
                                                                end_NoTime: Start_final_withoutTime,
                                                                goingDuration: req.body.goingDuration,
                                                                comingDuration: req.body.comingDuration,
                                                                isAllDay: req.body.isAllDay,
                                                                category: req.body.category,
                                                                dueDateClass: req.body.dueDateClass,
                                                                location: req.body.location,
                                                                attendees: req.body.attendees,
                                                                recurrenceRule: req.body.recurrenceRule,
                                                                isPending: req.body.isPending,
                                                                isFocused: req.body.isFocused,
                                                                isVisible: req.body.isVisible,
                                                                isReadOnly: req.body.isReadOnly,
                                                                isPrivate: req.body.isPrivate,
                                                                color: req.body.color,
                                                                Is_StandByBooking: req.body.Is_StandByBooking,
                                                                Check_Status: req.body.Check_Status,
                                                                commends: req.body.commends,
                                                                bgColor: req.body.bgColor,
                                                                dragBgColor: req.body.dragBgColor,
                                                                borderColor: req.body.borderColor,
                                                                customStyle: req.body.customStyle,
                                                                raw: req.body.raw,
                                                                state: req.body.state,
                                                                User_RoleType: req.body.User_RoleType,
                                                                User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                Status: Module_status,
                                                                IsActive: req.body.IsActive,
                                                                Booking_Type: bookingType,
                                                                Current_Time: moment(Date.now()),
                                                                Updated_time: moment(Date.now()),
                                                                WeekDay_Count,
                                                                WeekEnd_Count,
                                                                isStandByBookingIncluded: true,
                                                                standByBookingId
                                                            });

                                                            Add_Schedule.save()
                                                                .then(async (response) => {
                                                                    console.log('booking saved to schedule');

                                                                    let isCleanDay = await AddCleans(mongoose.Types.ObjectId(req.body.Boat_Id), mongoose.Types.ObjectId(req.body.User_Id), 1, req.body.User_RoleType).catch((error) => {
                                                                        console.log(error)

                                                                    })

                                                                    //mail
                                                                    const emailState = 'Successfully Booked.';
                                                                    const emailContent = `Dear ${OwnerDetails.First_Name} your Boat ${boatDetails.Boat_Name} has been succesfully booked on ${getCurrentTimeFormatted()}`;
                                                                    const emailContentAdmin = `Dear Adminsistrator the Boat ${boatDetails.Boat_Name} has been successfully booked by ${OwnerDetails.First_Name} on ${getCurrentTimeFormatted()}`;
                                                                    const emailDetailName = 'Booking Details'
                                                                    const emailDetails = [
                                                                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                                                                        { key: 'Booking Date', value: getCurrentTimeFormatted() },
                                                                    ];
                                                                    const emailNameAndLink = {
                                                                        name: 'Booking  Link',
                                                                        link: `${process.env.CLIENT_URL}/boat-bookings`
                                                                    }

                                                                    var mailOptionsAdmin = {
                                                                        from: 'noreply.smartboatbooking@gmail.com',
                                                                        to: 'admin@smartboating.com.au',
                                                                        subject: 'Maintainance Booking',
                                                                        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)

                                                                    };

                                                                    transporter.sendMail(mailOptionsAdmin, function (error, info) { });
                                                                    //mail

                                                                    return reject({
                                                                        status: true,
                                                                        message: 'The boat maintenance booking has been successfully created',
                                                                    });
                                                                })
                                                                .catch((error) => {
                                                                    return reject({
                                                                        message: error,
                                                                    });
                                                                });
                                                        } else {
                                                            return reject({
                                                                status: true,
                                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                            });
                                                        }
                                                    });
                                                    //Add
                                                } else {
                                                    return reject({
                                                        status: true,
                                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                    });
                                                }
                                            });
                                        } else {
                                            return reject({
                                                status: true,
                                                message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                            });
                                        }
                                    });
                                } else {
                                    return reject({
                                        status: true,
                                        message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                    });
                                }
                            });
                        } else {
                            return reject({
                                status: false,
                                message: 'A booking cannot be created for a previous day',
                            });
                        }
                    }

                    // special Day
                    if (specialDayCheck == 1) {
                        console.log('StandBy Special');
                        const Specialday_id = req.body.specialDayId;
                        
                        
                        //mongoose.set('debug', true);
                     let objspecialStand = await Add_Special_Days.find({_id:mongoose.Types.ObjectId(Specialday_id)}).catch((error) => console.log(error));

                        

                        if (dif >= 0) {
                            //for Previous Date
                            if (User_role == 'Admin') {
                                //for Admin
                                Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then((result) => {
                                    console.log(result.length, 'length');
                                    var _Length = result.length;
                                    if (_Length == 0) {
                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                            if (result2 == null) {
                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                    if (results == null) {
                                                        Schedule.findOne({
                                                            Boat_Id: Boat_id,
                                                            isBookingPending: false,
                                                            IsActive: true,
                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                        }).then((results) => {
                                                            if (results == null) {
                                                                //Add
                                                                console.log('Admin');
                                                                let bookingType = getBookingTypeofAbooking(req.body.start, req.body.end, boatDetails.PreLaunch_Date, boatDetails.Launch_Date, boatDetails.SummerSeason_SDate, boatDetails.SummerSeason_EDate, boatDetails.WinterSeason_SDate, boatDetails.WinterSeason_EDate);

                                                                let Add_Schedule = new Schedule({
                                                                    Boat_Id: mongoose.Types.ObjectId(req.body.Boat_Id),
                                                                    Booking_ID: globalbookingid,
                                                                    Boat_Name: req.body.Boat_Name,
                                                                    Total_DaysBooked: Total_Count,
                                                                    calendarId: mongoose.Types.ObjectId(req.body.calendarId),
                                                                    title: req.body.title,
                                                                    body: req.body.body,
                                                                    start: req.body.start,
                                                                    end: req.body.end,
                                                                    start_NoTime: Start_final_withoutTime,
                                                                    end_NoTime: End_final_withoutTime,
                                                                    goingDuration: req.body.goingDuration,
                                                                    comingDuration: req.body.comingDuration,
                                                                    isAllDay: req.body.isAllDay,
                                                                    category: req.body.category,
                                                                    dueDateClass: req.body.dueDateClass,
                                                                    location: req.body.location,
                                                                    attendees: req.body.attendees,
                                                                    recurrenceRule: req.body.recurrenceRule,
                                                                    isPending: req.body.isPending,
                                                                    isFocused: req.body.isFocused,
                                                                    isVisible: req.body.isVisible,
                                                                    isReadOnly: req.body.isReadOnly,
                                                                    isPrivate: req.body.isPrivate,
                                                                    color: req.body.color,
                                                                    bgColor: req.body.bgColor,
                                                                    Is_StandByBooking: req.body.Is_StandByBooking,
                                                                    Check_Status: req.body.Check_Status,
                                                                    commends: req.body.commends,
                                                                    dragBgColor: req.body.dragBgColor,
                                                                    borderColor: req.body.borderColor,
                                                                    customStyle: req.body.customStyle,
                                                                    raw: req.body.raw,
                                                                    state: req.body.state,
                                                                    User_RoleType: req.body.User_RoleType,
                                                                    User_Id: mongoose.Types.ObjectId(req.body.User_Id),
                                                                    Admin_Id: mongoose.Types.ObjectId(req.body.Admin_Id),
                                                                    Status: Module_status,
                                                                    IsActive: req.body.IsActive,
                                                                    Booking_Type: bookingType,
                                                                    Current_Time: moment(Date.now()),
                                                                    Updated_time: moment(Date.now()),
                                                                    WeekDay_Count,
                                                                    WeekEnd_Count,
                                                                    isStandByBookingIncluded: true,
                                                                    standByBookingId
                                                                });

                                                                Add_Schedule.save()
                                                                    .then(async (response) => {
                                                                        console.log('booking saved to schedule');

                                                                        let isCleanDay = await AddCleans(mongoose.Types.ObjectId(req.body.Boat_Id), mongoose.Types.ObjectId(req.body.User_Id), 1, req.body.User_RoleType).catch((error) => {
                                                                            console.log(error)

                                                                        })

                                                                        return reject({
                                                                            status: true,
                                                                            message: 'The admin booking has been successfully created',
                                                                        });
                                                                    })
                                                                    .catch((error) => {
                                                                        return reject({
                                                                            message: error,
                                                                        });
                                                                    });
                                                            } else {
                                                                return reject({
                                                                    status: true,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        });
                                                        //Add
                                                    } else {
                                                        return reject({
                                                            status: true,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                });
                                            } else {
                                                return reject({
                                                    status: true,
                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                });
                                            }
                                        });
                                    } else {
                                        return reject({
                                            status: true,
                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                        });
                                    }
                                });
                            } //For Owner
                            else {
                                Schedule.find({ Boat_Id: Boat_id, isBookingPending: false, IsActive: true, $or: [{ start_NoTime: Start_final_withoutTime }, { end_NoTime: End_final_withoutTime }] }).then((result) => {
                                    console.log(result.length, 'length');
                                    var _Length = result.length;
                                    if (_Length == 0) {
                                        Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $gte: start_Date }, end: { $lte: End_final_withoutTime }, IsActive: true }).then((result2) => {
                                            if (result2 == null) {
                                                Schedule.findOne({ Boat_Id: Boat_id, isBookingPending: false, start: { $lte: start_Date }, end: { $gte: End_final_withoutTime }, IsActive: true }).then((results) => {
                                                    if (results == null) {
                                                        Schedule.findOne({
                                                            Boat_Id: Boat_id,
                                                            isBookingPending: false,
                                                            IsActive: true,
                                                            $or: [{ end: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }, { start: { $gte: Start_final_withoutTime, $lte: End_final_withoutTime } }],
                                                        }).then((results) => {
                                                            if (results == null) {
                                                              

                                                                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then((response) => {
                                                                    var SummerWeekdays = response.Summer_WeekDays;
                                                                    var SummerWeekendDays = response.Summer_WeekEndDays;
                                                                    var WinterWeekDays = response.Winter_WeekDays;
                                                                    var WinterweekendDays = response.Winter_WeekEndDays;

                                                                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime},

                                                                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                                                                        let stopExecution = { stop: false }
                                                                        if(ogTotalDaysCount>1){

                                                                            var remaingDays = parseInt(ogTotalDaysCount)-1;
                                                                            var standbyStart = new Date(req.body.end);
                                                                            standbyStart.setDate(standbyStart.getDate() - remaingDays);
                                                                            var standbYEnd   = req.body.end;

                                                                        }
                                                                        else if(ogTotalDaysCount ==1){

                                                                            var standbyStart = req.body.end;
                                                                            var standbYEnd   = req.body.end;
                                                                        }
                                                                        else if(ogTotalDaysCount ==0){

                                                                            var standbyStart = req.body.start;
                                                                            var standbYEnd  = req.body.end;

                                                                        }
                                                                       
                                                                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate, Boatresults.WinterSeason_EDate, standbyStart, standbYEnd).catch((error) => {
                                                                            console.log(error)
                                                                            stopExecution = error
                                                                        })
                                    
                                                                        if (stopExecution.stop) {
                                                                            return res.json({ status: true, message: stopExecution.error })
                                                                        }
                                    
                                                                        let isNextDaysError = false
                                                                        let isNextBookingDayIncluded = await checkIfNextBookingDayIsIncluded(req.body.start, req.body.end, req.body.Boat_Id, req.body.timeZone, true, req.body.User_Id).catch((error) => {
                                                                            isNextDaysError = true
                                                                            return res.json(error)
                                                                        })
                                    
                                    
                                                                        if (isNextDaysError) return
                                                                        var isBookingPending = isNextBookingDayIncluded.included ? true : false;
                                                                                
                                                                        var isNextDayBookingIncluded = isNextBookingDayIncluded.isNextDayBookingIncluded;
                                    
                                                                        
                                    
                                                                        let element = await consecutive.findOne({ Boat_Id: mongoose.Types.ObjectId(Boat_id)}).catch((error) => console.log(error));
                                                                        if(element){
                                    
                                                                            var SummerConsecutiveDays = element.Summer_ConsecutiveDays;
                                                                            var  WinterConsecutiveDays = element.Winter_ConsecutiveDays;
                                                                        }else{
                                    
                                                                            res.json({
                                                                                status: false,
                                                                                message: 'Consecutive days for this boat is Empty'
                                                                            })
                                    
                                                                        }
                                    
                                                                        CheckSpecialDaysExist(Boat_id, Owner_id, objspecialStand,0).then(async function (myflag) {
                                    
                                                                            if (myflag == 0) {
                                                                                
                                    
                                                                            if(isAvailableDay.type=="summer"){
                                                                                
                                    
                                                                                if(SummerConsecutiveDays>=ogTotalDaysCount){
                                    
                                                                                    
                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                        {
                                    
                                                                                            Summer_WeekDays: SummerWeekdays - ogWeekDaysCount,
                                                                                            Summer_WeekEndDays: SummerWeekendDays - ogWeekendDaysCount
                                    
                                                                                        },
                                                                                        { new: true },
                                                                                        function (err, data) {
                                    
                                    
                                                                                        });
                                                                                        if(MonthBookingStatus ==1)
                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                        else
                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"summer");
                                                                                        
                                                                                        let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                        objspecialStand.map(function (objs) {
                                                                                            var specialday = objs.special_date;
                                                                                            var Specialdayid = objs._id;
                                                                                            var Start_final = moment(specialday);
                                                                                            var Start_final_withoutTime = Start_final.startOf('day');
                                                                                            console.log(Start_final_withoutTime)
                                                                                            var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                            if (addspecial == true) {
                                                                                                console.log('successs')
                                                                                            }
                                                                                            else {
                                                                                                console.log('fail')
                                                                                            }
                                                                                        })
                                                                                        
                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                    
                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                    
                                                                                        if(MailSend){
                                    
                                                                                            return resolve({
                                    
                                                                                                status: true,
                                                                                                message: 'The booking has been successfully created'
                                                                                            })
                                    
                                                                                        }
                                    
                                                                                  
                                    
                                    
                                                                                }else{
                                    
                                                                                    return reject({
                                                                                        status: false,
                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                    })
                                                                                    
                                                                                }
                                    
                                                                            }
                                                                            else if(isAvailableDay.type=="winter"){
                                    
                                                                                
                                                                                
                                                                                if(WinterConsecutiveDays>=ogTotalDaysCount){
                                                                                    
                                                                                    
                                    
                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                        {
                                    
                                                                                            Winter_WeekDays: WinterWeekDays - ogWeekDaysCount,
                                                                                            Winter_WeekEndDays: WinterweekendDays - ogWeekendDaysCount
                                    
                                                                                        },
                                                                                        { new: true },
                                                                                        function (err, data) {
                                    
                                    
                                                                                        });
                                                                                       
                                                                                        
                                                                                        if(MonthBookingStatus ==1)
                                                                                        var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                                                                                        else
                                                                                        var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, ogTotalDaysCount, ogWeekDaysCount, ogWeekendDaysCount,exp_year,"winter");
                                                                                        let addSchedule =  await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                       
                                                                                        objspecialStand.map(function (objs) {
                                                                                            var specialday = objs.special_date;
                                                                                            var Specialdayid = objs._id;
                                                                                            var Start_final = moment(specialday);
                                                                                            var Start_final_withoutTime = Start_final.startOf('day');
                                                                                            console.log(Start_final_withoutTime)
                                                                                            var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                            if (addspecial == true) {
                                                                                                console.log('successs')
                                                                                            }
                                                                                            else {
                                                                                                console.log('fail')
                                                                                            }
                                                                                        })
                                                                                        
                                                                                        let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                    
                                                                                        let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                    
                                                                                        if(MailSend){
                                    
                                                                                            return resolve({
                                    
                                                                                                status: true,
                                                                                                message: 'The booking has been successfully created'
                                                                                            })
                                    
                                                                                        }
                                    
                                    
                                                                                   
                                    
                                                                                }else{
                                                                                    return reject({
                                                                                        status: false,
                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                    })
                                                                                }
                                    
                                                                            }
                                                                            else if(isAvailableDay.type=="both"){
                                                                                
                                                                                if(isAvailableDay.bookingType == "Summer booking")
                                                                                var consecutiveCount = SummerConsecutiveDays;
                                                                                else
                                                                                var consecutiveCount = WinterConsecutiveDays;
                                                                               
                                                                                if(consecutiveCount>=ogTotalDaysCount){
                                                                                var summerWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.summer_Arr));
                                                                                var winterWeekdayWeekend = JSON.parse(CheckDaynames(isAvailableDay.winter_Arr));
                                                                                var TotalSummerDays = parseInt(summerWeekdayWeekend.weekdaycnt)+parseInt(summerWeekdayWeekend.weekendCnt);
                                                                                var TotalWinterDays = parseInt(winterWeekdayWeekend.weekdaycnt)+parseInt(winterWeekdayWeekend.weekendCnt);
                                                                                
                                    
                                                                                    Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                        {
                                    
                                                                                            Summer_WeekDays: SummerWeekdays -  summerWeekdayWeekend.weekdaycnt,
                                                                                            Summer_WeekEndDays: SummerWeekendDays - summerWeekdayWeekend.weekendCnt
                                                                                        
                                                                                        },
                                                                                        { new: true },
                                                                                        function (err, data) {
                                                                                        
                                                                                        
                                                                                        });
                                                                                        Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                                                                            {
                                    
                                                                                                Winter_WeekDays: WinterWeekDays - winterWeekdayWeekend.weekdaycnt,
                                                                                                Winter_WeekEndDays: WinterweekendDays - winterWeekdayWeekend.weekendCnt
                                    
                                                                                            },
                                                                                            { new: true },
                                                                                            function (err, data) {
                                    
                                    
                                                                                            });
                                                                                            var Summer_Sdate = isAvailableDay.summer_Arr[0];
                                                                                            var Summer_Edate = isAvailableDay.summer_Arr[(isAvailableDay.summer_Arr.length)-1]
                                    
                                                                                            var Winter_Sdate = isAvailableDay.winter_Arr[0];
                                                                                            var Winter_Edate = isAvailableDay.winter_Arr[(isAvailableDay.winter_Arr.length)-1];
                                    
                                                                                            
                                                                                            if(MonthBookingStatus ==1){
                                                                                                
                                                                                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id,start_Date, end_Date,anni_month);
                                                                                                
                                    
                                    
                                                                                            }
                                                                                            
                                                                                            else{
                                                                                                
                                    
                                                                                                var x = AddBookingDays_Owner(Boat_id, Owner_id, Summer_Sdate, Summer_Edate, TotalSummerDays,  summerWeekdayWeekend.weekdaycnt, summerWeekdayWeekend.weekendCnt,exp_year,"summer")
                                                                                                var y = AddBookingDays_Owner(Boat_id, Owner_id, Winter_Sdate, Winter_Edate, TotalWinterDays,  winterWeekdayWeekend.weekdaycnt, winterWeekdayWeekend.weekendCnt,exp_year,"winter")
                                                                                            }
                                                                                                let addSchedule = await SaveStandby(req.body,globalbookingid,ogTotalDaysCount,ogWeekDaysCount,ogWeekendDaysCount,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId);
                                                                                                objspecialStand.map(function (objs) {
                                                                                                    var specialday = objs.special_date;
                                                                                                    var Specialdayid = objs._id;
                                                                                                    var Start_final = moment(specialday);
                                                                                                    var Start_final_withoutTime = Start_final.startOf('day');
                                                                                                    console.log(Start_final_withoutTime)
                                                                                                    var addspecial = AddSpecialDay(addSchedule.scheduleid,Boat_id, Owner_id, Specialdayid, specialday, Start_final)
                                                                                                    if (addspecial == true) {
                                                                                                        console.log('successs')
                                                                                                    }
                                                                                                    else {
                                                                                                        console.log('fail')
                                                                                                    }
                                                                                                })
                                                                                        
                                                                                                let isCleanDay = await AddCleans(Boat_id, Owner_id, Noofcleans, User_role).catch((error) => console.log(error));
                                    
                                                                                                let MailSend   = await SendMailToCustomer(OwnerDetails.Email,OwnerDetails.First_Name,boatDetails.Boat_Name,start_Date,req.body.start,req.body.end);
                                    
                                                                                                if(MailSend){
                                    
                                                                                                    return resolve({
                                    
                                                                                                        status: true,
                                                                                                        message: 'The booking has been successfully created'
                                                                                                    })
                                    
                                                                                                }
                                    
                                    
                                                                                }else{
                                                                                    return reject({
                                                                                        status: false,
                                                                                        message: 'The booking exceeds the maximum booking duration. Please try to create a booking with fewer days'
                                                                                    })
                                                                                }
                                                                            }
                                    
                                                                            }else{
                                                                                return reject({
                                                                                    status: true,
                                                                                    message: 'You Have Already Booked Special Day'
                                                                                })
                                    
                                                                            }
                                    
                                    
                                                                        });
                                    
                      
                                                                    });
                                                                });
                                                            } else {
                                                                return reject({
                                                                    status: false,
                                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                                });
                                                            }
                                                        });
                                                    } else {
                                                        return reject({
                                                            status: false,
                                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                        });
                                                    }
                                                });
                                            } else {
                                                return reject({
                                                    status: false,
                                                    message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                                });
                                            }
                                        }); //else inside function owner
                                    } else {
                                        return reject({
                                            status: false,
                                            message: 'An existing booking already exists for this date. A new booking cannot be created.',
                                        });
                                    }
                                });
                            }
                        } else {
                            return reject({
                                status: false,
                                message: 'A booking cannot be created for a previous day',
                            });
                        }
                    }

                    //special Day
                } else {
                    return reject({
                        status: false,
                        message: 'Boat Selected is not Active',
                    });
                }
            });
        });
    });
};

//StandbyBooking Adding

//StandbyBooking Adding


//check if it is summer or winter 


const checkIfIncludedInSeason = (boatId, Owner_Id, seasonStartDate, seasonEndDate,winter_StartDate,winter_EndDate,incomingStartDate, incomingEndDate) => {
    return new Promise(async (resolve, reject) => {
     
       /// Raga ////

       
      
       const summer_Arr=[];
       const winter_Arr=[];
     
       let incomingDays    =  getDaysBetweenDates(incomingStartDate,incomingEndDate);
       let bookeddates     =  getDaysBetweenDatesWithoutYear(incomingStartDate,incomingEndDate);
       let SummerDates     =  getDaysBetweenDatesWithoutYear(seasonStartDate,seasonEndDate);
       let WinterDates     =  getDaysBetweenDatesWithoutYear(winter_StartDate,winter_EndDate);
       let summerArr       =  bookeddates.filter(bookedval => SummerDates.includes(bookedval));
       let winterArr       =  bookeddates.filter(bookedval => WinterDates.includes(bookedval));
       
       var index=-1;
       for(const booked_dates of bookeddates){
           index++;

        if(SummerDates.includes(booked_dates)){
          
            summer_Arr.push(incomingDays[index]);
           
        }
        if(WinterDates.includes(booked_dates)){
            winter_Arr.push(incomingDays[index]);
          


        }
       }

     
     if((summerArr.length>0)&&(winterArr.length>0)){

        let incoming_StartDate  = momentTimezone(incomingStartDate).tz(process.env.TIME_ZONE).format();
        var incoming_Date = moment(incoming_StartDate);
        var begin_Date = new Date(incoming_Date);
        let StartTime = begin_Date.getUTCHours();
        let incoming_EndDate  = momentTimezone(incomingEndDate).tz(process.env.TIME_ZONE).format();
        var incoming_EnDate = moment(incoming_EndDate);
        var ending_Date = new Date(incoming_EnDate);
        let Endime = ending_Date.getUTCHours();
       
 
       let summerelem = new Date(summer_Arr[0]);
       let summerfinal = new Date(summer_Arr[(summer_Arr.length)-1]);
     
       let newSummerStartDate = new Date(summerelem.setUTCHours(StartTime, 00, 00, 00));
       let newSummerEndDate = new Date(summerfinal.setUTCHours(Endime, 00, 00, 00));
 
       let winterelem = new Date(winter_Arr[0]);
       let winterfinal = new Date(winter_Arr[(winter_Arr.length)-1]);
     
       let newWinterStartDate = new Date(winterelem.setUTCHours(StartTime, 00, 00, 00));
       let newWinterEndDate = new Date(winterfinal.setUTCHours(Endime, 00, 00, 00));

    
     if(SummerDates.find(sdate=>sdate==bookeddates[0]))
     var booking_type    = "Summer booking";
     else if(WinterDates.find(wdate=>wdate==bookeddates[0]))
     var booking_type    = "Winter booking";
    return resolve({ status: true, type:'both',bookingType:booking_type,summer_Arr:summer_Arr,winter_Arr:winter_Arr,SummerStart:newSummerStartDate,SummerEnd:newSummerEndDate,WinterStart:newWinterStartDate,WinterEnd:newWinterEndDate,message: `included in this season.`,stop: false });

    }
    else if(((summerArr.length)==0)&&(winterArr.length>0)){

        return resolve({ status: true, type:'winter',message: `included in this season.`,stop: false});

    }
    
    else if((summerArr.length>0)&&(winterArr.length==0))
    return resolve({ status: true, type:'summer',message: `included in this season.`,stop: false });
    else if((summerArr.length==0)&&(winterArr.length==0))
    return resolve({ status: false, type:'not',message: `Not included in the season.`,stop: false });

   
       

       ///End Raga///*/

     
    })

}


const getBookingTypeofAbooking = (startDate, endDate, prelaunchStartDate, preLaunchEndDate, summerStartDate, summerEndDate, winterStartDate, winterEndDate) => {
   
    let bookingType

    let allBookedDays = getDaysBetweenDates(startDate, endDate);
    let allBookedDaysSeason = getDaysBetweenDatesWithoutYear(startDate, endDate);
    let allDaysBetweenPrelaunchStartAndEnd = getDaysBetweenDates(prelaunchStartDate, preLaunchEndDate);
    let allDaysBetweenSummerStartAndEnd = getDaysBetweenDatesWithoutYear(summerStartDate, summerEndDate);
    let allDaysBetweenWinterStartAndEnd = getDaysBetweenDatesWithoutYear(winterStartDate, winterEndDate);

    //check if this booking is between launch and prelaunch

    if (allBookedDays.filter((bookedDay) => allDaysBetweenPrelaunchStartAndEnd.includes(bookedDay)).length) {
        bookingType = "prelaunch and launch booking"
    } else if (
        allBookedDaysSeason.filter((bookedDay) => allDaysBetweenSummerStartAndEnd.includes(bookedDay)).length) {
        bookingType = "Summer booking"
    } else if (allBookedDaysSeason.filter((bookedDay) => allDaysBetweenWinterStartAndEnd.includes(bookedDay)).length) {
        bookingType = "Winter booking"
    }

    return bookingType;


}


const AddCleans = async (Boat_id, Owner_id, Noofcleans, User_role) => {


    let CleanDays = await No_OfCleans.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).catch((error) => console.log(error));
    // No_OfCleans.findOne({Boat_Id:Boat_id,Owner_Id:Owner_id}).then(result=>
    // {


    if (!CleanDays) {


        let AddCleaningDays = new No_OfCleans({

            Boat_Id: Boat_id,
            Owner_Id: Owner_id,
            Cleans: Noofcleans,
            User_RoleType: User_role,
            IsActive: true,
            Current_Time: moment(Date.now()),
            Updated_time: moment(Date.now())

        });

        AddCleaningDays.save()
            .then(response => {
                return true;
            })
            .catch(error => {
                console.log(error)
                return false;
            })

    }

    else {
        console.log('updation3')
        No_OfCleans.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id }).then(result => {
            console.log(result)
            var Clean_day = result.Cleans;



            No_OfCleans.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id },
                {

                    Boat_Id: Boat_id,
                    Owner_Id: Owner_id,
                    Cleans: Noofcleans + Clean_day,
                    User_RoleType: User_role,
                    IsActive: true,
                    Current_Time: moment(Date.now()),
                    Updated_time: moment(Date.now())
                },

                function (err, data) {
                    if (err) {

                        return false

                    }
                    else {

                        return true

                    }

                });
        })
    }
}
const TotalCancellations = async (Boat_id, Owner_id, Noofcancellation, Cancellationyear) => {


    let No_Cancellation = await TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).catch((error) => console.log(error));


    if (!No_Cancellation) {


        let AddCancellation = new TotalNoCancellations({

            Boat_Id: Boat_id,
            Owner_Id: Owner_id,
            No_Cancellation: Noofcancellation,
            Cancellationyear: Cancellationyear,
            IsActive: true,

            Current_Time: moment(Date.now()),
            Updated_time: moment(Date.now())

        });

        AddCancellation.save()
            .then(response => {
                return true;
            })
            .catch(error => {
                console.log(error)
                return false;
            })

    }

    else {
        console.log('updation2')
        TotalNoCancellations.findOne({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear }).then(result => {
            console.log(result)
            var No_Cancellation = result.No_Cancellation;


            TotalNoCancellations.findOneAndUpdate({ Boat_Id: Boat_id, Owner_Id: Owner_id, Cancellationyear: Cancellationyear },
                {

                    Boat_Id: Boat_id,
                    Owner_Id: Owner_id,
                    No_Cancellation: Noofcancellation + No_Cancellation,
                    Cancellationyear: Cancellationyear,
                    IsActive: true,

                    Current_Time: moment(Date.now()),
                    Updated_time: moment(Date.now())
                },

                function (err, data) {
                    if (err) {

                        return false

                    }
                    else {

                        return true

                    }

                });
        })
    }
}


const GetAllMaintenanceSchedule = (req, res) => {

    return new Promise(async (resolve, reject) => {

        let maintenanceData = await Schedule.aggregate([
            {
                $lookup: {
                    from: "tb_boatmasters",
                    localField: "Boat_Id",
                    foreignField: "_id",
                    as: "BoatDetails",
                },
            },

            { $match: { IsActive: true, User_RoleType: "Maintenance" } },

            {
                $project: {
                    start: 1, end: 1, commends: 1, location: 1, Boat_Name: 1, "BoatDetails.Location_Name": 1,
                }
            }

        ]).catch((error) => {
            console.log(error);
            return reject({ status: true, message: "Something went wrong try again." })
        })

        return resolve({ status: true, response: maintenanceData });

    }).then((response) => {
        return res.json(response)
    }).catch((error) => {
        return res.json(error)
    })

}



const GetAllCleaningScheduleReport = (req, res) => {

    return new Promise(async (resolve, reject) => {

        let cleaningData = await Boats.aggregate([
            { $match: { IsActive: true } },

            {
                $lookup: {
                    from: "tb_schedules",
                    localField: "_id",
                    foreignField: "Boat_Id",
                    as: "schedules"
                }
            },

            { "$unwind": { "path": "$schedules", "preserveNullAndEmptyArrays": true } },

            {
                $lookup: {
                    from: "tb_addowners",
                    localField: "schedules.User_Id",
                    foreignField: "_id",
                    as: "schedules.owner"
                }
            },

            {
                $project: {
                    "Boat_Name": 1,
                    "Location_Name": 1,

                    schedules: {
                        start: 1,
                        end: 1,
                        commends: 1,
                        _id: 1,
                        User_Id: 1,
                        User_RoleType: 1,

                    },
                    "schedules.owner.First_Name": 1,
                    "schedules.owner.Last_Name": 1,
                    "schedules.owner.Housekeeping": 1,


                }
            }

        ]).catch((error) => {
            console.log(error);
            return reject({ status: true, message: "Something went wrong try again." })
        })



        function removeDuplicates(originalArray, prop) {
            var newArray = [];
            var lookupObject = {};

            for (var i in originalArray) {
                lookupObject[originalArray[i][prop]] = originalArray[i];
            }

            for (i in lookupObject) {
                newArray.push(lookupObject[i]);
            }
            return newArray;
        }


        let uniqueArrays = removeDuplicates(cleaningData, "_id");

        let sameBoatBookings = [];

        for (const uniqueArray of uniqueArrays) {

            let boatId = uniqueArray._id.toString()

            let sameBoatFound = cleaningData.filter(obj => {
                return obj._id == boatId
            })



            let schedules = [];

            sameBoatFound.map((boat, i) => {

                schedules.push(boat.schedules)

                if (i + 1 === sameBoatFound.length) {
                    sameBoatBookings.push({
                        _id: boat._id,
                        Location_Name: boat.Location_Name,
                        Boat_Name: boat.Boat_Name,
                        schedules
                    })
                }


            })



        }

        //sort date by end date

        let sortedCleaningData = []

        let i = 0;



        for (const boat of sameBoatBookings) {

            boat.schedules.sort(function (a, b) {
                return new Date(b.end) - new Date(a.end);
            }).reverse()





            const dividingArrayLength = 2;
            let scheduleCopy = [...boat.schedules];

            const dividedSchedules = new Array(Math.ceil(scheduleCopy.length / dividingArrayLength)).fill().map((_) => scheduleCopy.splice(0, dividingArrayLength));


            for (const dividedSchedule of dividedSchedules) {



                let scheduleOneOwner = dividedSchedule[0].owner.length ? dividedSchedule[0].owner[0] : false;
                let scheduleTwoOwner;
                if (dividedSchedule.length > 1) {
                    scheduleTwoOwner = dividedSchedule[1].owner.length ? dividedSchedule[1].owner[0] : false;
                }



                let data = {
                    _id: boat._id,
                    Boat_Name: boat.Boat_Name,
                    Location_Name: boat.Location_Name,
                    ReturningOwner: `${scheduleOneOwner ? `${scheduleOneOwner.First_Name} ${scheduleOneOwner.Last_Name}` : 'Not available'} `,
                    HouseKeepingLevel: `${scheduleOneOwner ? `${scheduleOneOwner.Housekeeping}` : 'Not available'}`,
                    ReturningDate: `${scheduleOneOwner ? `${dividedSchedule[0].end}` : 'Not available'}`,
                    DepartingOwner: `${scheduleTwoOwner ? `${scheduleTwoOwner.First_Name} ${scheduleTwoOwner.Last_Name}` : 'Not available.'}`,
                    DepartureaDate: `${scheduleTwoOwner ? `${dividedSchedule[1].start}` : 'Not available.'}`,
                    BookingNote: `${scheduleTwoOwner ? `${dividedSchedule[1].commends}` : 'Not available.'}`

                }






                sortedCleaningData.push(data)

            }

        }




        return resolve({ status: true, response: sortedCleaningData });




    }).then((response) => {
        return res.json(response)
    }).catch((error) => {
        return res.json(error)
    })

}


const getWeekDayAndWeekEndsOfCancellationByAllowedCancellationOfAnOwner = (cancellationStartDate, canceallionEndDate, NumberOfAllowedCancealltion) => {


    //get days and weeks 
    let obj = Object();
    obj.start = new Date(cancellationStartDate);
    obj.end = new Date(canceallionEndDate);


    let datas = getDaysInMonth_Sheduler(obj);
    let arr = [];

    datas.forEach(function (item) {
        Object.keys(item).forEach(function (key) {
            arr.push(item[key]);
            console.log(item[key]);
        });
    });



    let reAssignedWeekendCount = 0;
    let reAssignedWeekDaysCount = 0;
    let allowedOwnerCancellationCount = NumberOfAllowedCancealltion;
    let i = arr.length - 1;


    while (allowedOwnerCancellationCount > 0) {

        let day = arr[i];

        if (day == 'Mo' || day == 'Tu' || day == 'We' || day == 'Th' || day == 'Fr') {

            reAssignedWeekDaysCount++;
        } else {
            reAssignedWeekendCount++;
        }

        allowedOwnerCancellationCount--;
        i--;
    }


    return { reAssignedWeekDaysCount, reAssignedWeekendCount }

}



let getAllCanceledDates = (originalStartDate, originalEndDate, editStartDate, editEndDate) => {

    let getDaysBetweenDates = (startDate, endDate) => {
        let now = moment(startDate).clone(), dates = [];

        while (now.isSameOrBefore(moment(endDate))) {
            dates.push(now.format('DD/MM/YYYY'));
            now.add(1, 'days');
        }
        return dates;
    };


    



    let allOriginallyBookedDays = getDaysBetweenDates(originalStartDate, originalEndDate);
    let allBookedDaysByEditing = getDaysBetweenDates(editStartDate, editEndDate)

    let allCanceledDates = allOriginallyBookedDays.filter((originallyBookedDay) => !allBookedDaysByEditing.includes(originallyBookedDay))

    return allCanceledDates;




}



let functionLOADates = (originalStartDate, originalEndDate, editStartDate, editEndDate) => {

    let getDaysBetweenDates = (startDate, endDate) => {
        let now = moment(startDate).clone(), dates = [];

        while (now.isSameOrBefore(moment(endDate))) {
            dates.push(now.format('YYYY-MM-DD'));
            now.add(1, 'days');
        }
        return dates;
    };


    



    let allOriginallyBookedDays = getDaysBetweenDates(originalStartDate, originalEndDate);
    let allBookedDaysByEditing = getDaysBetweenDates(editStartDate, editEndDate)

    let allCanceledDates = allOriginallyBookedDays.filter((originallyBookedDay) => !allBookedDaysByEditing.includes(originallyBookedDay))

    return allCanceledDates;




}

// to check if next booking days last day is included in this in incoming booking 

const checkIfNextBookingDayIsIncluded = (incomingStartDate, incomingEndDate, boatId, timeZone, summer = true, ownerId, isEdit = false) => {

    return new Promise(async (resolve, reject) => {

      
        console.log("called checkIfNextBookingDayIsIncluded"+incomingStartDate);
             
      /* Raga  chnages timezone 26-11-21*/
        /*let incoming_StartDate =  new Date(incomingStartDate).toLocaleString("en-US", { timeZone:process.env.TIME_ZONE });
         incomingStartDate = new Date(incoming_StartDate);
        let incoming_EndDate =  new Date(incomingEndDate).toLocaleString("en-US", { timeZone:process.env.TIME_ZONE});
         incomingEndDate = new Date(incoming_EndDate);
        console.log(incomingStartDate,"convertincoming");*/

        let incoming_StartDate  = momentTimezone(incomingStartDate).tz(process.env.TIME_ZONE).format();
        incomingStartDate = moment(incoming_StartDate);
        let incoming_EndDate  = momentTimezone(incomingEndDate).tz(process.env.TIME_ZONE).format();
        incomingEndDate = moment(incoming_EndDate);
        console.log(incomingStartDate,"convertincoming");
       
        console.log("clientCurrentBeforeExecution")

        if (!timeZone) timeZone = process.env.TIME_ZONE;

        let UsercurrentTime = new Date();

        let client_CurrentTime  = momentTimezone(UsercurrentTime).tz(process.env.TIME_ZONE).format();
        let clientCurrentTime = moment(client_CurrentTime);

        //let clientCurrentTime = new Date();

        /*let client_CurrentTime = new Date().toLocaleString("en-US", { timeZone:process.env.TIME_ZONE });
        let clientCurrentTime = new Date(client_CurrentTime);*/

        
        console.log(clientCurrentTime, "clientCurrentTime")

        let boat = await Boats.findById(boatId).catch((error) => {
            console.log(error);
            return reject({ status: true, message: "Something went wrong. Try again" });
        });

        if (!boat) return reject({ status: false, message: "inavlid boat id." })

        let tzOffsetOfTimeZone = tzOffset.offsetOf(process.env.TIME_ZONE);


        //get next booking day from db

        let nextBookingDay = await nextBookinDayModel.findOne({ Boat_Id: boatId, IsActive: true }).catch((error) => {
            console.log(error);
            return reject({ status: true, message: "Something went wrong. Try again" });
        })

        if (!nextBookingDay) return reject({ status: true, message: 'Set next booking day before you make a booking.' });

        let nextBookingDayDate;
        let boatLaunchDate = new Date(boat.Launch_Date);
        let nextBookingDaysCount = nextBookingDay.Next_BookingDay;

        console.log(nextBookingDaysCount, "nextBookingDaysCount")

        if (boatLaunchDate.getTime() > new Date().getTime()) {
            console.log("inside before launch next booking day")
            nextBookingDay = boatLaunchDate.setDate(boatLaunchDate.getDate() + nextBookingDaysCount);
            console.log(nextBookingDay, "nextBookingDay")
        } else {
            console.log("inside after launch next booking day")
            let day_Now = new Date().toLocaleString("en-US", { timeZone:process.env.TIME_ZONE });
            let dayNow = new Date(day_Now);
            nextBookingDay = new Date(dayNow.setDate(dayNow.getDate() + nextBookingDaysCount))
            console.log(nextBookingDay, "nextBookingDay")
        }

         console.log(nextBookingDay, new Date(nextBookingDay), "next booking day date")

        var NextDayAus = momentTimezone(nextBookingDay).tz(process.env.TIME_ZONE).format();
        var NextDay_Day = moment(NextDayAus);
       
        //check incoming owner has a booking on the incoming days to avoid duplicate booking
        if (!isEdit) {


            let allDaysBetweenStartAndEnd = getDaysBetweenDates(incomingStartDate, incomingEndDate)

            let queryToCheckDuplicateBooking = []

            allDaysBetweenStartAndEnd.map((date) => queryToCheckDuplicateBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }))

            console.log(queryToCheckDuplicateBooking[0].$and, "queryToCheckDuplicateBooking")

            let isPendingNextBookingExist = await Schedule.findOne({ Boat_Id: boatId, User_Id: ownerId, isBookingPending: true, isBookingCancelled: false, IsActive: true, $or: queryToCheckDuplicateBooking }).catch((error) => {
                console.log(error);
                return reject({ status: true, message: "Something went wrong. Try again." });
            })

            if (isPendingNextBookingExist) return reject({ status: true, message: 'You are trying to make a duplicate booking.' })

        }

        //check incoming owner has a booking on the incoming days to avoid duplicate booking end

        let isNextDayBookingIncluded = false

        if (new Date(incomingStartDate).setUTCHours(00, 00, 00, 00) <= new Date(nextBookingDay).setUTCHours(00, 00, 00, 00) && new Date(incomingEndDate).setUTCHours(00, 00, 00, 00) >= new Date(nextBookingDay).setUTCHours(00, 00, 00, 00)) {

            isNextDayBookingIncluded = true

        }

        //check if a pending booking
        incomingStartDate.startOf('day');
        NextDay_Day.startOf('day');
       
      
        var requestDate =moment(incomingStartDate).toObject();
        
        var SeventyFirstDay = moment(NextDay_Day).toObject();
        


        if ((requestDate.years === SeventyFirstDay.years)&&(requestDate.months === SeventyFirstDay.months)&&(requestDate.date === SeventyFirstDay.date)) {

           console.log("ENTEEE");

            //check if booking is before 11:55


            console.log(tzOffsetOfTimeZone, "TZ")

            let craetedTime = isNegative(tzOffsetOfTimeZone) ? new Date(clientCurrentTime).setUTCHours(23, 55, 00, 00) - Math.abs(tzOffsetOfTimeZone * 60000) : new Date(clientCurrentTime).setUTCHours(23, 55, 00, 00) + Math.abs(tzOffsetOfTimeZone * 60000)
           
           /* if (clientCurrentTime.getTime() >= craetedTime) {
                return reject({ status: true, message: "You can't make a booking after 11:50 PM " })
            }*/

           

            if(clientCurrentTime.getHours== 22 && clientCurrentTime.getMinutes>=50){

                return reject({ status: true, message: "You can't make a booking after 11:50 PM " });
            }

            console.log({ status: true, included: true, isNextDayBookingIncluded, message: "Next booking day is included in this booking." })
            resolve({ status: true, included: true, isNextDayBookingIncluded, message: "Next booking day is included in this booking." })

            //

            //send pending mail

            let owner = await NewOwners.findOne({ _id: ownerId, IsActive: true }, { Email: 1, First_Name: 1 }).catch((error) => console.log(error))
            let boatDetails = await Boats.findOne({ _id: boatId, IsActive: true }, { Boat_Name: 1 }).catch((error) => console.log(error))

            const emailState = 'Pending Booking.';
            const emailContent = `Dear ${owner.First_Name} Your booking bid on, ${boatDetails.Boat_Name} has been recieved.
            You will be notifed tomorrow with the outcome of the automatic decision.
            
            Please login the the system to see this booking bid: (link to the system booking)
            ${process.env.CLIENT_URL}/boat-bookings`;
            const emailDetailName = 'Booking Details'
            const emailDetails = [
                { key: 'Boat Name', value: boatDetails.Boat_Name },
                { key: 'Booking Date', value: getCurrentTimeFormatted() },
            ];
            const emailNameAndLink = {
                name: 'Booking Link',
                link: `${process.env.CLIENT_URL}/boat-bookings`
            }

            let ownerPendingMailOptions = {
                from: "noreply.smartboatbooking@gmail.com",
                to: owner.Email,
                subject: 'Pending Booking',
                html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)
            };

            transporter.sendMail(ownerPendingMailOptions, (error) => {
                if (error) {
                    console.log(error);
                } else {
                    console.log("ownerPendingMail send successfully")
                }
            });


            //admin mail 

            let emailContentPendingBookingAdmin = `Dear Administrator,

             An booking bid on ${boatDetails.Boat_Name} for ${owner.First_Name}  has been made for ${getCurrentTimeFormatted()}. It is awaiting confirmation until this evening. 
             
             Please login the the system to see this booking bid: (link to the system booking)
             ${process.env.CLIENT_URL}/boat-bookings.`


            let adminPendingMailOptions = {
                from: "noreply.smartboatbooking@gmail.com",
                to: "admin@smartboating.com.au",
                subject: 'Pending Booking',
                html: getEmailTemplate(emailState, emailContentPendingBookingAdmin, emailDetailName, emailDetails, emailNameAndLink)
            };

            transporter.sendMail(adminPendingMailOptions, (error) => {
                if (error) {
                    console.log(error);
                } else {
                    console.log("ownerPendingMail send successfully")
                }
            });


            //send pending mail end


            const executeDate = new Date(new Date(clientCurrentTime).setUTCHours(07, 10, 00, 00));
            console.log(executeDate);

            console.log(new Date(), "Time Now")
            
            let cronExecutionTime = executeDate;

            //let cronExecutionTime = isNegative(tzOffsetOfTimeZone) ? new Date(executeDate - Math.abs(tzOffsetOfTimeZone * 60000)) : new Date(executeDate + Math.abs(tzOffsetOfTimeZone * 60000))

            console.log(cronExecutionTime, "cron execution time")

            //check if already a cron is scheduled or not if scheduled do not schedule anothe one , if not add new cron schedule to DB


            const isCronExist = await cronModel.findOne({ boatId, cronExecutionTime }).catch((error) => {
                console.log(error)
            })

            if (isCronExist) {
                console.log('cron already exist')
                return resolve({ status: true })
            }


            console.log('cron do not exist')

            await new cronModel({ boatId, cronExecutionTime }).save().catch((error) => {
                console.log(error)
            })

            //cron 
           console.log(clientCurrentTime,"crnt");
           var myNewt = moment(clientCurrentTime).toISOString( );
           console.log(myNewt);
           var NewCroneTime =  new Date(new Date(myNewt).setUTCHours(12, 50, 00, 00));
           /*var OtherTiezoneTime  = moment(clientCurrentTime);
           var dateInUTC=moment().utc(OtherTiezoneTime);
           if(timeZone == "Asia/Kolkata"){

               var newCroneTime = new Date(new Date(dateInUTC).setUTCHours(12, 20, 00, 00));

           }else{

               //var newCroneTime = new Date(new Date(dateInUTC).setUTCHours(3, 43, 00, 00));
               var NewCroneTime =  new Date(new Date(myNewt).setUTCHours(17, 30, 00, 00));

           }*/
         
           console.log("NewCroneTime::"+NewCroneTime);

            schedule.scheduleJob(NewCroneTime, async () => {

                //check if already a booking is accepted if it is accepted cancel all pendiing booking

                console.log("inside next boking cron")

                console.log({ Boat_Id: boatId, IsActive: true, isBookingPending: false, isBookingCancelled: false, start: { $lte: new Date(nextBookingDay) }, end: { $gte: new Date(nextBookingDay) } })

                let acceptedBooking = await Schedule.findOne({ Boat_Id: boatId, IsActive: true, isBookingPending: false, isBookingCancelled: false, start: { $lte: new Date(nextBookingDay) }, end: { $gte: new Date(nextBookingDay) } }).catch((error) => {
                    console.log(error);
                    return reject({ status: true, message: "Something went wrong. Try again." });
                })



                if (acceptedBooking) {

                    console.log("accepted booking is found");

                    // before cancelling give back all pending days of that owner based on his booking

                    const allNextDayPendingBooking = await Schedule.find({ Boat_Id: boatId, isBookingPending: true, isBookingCancelled: false, IsActive: true }).catch((error) => {
                        console.log(error);
                        return reject({ status: true, message: "Something went wrong. Try again." });
                    })


                    //give back all pending days
                    if (allNextDayPendingBooking && allNextDayPendingBooking.length) {
                        allNextDayPendingBooking.map((nextDayPendingBooking) => {


                            let allDatesBetweenBookingStartAndEndDate = getDaysBetweenDates(nextDayPendingBooking.start, nextDayPendingBooking.end);

                            let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(allDatesBetweenBookingStartAndEndDate) || {}

                            //find and update this owner owner booking days 

                            if (summer) {
                                OwnerBooking_Days.findOneAndUpdate({ Owner_Id: nextDayPendingBooking.User_Id, Boat_Id: nextDayPendingBooking.Boat_Id, IsActive: true }, {
                                    $inc: { Summer_WeekDays: -numberOfWeekDays, Summer_WeekEndDays: -numberOfWeekEnds }
                                }).catch((error) => {
                                    console.log(error)
                                })
                            } else {
                                OwnerBooking_Days.findOneAndUpdate({ Owner_Id: nextDayPendingBooking.User_Id, Boat_Id: nextDayPendingBooking.Boat_Id, IsActive: true }, {
                                    $inc: { Winter_WeekDays: -numberOfWeekDays, Winter_WeekEndDays: -numberOfWeekEnds }
                                }).catch((error) => {
                                    console.log(error)
                                })
                            }



                        })
                    }



                    //update all canceled booking

                    await Schedule.updateMany({ Boat_Id: boatId, isBookingPending: true, isBookingCancelled: false }, {
                        isBookingCancelled: true,
                        isBookingPending: false
                    }, { new: true }).catch((error) => {
                        console.log(error);
                        return reject({ status: true, message: "Something went wrong. Try again." });
                    })



                    return resolve({ status: true })
                }

                //


                let allBookingNextDayBookings = await Schedule.find({ Boat_Id: boatId, isBookingPending: true, isBookingCancelled: false, IsActive: true }).catch((error) => {
                    console.log(error);
                    return reject({ status: true, message: "Something went wrong. Try again." });
                })

                console.log(allBookingNextDayBookings.length, "ok");

                let ownerSeasonQuery = allBookingNextDayBookings.map((allBookingNextDayBooking) => allBookingNextDayBooking.User_Id)

                console.log(ownerSeasonQuery, "ownerSeasonQuery")

                let ownersPendingDays = await manageBoat.find({ Boat_Id: boatId, IsActive: true, Owner_Id: { $in: ownerSeasonQuery } }).catch((error) => {
                    console.log(error)
                })

                let ownerUsedDays = await OwnerBooking_Days.find({ Boat_Id: boatId, IsActive: true, Owner_Id: { $in: ownerSeasonQuery } }).catch((error) => {
                    console.log(error)
                })



                ownersPendingDays.map((pendingDay) => {

                    ownerUsedDays.map((usedDay) => {

                        if (pendingDay.Owner_Id.toString() == usedDay.Owner_Id.toString()) {


                            pendingDay.Summer_WeekDays -= usedDay.Summer_WeekDays
                            pendingDay.Summer_WeekEndDays -= usedDay.Summer_WeekEndDays
                            pendingDay.Winter_WeekDays -= usedDay.Winter_WeekDays
                            pendingDay.Winter_WeekEndDays -= usedDay.Winter_WeekEndDays

                        }

                    })
                })



                let allOwnersTotalPendingDays = []

                if (summer) {
                    ownersPendingDays.map((owner) => allOwnersTotalPendingDays.push({ ownerId: owner.Owner_Id, toatalPendingDaysAvailable: owner.Summer_WeekDays + owner.Summer_WeekEndDays }))
                } else {
                    ownersPendingDays.map((owner) => allOwnersTotalPendingDays.push({ ownerId: owner.Owner_Id, toatalPendingDaysAvailable: owner.Winter_WeekDays + owner.Winter_WeekEndDays }))
                }
                console.log(allOwnersTotalPendingDays, "allOwnersTotalPendingDays")

                let ownerWhoHaveMoreDays = allOwnersTotalPendingDays.reduce((a, e) => {
                    a[e.toatalPendingDaysAvailable] = ++a[e.toatalPendingDaysAvailable] || 0;
                    return a;
                }, {});

                ownerWhoHaveMoreDays = allOwnersTotalPendingDays.filter(owner => ownerWhoHaveMoreDays[owner.toatalPendingDaysAvailable])

                if (ownerWhoHaveMoreDays.length) {
                    ownerWhoHaveMoreDays = ownerWhoHaveMoreDays[Math.floor(Math.random() * ownerWhoHaveMoreDays.length)]
                } else {
                    ownerWhoHaveMoreDays = allOwnersTotalPendingDays.reduce((prev, current) => (prev.toatalPendingDaysAvailable > current.toatalPendingDaysAvailable) ? prev : current)
                }


                console.log(ownerWhoHaveMoreDays, "Accepted owner")






                let allocateBooking = await Schedule.findOneAndUpdate({ Boat_Id: boatId, isBookingPending: true, User_Id: ownerWhoHaveMoreDays.ownerId, IsActive: true }, {
                    isBookingPending: false,
                    isBookingAccepted: true
                }).catch((error) => {
                    console.log(error)
                    return reject({ status: true, message: "Something went wrong. Try again." });
                })


                //send approved mail 

                if (ownerWhoHaveMoreDays) {

                    //owner mail

                    let owner = await NewOwners.findOne({ _id: ownerWhoHaveMoreDays.ownerId, IsActive: true }, { Email: 1, First_Name: 1 }).catch((error) => console.log(error))

                    const emailState = 'Booking Approved.';
                    const emailContent = `Dear ${owner.First_Name},

            Your booking bid on, ${boatDetails.Boat_Name} has been approved. The booking is confirmed for ${getCurrentTimeFormatted()}.
            
            Please login the the system to see this booking: (link to the system booking)
            ${process.env.CLIENT_URL}/boat-bookings`;
                    const emailDetailName = 'Booking Details'
                    const emailDetails = [
                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                        { key: 'Booking Date', value: getCurrentTimeFormatted() },
                    ];
                    const emailNameAndLink = {
                        name: 'Booking Link',
                        link: `${process.env.CLIENT_URL}/boat-bookings`
                    }


                    let ownerApprovedMailOptions = {
                        from: "noreply.smartboatbooking@gmail.com",
                        to: owner.Email,
                        subject: 'Booking Approved',
                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)
                    };

                    transporter.sendMail(ownerApprovedMailOptions, (error) => {
                        if (error) {
                            console.log(error);
                        } else {
                            console.log("ownerApprovedMail send successfully")
                        }
                    });


                    //admin approved mail 



                    let emailContentApprovedBookingAdmin = `Dear Administrator,

             An booking bid on ${boatDetails.Boat_Name} for ${owner.First_Name} has been approved for ${getCurrentTimeFormatted()}. 
             
             Please login the the system to see this booking: (link to the system booking)
             ${process.env.CLIENT_URL}/boat-bookings`;


                    let adminApprovedMailOptions = {
                        from: "noreply.smartboatbooking@gmail.com",
                        to: "admin@smartboating.com.au",
                        subject: 'Booking Approved',
                        html: getEmailTemplate(emailState, emailContentApprovedBookingAdmin, emailDetailName, emailDetails, emailNameAndLink)
                    };

                    transporter.sendMail(adminApprovedMailOptions, (error) => {
                        if (error) {
                            console.log(error);
                        } else {
                            console.log("adminApprovedMail send successfully")
                        }
                    });


                }


                let cenceledOwners = allOwnersTotalPendingDays.filter((owner) => owner.ownerId !== ownerWhoHaveMoreDays.ownerId);
                let canceledOwnerQuery = cenceledOwners.map((owner) => owner.ownerId)

                //give back all days to canceled owner

                let canceledOwnerBookings = await Schedule.find({ Boat_Id: boatId, isBookingPending: true, User_Id: { $in: canceledOwnerQuery }, IsActive: true }).catch((error) => {
                    console.log(error)
                })


                if (canceledOwnerBookings && canceledOwnerBookings.length) {
                    canceledOwnerBookings.map((nextDayPendingBooking) => {

                        //give back all pending days

                        let allDatesBetweenBookingStartAndEndDate = getDaysBetweenDates(nextDayPendingBooking.start, nextDayPendingBooking.end);

                        let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(allDatesBetweenBookingStartAndEndDate) || {}

                        //find and update this owner owner booking days 

                        if (summer) {
                            OwnerBooking_Days.findOneAndUpdate({ Owner_Id: nextDayPendingBooking.User_Id, Boat_Id: nextDayPendingBooking.Boat_Id, IsActive: true }, {
                                $inc: { Summer_WeekDays: -numberOfWeekDays, Summer_WeekEndDays: -numberOfWeekEnds }
                            }).catch((error) => {
                                console.log(error)
                            })
                        } else {
                            OwnerBooking_Days.findOneAndUpdate({ Owner_Id: nextDayPendingBooking.User_Id, Boat_Id: nextDayPendingBooking.Boat_Id, IsActive: true }, {
                                $inc: { Winter_WeekDays: -numberOfWeekDays, Winter_WeekEndDays: -numberOfWeekEnds }
                            }).catch((error) => {
                                console.log(error)
                            })
                        }



                    })
                }


                //   give back all days  to canceled owner


                //get all cancaled owners and mail them booking is disapproved

                let allCanceledOwners = await NewOwners.find({ _id: { $in: canceledOwnerQuery }, IsActive: true }, { Email: 1, First_Name: 1 }).catch((error) => console.log(error))


                allCanceledOwners.map((owner) => {

                    //owner disapproved emai

                    const emailState = 'Booking Disapproved.';
                    const emailContent = `Dear ${owner.First_Name},

               Your booking bid on, ${boatDetails.Boat_Name} has been not gone ahead at this time`;
                    const emailDetailName = 'Booking Details'
                    const emailDetails = [
                        { key: 'Boat Name', value: boatDetails.Boat_Name },
                        { key: 'Booking Date', value: getCurrentTimeFormatted() },
                    ];
                    const emailNameAndLink = {
                        name: 'Booking Link',
                        link: `${process.env.CLIENT_URL}/boat-bookings`
                    }


                    let ownerDisapprovedMailOptions = {
                        from: "noreply.smartboatbooking@gmail.com",
                        to: owner.Email,
                        subject: 'Booking Disapproved',
                        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)
                    };

                    transporter.sendMail(ownerDisapprovedMailOptions, (error) => {
                        if (error) {
                            console.log(error);
                        } else {
                            console.log("ownerApprovedMail send successfully")
                        }
                    });


                    //owner disapproved admin email



                    let emailContentDisapprovedBookingAdmin = `Dear Administrator,

                 An booking bid on ${boatDetails.Boat_Name} for ${owner.First_Name} has been disapproved for ${getCurrentTimeFormatted}. 
                 
                 Please login the the system to see this booking: (link to the system booking)
                ${process.env.CLIENT_URL}/boat-bookings`;

                    let adminDispprovedMailOptions = {
                        from: "noreply.smartboatbooking@gmail.com",
                        to: "admin@smartboating.com.au",
                        subject: 'Booking Disapproved',
                        html: getEmailTemplate(emailState, emailContentDisapprovedBookingAdmin, emailDetailName, emailDetails, emailNameAndLink)
                    };

                    transporter.sendMail(adminDispprovedMailOptions, (error) => {
                        if (error) {
                            console.log(error);
                        } else {
                            console.log("admindDisapprovedMail send successfully")
                        }
                    });


                })

                //


                console.log(cenceledOwners, "Canceled owners")

                console.log(canceledOwnerQuery, "canceledOwnerQuery")

                let cancelOtherBookings = await Schedule.updateMany({ Boat_Id: boatId, isBookingPending: true, User_Id: { $in: canceledOwnerQuery } }, {
                    isBookingPending: false,
                    isBookingCancelled: true,
                    IsActive: false
                })

            })

            //cron end

        } else {
            console.log({ status: true, included: false, isNextDayBookingIncluded, message: "Next booking day is not included in this booking." })
            return resolve({ status: true, included: false, isNextDayBookingIncluded, message: "Next booking day is not included in this booking." })
        }

    })

}


const isNegative = (num) => {

    if (num < 0) {
        return true
    } else {
        return false
    }
}

// DoApproveCancellation

const Do_approveCancel = (scheduleid, Loa, PartialStatus, TotalLoa_Edit, WeekDay_Count, WeekEnd_Count, Newstartdate, Newenddate,MonthBookingStatus,anni_month,exp_year,type)=>{


Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(response => {

            var Boat_id = response.Boat_Id;
            var Owner_id = response.User_Id;
            var start_Date = response.start;
            var end_Date = response.end;
            var Total_Count = WeekDay_Count+WeekEnd_Count;
            Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                var SummerWeekdays = response.Summer_WeekDays;
                var SummerWeekendDays = response.Summer_WeekEndDays;
                var WinterWeekDays = response.Winter_WeekDays;
                var WinterweekendDays = response.Winter_WeekEndDays;         
            if(type == "summer"){

                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                {

                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                },
                { new: true },
                function (err, data) {
                    console.log('Summer sucesss');
                });

                
                if(MonthBookingStatus ==1)
               
                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
               else


              var x = AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,type);
           

            }else if(type == "winter") {
                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                {

                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                },
                { new: true },
                function (err, data) {
                    console.log('Winter sucesss');
                });
              
                
                if(MonthBookingStatus ==1)
               
                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, Newstartdate, Newenddate,anni_month);
               else{

               
                var x =  AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,type);

               }


            
           
            }
        });

            let getcaceldates_only = getAllCanceledDates(response.start, response.end, Newstartdate, Newenddate);

            Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
            {

                Updated_time: moment(Date.now()),
                BookingStatus: "PartiallyAccepted",
                PartialCancellation_Status: 0,
                Approved_LOA: Total_Count,

            },

            function (err, data) {
                if (err) {
                    return
                }
                else {
                    let ownerPartial = new OwnerPartialCancelation();
                    ownerPartial.Scheduleid = scheduleid;
                    ownerPartial.Owner_Id = response.User_Id;
                    ownerPartial.Boat_Id = Boat_id;
                    ownerPartial.Boat_Name = response.Boat_Name;
                    ownerPartial.cancaledDays = getcaceldates_only;
                    ownerPartial.Approved_LOA = Total_Count;
                    ownerPartial.WeekDay_Count = response.WeekDay_Count;
                    ownerPartial.WeekEnd_Count = response.WeekEnd_Count;
                    ownerPartial.WeekDay_Count_Edit = response.WeekDay_Count_Edit;
                    ownerPartial.WeekEnd_Count_Edit = response.WeekEnd_Count_Edit;
                    ownerPartial.Booking_ID = response.Booking_ID;
                    ownerPartial.BookingStatus = "PartiallyAccepted";
                    ownerPartial.PartialCancellation_Status = 0;
                    ownerPartial.Total_Edit_Loa = response.Total_Edit_Loa;
                    ownerPartial.save(function (err, saved) {

                        if (err) return;

                    });


                }
            });



        });

        return true;

    

}

const DoApproveCancellation = (scheduleid, Loa, PartialStatus, TotalLoa_Edit, WeekDay_Count_Edit, WeekEnd_Count_Edit, Newstartdate, Newenddate,MonthBookingStatus,exp_year,anni_month) => {



    Schedule.findById({ _id: mongoose.Types.ObjectId(scheduleid) }).then(response => {


        var Boat_id = response.Boat_Id;
        var Owner_id = response.User_Id;
        var start_Date = response.start;
        var Start_final = moment(start_Date);
        console.log(start_Date)
        console.log(Start_final)
        var Start_final_withoutTime = Start_final.startOf('day');
        var end_Date = response.end;
        var End_final = moment(end_Date);
        var End_final_withoutTime = End_final.startOf('day');
        console.log(Start_final_withoutTime)
        console.log(End_final_withoutTime)
        var RoleAssigned = response.User_RoleType;
        var Cancel_date = moment();
        console.log(Cancel_date)
        var dif = moment.duration(Start_final.diff(Cancel_date));
        console.log(dif.asHours());
        var Hrdif = Math.round(dif.asHours());
        var Totalday_prev = response.Total_DaysBooked_Reassign;
        var Weekdays_prev = response.WeekDay_Count_Reassign;
        var WeekEndDays_prev = response.WeekEnd_Count_Reassign;
       
        if (PartialStatus == 1) {
            var WeekDay_Count = WeekDay_Count_Edit;
            var WeekEnd_Count = WeekEnd_Count_Edit;
            console.log(WeekDay_Count,"WeekDay_Count In partial Status");
            console.log(WeekEnd_Count,"WeekEnd_Count In partial Status");
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if (TotalLoa_Edit >= Total_Count) {
                console.log('IF part of DoapproveCancellation');
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //  SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate,Boatresults.WinterSeason_EDate, start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return
                        }
                        let cancelDays = await getAllCanceledDates(start_Date, end_Date, Newstartdate, Newenddate);

                        
                        

                        if (isAvailableDay.type =="summer")//check Date Between Summer Dates
                        {

                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('in Partial Sattuas')
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDay.type)
                           

                        }
                        else if(isAvailableDay.type =="winter"){


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss');
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDay.type);
                           



                        }

                        else if(isAvailableDay.type =="both"){

                            
                            
                            var cancel_start = cancelDays[0].split("/").reverse().join("-");
                            var Cancel_Start_date = new Date(cancel_start);
                            Cancel_Start_date.toISOString();

                            var cancel_end = cancelDays[(cancelDays.length)-1].split("/").reverse().join("-");
                            var Cancel_End_date = new Date(cancel_end);
                            Cancel_End_date.toISOString();
                           
                           // let text = d.toISOString();
                           console.log(Cancel_Start_date,Cancel_End_date,"------------");
           
                            let stopExecutionboth = { stop: false }
                            let isAvailableDayBoth = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate,Boatresults.WinterSeason_EDate, Cancel_Start_date,Cancel_End_date).catch((error) => {
                                console.log(error)
                                stopExecutionboth = error
                            })
    
    
                            if (stopExecutionboth.stop) {
                                return
                            }
                           
                            
                            if(isAvailableDayBoth.type == "summer"){

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Summer sucesss');
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, Newstartdate, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDayBoth.type);
                           

                            }else if(isAvailableDayBoth.type == "winter") {
                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss');
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, Newstartdate, Newenddate,anni_month);
                               else


                            var x =  AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDayBoth.type);
                           
                            }

                            else{

                                let stopExecution_both = { stop: false }
                            let isAvailableDay_Both = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate,Boatresults.WinterSeason_SDate,Boatresults.WinterSeason_EDate, Newstartdate,Newenddate).catch((error) => {
                                console.log(error)
                                stopExecution_both = error
                            })
    
    
                            if (stopExecution_both.stop) {
                                return
                            }

                             if(isAvailableDay_Both.type == 'summer'){

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count
                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Summer sucesss');
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, Newstartdate, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDay_Both.type);
                           


                             }
                             else{

                                Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {
                                    console.log('Winter sucesss');
                                });

                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, Newstartdate, Newenddate,anni_month);
                               else


                            var x =  AddBookingDays_Owner(Boat_id, Owner_id, Newstartdate, Newenddate, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year,isAvailableDay_Both.type);
                           

                             }

                            }


                           

                        }
                    })
                })
                let getcaceldates_only = getAllCanceledDates(response.start, response.end, Newstartdate, Newenddate);
                
                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        Updated_time: moment(Date.now()),
                        BookingStatus: "PartiallyAccepted",
                        PartialCancellation_Status: 0,
                        Approved_LOA: Total_Count,

                    },

                    function (err, data) {
                        if (err) {
                            return
                        }
                        else {
                            let ownerPartial = new OwnerPartialCancelation();
                            ownerPartial.Scheduleid = scheduleid;
                            ownerPartial.Owner_Id = response.User_Id;
                            ownerPartial.Boat_Id = Boat_id;
                            ownerPartial.Boat_Name = response.Boat_Name;
                            ownerPartial.cancaledDays = getcaceldates_only;
                            ownerPartial.Approved_LOA = Total_Count;
                            ownerPartial.WeekDay_Count = response.WeekDay_Count;
                            ownerPartial.WeekEnd_Count = response.WeekEnd_Count;
                            ownerPartial.WeekDay_Count_Edit = response.WeekDay_Count_Edit;
                            ownerPartial.WeekEnd_Count_Edit = response.WeekEnd_Count_Edit;
                            ownerPartial.Booking_ID = response.Booking_ID;
                            ownerPartial.BookingStatus = "PartiallyAccepted";
                            ownerPartial.PartialCancellation_Status = 0;
                            ownerPartial.Total_Edit_Loa = response.Total_Edit_Loa;
                            ownerPartial.save(function (err, saved) {

                                if (err) return;

                            });


                        }
                    });





            }
            else {
                return

            }
        }
        else {

             console.log('Else part of DoapproveCancellation');
            var WeekDay_Count = WeekDay_Count_Edit;
            var WeekEnd_Count = WeekEnd_Count_Edit;
            var Total_Count = 0;
            Total_Count = WeekDay_Count + WeekEnd_Count;

            if (Loa >= Total_Count) {
                Boats.findById({ _id: mongoose.Types.ObjectId(Boat_id) }).then(response => {
                    var SummerWeekdays = response.Summer_WeekDays;
                    var SummerWeekendDays = response.Summer_WeekEndDays;
                    var WinterWeekDays = response.Winter_WeekDays;
                    var WinterweekendDays = response.Winter_WeekEndDays;

                    //SummerSeason_SDate:{$lte:Start_final_withoutTime},SummerSeason_EDate:{$gte:End_final_withoutTime}
                    //is active is not here before

                    Boats.findOne({ _id: Boat_id, IsActive: true }).then(async (Boatresults) => {
                        //console.log(Boatresults)

                        let stopExecution = { stop: false }
                        let isAvailableDay = await checkIfIncludedInSeason(Boat_id, Owner_id, Boatresults.SummerSeason_SDate, Boatresults.SummerSeason_EDate, start_Date, end_Date).catch((error) => {
                            console.log(error)
                            stopExecution = error
                        })


                        if (stopExecution.stop) {
                            return
                        }

                        if (isAvailableDay && isAvailableDay.status)//check Date Between Summer Dates
                        {



                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Summer_WeekDays: SummerWeekdays - WeekDay_Count,
                                    Summer_WeekEndDays: SummerWeekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('else Of partial Status')
                                });
                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else

                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                          



                        }
                        else {


                            Boats.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(Boat_id) },
                                {

                                    Winter_WeekDays: WinterWeekDays - WeekDay_Count,
                                    Winter_WeekEndDays: WinterweekendDays - WeekEnd_Count

                                },
                                { new: true },
                                function (err, data) {

                                    console.log('Winter sucesss')
                                });
                                
                                if(MonthBookingStatus ==1)

                                var bookedDaysOf = AddDiffrentYearDays(Boat_id, Owner_id, start_Date, end_Date,anni_month);
                               else


                            var x = AddBookingDays_Owner(Boat_id, Owner_id, start_Date, end_Date, Total_Count, WeekDay_Count, WeekEnd_Count,exp_year)
                            


                        }
                    })
                })


                Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
                    {

                        IsActive: false,
                        Updated_time: moment(Date.now()),
                        Approved_LOA: Loa,
                        BookingStatus: "Accepted",


                    },

                    function (err, data) {
                        if (err) {
                            return
                        }
                        else {

                            let ownerPartial = new OwnerPartialCancelation();
                            ownerPartial.Scheduleid = scheduleid;
                            ownerPartial.Boat_Id = Boat_id;
                            ownerPartial.Owner_Id = response.User_Id;
                            ownerPartial.Boat_Name = response.Boat_Name;
                            ownerPartial.cancaledDays = getcaceldates_only;
                            ownerPartial.Approved_LOA = Loa;
                            ownerPartial.WeekDay_Count = response.WeekDay_Count;
                            ownerPartial.WeekEnd_Count = response.WeekEnd_Count;
                            ownerPartial.WeekDay_Count_Edit = response.WeekDay_Count_Edit;
                            ownerPartial.WeekEnd_Count_Edit = response.WeekEnd_Count_Edit;
                            ownerPartial.Booking_ID = response.Booking_ID;
                            ownerPartial.BookingStatus = "Accepted";
                            ownerPartial.PartialCancellation_Status = response.PartialCancellation_Status;
                            ownerPartial.Total_Edit_Loa = response.Total_Edit_Loa;
                            ownerPartial.save(function (err, saved) {
                                if (err) {
                                    return;
                                }

                            });
                            return
                        }
                    });
            }
            else {
                return
            }
        }
    })

}

//do approve cancellation end


const IsLOAIncluded = (req, res) => {
   
    console.log(req.body);

    return new Promise(async (resolve, reject) => {

        let dataValidation = await validateIsLOAInclued(req.body);

        if (dataValidation.error) {
            let message = dataValidation.error.details[0].message.replace(/"/g, "");
            return reject({ status: false, message });
        }

        let { bookingId, incomingStartDate, incomingEndDate } = req.body

        let LoaYear =(new Date(incomingStartDate)).getFullYear();
       console.log(LoaYear,"LoaYear");

        const originalBooking = await Schedule.findOne({ _id: bookingId, IsActive: true }).catch((error) => {
            console.log(error)
            return reject({ status: false, message: 'Something went wrong try again.Booking.' })
        })

        if (!originalBooking) return reject({ status: false, message: 'Permission Denied' });

        let originalTotalDays = moment(new Date(originalBooking.end)).diff(moment(new Date(originalBooking.start)), "days") + 1;
        //number of days between new incoming start and end date
        let incomingTotalDays = moment(new Date(incomingEndDate)).diff(moment(new Date(incomingStartDate)), "days") + 1

        let noOfcancellation = originalTotalDays - incomingTotalDays;

      /// check for free cancelation **//

      let getcountfree = await FreePartialCancel.findOne({ Boat_Id: originalBooking.Boat_Id, Owner_Id: originalBooking.User_Id,Year:LoaYear}).catch((error) => {console.log(error)});
      if(getcountfree == null){

        let getFreeCountpartial = await partialCancel.findOne({IsActive:true}).catch((error) => {console.log(error)});
        var noOfLOA = noOfcancellation-getFreeCountpartial.No_PartialCancellation;
        var remcount = getFreeCountpartial.No_PartialCancellation-noOfcancellation;
        let updateMangeBoat = await manageBoat.updateOne({Boat_Id: originalBooking.Boat_Id, Owner_Id: originalBooking.User_Id, IsActive: true,}, { $set: { No_PartialCancellation: getFreeCountpartial.No_PartialCancellation } }).catch((error) => console.log(error));
        var freecancel = new FreePartialCancel();
        freecancel.Boat_Id= originalBooking.Boat_Id;
        freecancel.Owner_Id = originalBooking.User_Id;
        freecancel.Year = LoaYear;
        if(remcount>=0)
        freecancel.Freecount = remcount;
        else
        freecancel.Freecount = 0;
        freecancel.save(function (err, saved) {
            if (err) {
                return;
            }

        });


      }else{

        let numberOfPartialCancellation = await manageBoat.findOne({ Boat_Id: originalBooking.Boat_Id, Owner_Id: originalBooking.User_Id, IsActive: true }).catch((error) => {
            console.log(error)
            return reject({ status: false, message: 'Something went wrong try again.parialcancel' })
        })

        noOfLOA = noOfcancellation-numberOfPartialCancellation.No_PartialCancellation;

       if(getcountfree.Freecount >0){
           if(noOfcancellation >= getcountfree.Freecount)
          var remaingCount = 0;
           else
          var remaingCount = Math.abs(noOfLOA);
          
        let updateFreecount = await FreePartialCancel.updateOne({ Owner_Id: originalBooking.User_Id, Boat_Id: originalBooking.Boat_Id, Year: LoaYear }, { $set: { Freecount: remaingCount } }).catch((error) => console.log(error));
       

       }

        

       }



        /*let numberOfPartialCancellation = await manageBoat.findOne({ Boat_Id: originalBooking.Boat_Id, Owner_Id: originalBooking.User_Id, IsActive: true }).catch((error) => {
            console.log(error)
            return reject({ status: false, message: 'Something went wrong try again.' })
        })*/

        //let noOfLOA = noOfcancellation - numberOfPartialCancellation.No_PartialCancellation

        //if LOA



        if (noOfLOA > 0) {

         
          
          
            let UseremovedDates = functionLOADates(originalBooking.start, originalBooking.end, incomingStartDate, incomingEndDate);
            //console.log(UseremovedDates[0],"UseremovedDates");

            var BulKdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            var dayName=[];
            var weekendarr=[];
            var weekdayarr=[];
            let index = UseremovedDates.length - 1;
            console.log(noOfLOA);
            for(i=0;i<noOfLOA;i++){

                var knowDay = new Date(UseremovedDates[index]);
                if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
                weekendarr.push( BulKdays[knowDay.getDay()]);
                else
                weekdayarr.push(BulKdays[knowDay.getDay()]);
                index--;
              
            }
           
          



           

            return resolve({ status: true, message: "LOA is included.", IsLOAIncluded: true, LOAInWeekday:(weekdayarr.length), LOAInWeekend:(weekendarr.length) })

        }


        return resolve({ status: true, message: "LOA is not included.", IsLOAIncluded: false })

    }).then((response) => {
        return res.json(response)
    }).catch((error) => {
        return res.json(error)
    })
}


let getWeekDaysCancel = function(oldStartDate, OldEnddate, NewStartDate, NewEnddate,LOA){
    
    let UseremovedDates = functionLOADates(oldStartDate, OldEnddate, NewStartDate, NewEnddate);
  // console.log(UseremovedDates,"UseremovedDates-------------------------");
    var BulKdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    var dayName=[];
    var weekendarr=[];
    var weekdayarr=[];
    let index = (UseremovedDates.length)-1
    for(i=0;i<LOA;i++){

        var knowDay = new Date(UseremovedDates[index]);
        if((BulKdays[knowDay.getDay()] == "Sunday")||(BulKdays[knowDay.getDay()] == "Saturday"))
        weekendarr.push( BulKdays[knowDay.getDay()]);
        else
        weekdayarr.push(BulKdays[knowDay.getDay()]);
        index --;
      
    }
    //console.log( weekdayarr.length,"weekdayarrLength in Getweekdaycancel");
    //console.log( weekendarr.length,"weekendarrLength in Getweekdaycancel");
    let outPutWeekday = weekdayarr.length;
    let outPutWeekend = weekendarr.length;
   
    return {outPutWeekday,outPutWeekend}
}


const checkPrelaunchLaunchConsecutiveDays = (boatLaunchDate, incomingBookingStart, incomingBookingEnd, Boat_id, Owner_id, isEditSchedule = false, editSchedulerIdOne, editSchedulerIdTwo) => {

    console.log("'Entered in checkPrelaunchLaunchConsecutiveDays block'");

    return new Promise(async (resolve, reject) => {

        incomingBookingStart = new Date(incomingBookingStart)
        incomingBookingEnd = new Date(incomingBookingEnd)

      

        let allDaysBetweenCanceldates = getDaysBetweenDates(incomingBookingStart, incomingBookingEnd);



        if (allDaysBetweenCanceldates.length != 0) {

            let queryToCheckCancelDatesBooking = []

            allDaysBetweenCanceldates.map((date) => queryToCheckCancelDatesBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }));

            const canceldStatus = await Schedule.findOne({ 'Cancelled_Status': 1, User_Id: Owner_id, Boat_Id: Boat_id, $or: queryToCheckCancelDatesBooking })

            if (canceldStatus) {

                var todaysdate = moment();

                var canceldate = moment(canceldStatus.Updated_time)
                var dif = moment.duration(todaysdate.diff(canceldate));

                var Hrdif = Math.round(dif.asHours());

                if (Hrdif < 24) {
                    return reject({
                        status: true,
                        message: 'You cannot book theses dates. A booking was cancelled for these dates within the last 24 hours. Please wait until this window has passed to book these dates again.'
                    })
                }

            }



        }



        const launchDate = new Date(boatLaunchDate).getTime();
        let isBookingBeforeLaunchDate = false;


        //get all dates between start and end date
        const allIncomingBookingDays = getDaysBetweenDates(incomingBookingStart, incomingBookingEnd).map((date) => new Date(date));

        //check if any of incoming booking is included before launch date 
        allIncomingBookingDays.map((date) => {
            if (date.getTime() < launchDate) {
                isBookingBeforeLaunchDate = true
            }
        })

        if (isBookingBeforeLaunchDate) {

            console.log("incomingBookingStart:" + incomingBookingStart + "@" + "incomingBookingEnd:" + incomingBookingEnd);

            //check if booking start date and end date month is same if it is not change that booking to two different booking from two month 
            // in order to check consecutive days it will not be saved as two booking 

            const bookedDaysStartAndEndDates = []

            const bookingStartDateMonth = moment(new Date(incomingBookingStart)).month();
            const bookingEndDateMonth = moment(new Date(incomingBookingEnd)).month();

            console.log(bookingStartDateMonth, "bookingStartDateMonth")
            console.log(bookingEndDateMonth, "bookingEndDateMonth")

            if (bookingStartDateMonth === bookingEndDateMonth) {
                bookedDaysStartAndEndDates.push({
                    startDate: incomingBookingStart,
                    endDate: incomingBookingEnd,
                    bookedMonth: moment(incomingBookingStart).month()
                })
            } else {

                console.log("booking start and end month does not match")

                //map through all incoming booking and filter booking based on month

                let boookingOnfirstMonth = [];
                let bookingOnSecondMonth = [];

                allIncomingBookingDays.map((date) => {
                    if (bookingStartDateMonth === moment(date).month()) {
                        boookingOnfirstMonth.push(date)
                    } else {
                        bookingOnSecondMonth.push(date)
                    }
                })

                bookedDaysStartAndEndDates.push(
                    {
                        startDate: boookingOnfirstMonth[0],
                        endDate: boookingOnfirstMonth[boookingOnfirstMonth.length - 1],
                        bookedMonth: moment(boookingOnfirstMonth[0]).month()
                    },
                    {
                        startDate: bookingOnSecondMonth[0],
                        endDate: bookingOnSecondMonth[bookingOnSecondMonth.length - 1],
                        bookedMonth: moment(bookingOnSecondMonth[0]).month()
                    }
                )

            }

            console.log(bookedDaysStartAndEndDates, "bookedDaysStartAndEndDates")

            for (const { startDate, endDate, bookedMonth } of bookedDaysStartAndEndDates) {
                //get total booking on incoming boat by incoming owner in that month

                const startOfMonth = new Date(moment(new Date(startDate)).startOf('month').utc(true));
                const endOfMonth = new Date(moment(new Date(endDate)).endOf('month').utc(true));

                let totalDaysBookedCount = moment(new Date(endDate)).diff(moment(new Date(startDate)), "days") + 1;
                let incomingBookingWeekdaysAndWeekendsCount = getNumberOfWeekDaysAndWeekendsFromDates(getDaysBetweenDates(startDate, endDate))
                let totaWeekDaysBooked = incomingBookingWeekdaysAndWeekendsCount.numberOfWeekDays;
                let totalWeekendBooked = incomingBookingWeekdaysAndWeekendsCount.numberOfWeekEnds;

                //query to get all bboking in the month

                let queryToGetBooking = []

                let allDaysBetweenMonthStartAndEndDate = getDaysBetweenDates(startOfMonth, endOfMonth).map((date) => new Date(date));

                allDaysBetweenMonthStartAndEndDate.map((date) => queryToGetBooking.push({ $and: [{ start_NoTime: { $lte: new Date(date) } }, { end_NoTime: { $gte: new Date(date) } }] }))


                //all normal booking

                //const allNormalBookings = await Schedule.find({...(isEditSchedule && {$and:[{_id:{$ne:mongoose.Types.ObjectId(editSchedulerIdOne)}},{_id:{$ne:mongoose.Types.ObjectId(editSchedulerIdTwo)}}]}),Boat_Id:Boat_id,User_Id:Owner_id,IsActive:true,$or:queryToGetBooking}).catch((error)=> console.log(error))
                const allNormalBookings = await Schedule.find({ ...(isEditSchedule && { $and: [{ _id: { $ne: mongoose.Types.ObjectId(editSchedulerIdOne) } }, { _id: { $ne: mongoose.Types.ObjectId(editSchedulerIdTwo) } }] }), Boat_Id: Boat_id, User_Id: Owner_id, delStatus: 0, $or: queryToGetBooking }).catch((error) => console.log(error));

                console.log(allNormalBookings.length, "allNormalBookings.length")

                if (allNormalBookings.length) {
                    allNormalBookings.map((normalBooking) => {

                        //check if any of the booking does not included in the same month as booked month then remove it from count
                        let filteredBookingDaysBasedOnBookedMonth = []
                        getDaysBetweenDates(normalBooking.start_NoTime, normalBooking.end_NoTime).map((date) => {

                            console.log(bookedMonth, "bookedMonth")
                            console.log(moment(new Date(date)).month(), "moment(new Date(date)).month()")

                            if (moment(new Date(date)).month() === bookedMonth) {
                                filteredBookingDaysBasedOnBookedMonth.push(new Date(date))
                            }
                        });

                        console.log(filteredBookingDaysBasedOnBookedMonth, "filteredBookingDaysBasedOnBookedMonth")


                        normalBooking.start_NoTime = filteredBookingDaysBasedOnBookedMonth[0];
                        normalBooking.end_NoTime = filteredBookingDaysBasedOnBookedMonth[filteredBookingDaysBasedOnBookedMonth.length - 1]

                        console.log(normalBooking.start_NoTime, "normalBooking.start_NoTime")
                        console.log(normalBooking.end_NoTime, "normalBooking.end_NoTime")

                        totalDaysBookedCount += moment(new Date(normalBooking.end_NoTime)).diff(moment(new Date(normalBooking.start_NoTime)), "days") + 1
                        let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(getDaysBetweenDates(normalBooking.start_NoTime, normalBooking.end_NoTime))
                        totaWeekDaysBooked += numberOfWeekDays;
                        totalWeekendBooked += numberOfWeekEnds;
                    })
                }

                //all standby booking

                const allStandByBookings = await AddStandByBooking.find({ ...(isEditSchedule && { $and: [{ _id: { $ne: mongoose.Types.ObjectId(editSchedulerIdOne) } }, { _id: { $ne: mongoose.Types.ObjectId(editSchedulerIdTwo) } }] }), Boat_Id: Boat_id, User_Id: Owner_id, IsActive: true, showThisBookingInCalendar: true, $or: queryToGetBooking }).catch((error) => console.log(error))
                //const allStandByBookings = await AddStandByBooking.find({...(isEditSchedule && {$and:[{_id:{$ne:mongoose.Types.ObjectId(editSchedulerIdOne)}},{_id:{$ne:mongoose.Types.ObjectId(editSchedulerIdTwo)}}]}),Boat_Id:Boat_id,User_Id:Owner_id,delStatus:0,showThisBookingInCalendar:true,$or:queryToGetBooking}).catch((error)=> console.log(error))

                if (allStandByBookings.length) {
                    allStandByBookings.map((normalBooking) => {

                        //check if any of the booking does not included in the same month as booked month then remove it from count
                        let filteredBookingDaysBasedOnBookedMonth = []
                        getDaysBetweenDates(normalBooking.start_NoTime, normalBooking.end_NoTime).map((date) => {
                            if (moment(new Date(date)).month() === bookedMonth) filteredBookingDaysBasedOnBookedMonth.push(new Date(date))
                        });

                        normalBooking.start_NoTime = filteredBookingDaysBasedOnBookedMonth[0];
                        normalBooking.end_NoTime = filteredBookingDaysBasedOnBookedMonth[filteredBookingDaysBasedOnBookedMonth.length - 1]

                        totalDaysBookedCount += moment(new Date(normalBooking.end_NoTime)).diff(moment(new Date(normalBooking.start_NoTime)), "days") + 1
                        let { numberOfWeekDays, numberOfWeekEnds } = getNumberOfWeekDaysAndWeekendsFromDates(getDaysBetweenDates(normalBooking.start_NoTime, normalBooking.end_NoTime))
                        totaWeekDaysBooked += numberOfWeekDays;
                        totalWeekendBooked += numberOfWeekEnds;
                    })
                }




                console.log(totalDaysBookedCount, "totalDaysBookedCount")
                console.log(totaWeekDaysBooked, "totaWeekDaysBooked")
                console.log(totalWeekendBooked, "totalWeekendBooked")

                let beforeLaunchLimit = await PreLaunchAndLaunchBookingDays.findOne({ Boat_Id: Boat_id, IsActive: true }).catch((error) => console.log(error));

                if (!beforeLaunchLimit) {
                    return reject({
                        status: false,
                        message: "Set conceutive days before making any booking ."
                    })
                }

                if ((totalDaysBookedCount > beforeLaunchLimit.Booking_Days || totaWeekDaysBooked > beforeLaunchLimit.No_Of_WeekDays || totalWeekendBooked > beforeLaunchLimit.No_Of_WeekEndDays)) {
                    return reject({
                        status: false,
                        message: "Allowed Booking Days Exceeds max count Between Launch Date And Pre-Launch Date."
                    })
                }
            }


        }
        return resolve({ status: true, message: "Incoming booking does not exceed consecutive day.", isBookingBeforeLaunchDate })
    })
}


const SaveSchedule = async (data,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded) => {

    return new Promise(async (resolve, reject) => {

        let Add_Schedule = new Schedule({
            Boat_Id: mongoose.Types.ObjectId(data.Boat_Id),
            Booking_ID: globalbookingid,
            Boat_Name: data.Boat_Name,
            Total_DaysBooked: Total_Count,
            WeekDay_Count: WeekDay_Count,
            WeekEnd_Count: WeekEnd_Count,
            calendarId: mongoose.Types.ObjectId(data.calendarId),
            title: data.title,
            body: data.body,
            start: data.start,
            end: data.end,
            start_NoTime: Start_final,
            end_NoTime: End_final,
            goingDuration: data.goingDuration,
            comingDuration: data.comingDuration,
            isAllDay: data.isAllDay,
            category: data.category,
            dueDateClass: data.dueDateClass,
            location:  data.location,
            attendees: data.attendees,
            recurrenceRule: data.recurrenceRule,
            isPending: data.isPending,
            isFocused: data.isFocused,
            isVisible: data.isVisible,
            isReadOnly: data.isReadOnly,
            isPrivate: data.isPrivate,
            Is_StandByBooking: data.Is_StandByBooking,
            Check_Status: data.Check_Status,
            commends: data.commends,
            color: data.color,
            bgColor: data.bgColor,
            dragBgColor: data.dragBgColor,
            borderColor: data.borderColor,
            customStyle: data.customStyle,
            raw: data.raw,
            state: data.state,
            User_RoleType: data.User_RoleType,
            User_Id: mongoose.Types.ObjectId(data.User_Id),
            Admin_Id: mongoose.Types.ObjectId(data.Admin_Id),
            Status: Module_status,
            IsActive: data.IsActive,
            Current_Time: moment(Date.now()),
            Updated_time: moment(Date.now()),
            Total_DaysBooked_Reassign: Total_Count,
            WeekDay_Count_Reassign: WeekDay_Count,
            WeekEnd_Count_Reassign: WeekEnd_Count,
            Booking_Type: bookingType,
            isBookingPending: isBookingPending,
            isNextDayBookingIncluded: isNextDayBookingIncluded
          
          });
          Add_Schedule.save()
          .then(async (response) => {
            
              return resolve({ status:true,scheduleid: response._id});
          })
          .catch(error => {
            return reject({
                status: false,
                message: error
            })
            
          })

    });

   

}
const SaveStandby = async(data,globalbookingid,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,standByBookingId)=>{
    return new Promise(async (resolve, reject) => {
    let Add_Schedule = new Schedule({
        Boat_Id: mongoose.Types.ObjectId(data.Boat_Id),
        Booking_ID: globalbookingid,
        Boat_Name: data.Boat_Name,
        Total_DaysBooked: Total_Count,
        calendarId: mongoose.Types.ObjectId(data.calendarId),
        title: data.title,
        body: data.body,
        start: data.start,
        end: data.end,
        start_NoTime: Start_final,
        end_NoTime: End_final,
        goingDuration: data.goingDuration,
        comingDuration: data.comingDuration,
        isAllDay: data.isAllDay,
        category: data.category,
        dueDateClass: data.dueDateClass,
        location: data.location,
        attendees: data.attendees,
        recurrenceRule: data.recurrenceRule,
        isPending: data.isPending,
        isFocused: data.isFocused,
        isVisible: data.isVisible,
        isReadOnly: data.isReadOnly,
        isPrivate: data.isPrivate,
        Is_StandByBooking: data.Is_StandByBooking,
        Check_Status: data.Check_Status,
        commends: data.commends,
        color: data.color,
        bgColor: data.bgColor,
        dragBgColor: data.dragBgColor,
        borderColor: data.borderColor,
        customStyle: data.customStyle,
        raw: data.raw,
        state: data.state,
        User_RoleType: data.User_RoleType,
        User_Id: mongoose.Types.ObjectId(data.User_Id),
        Admin_Id: mongoose.Types.ObjectId(data.Admin_Id),
        Status: Module_status,
        IsActive: data.IsActive,
        Current_Time: moment(Date.now()),
        Updated_time: moment(Date.now()),
        Booking_Type: bookingType,
        isBookingPending: isBookingPending,
        isNextDayBookingIncluded: isNextDayBookingIncluded,
        WeekDay_Count,
        WeekEnd_Count,
        isStandByBookingIncluded: true,
        standByBookingId
      });
      Add_Schedule.save()
      .then(async (response) => {
        
          return resolve({ status:true,scheduleid: response._id});
      })
      .catch(error => {
        return reject({
            status: false,
            message: error
        })
    });
});
      
}
const UpdateSchedule = async(scheduleid,globalbookingid,data,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,bookingType,isBookingPending,isNextDayBookingIncluded,StartDate_Cancelled,end_date_old,cancaledDays)=>{

    return new Promise(async(resolve,reject)=>{
        
        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
        {

            Boat_Id: mongoose.Types.ObjectId(data.Boat_Id),
            Booking_ID: globalbookingid,
            Boat_Name: data.Boat_Name,
            Total_DaysBooked: Total_Count,
            WeekDay_Count: WeekDay_Count,
            WeekEnd_Count: WeekEnd_Count,
            calendarId: mongoose.Types.ObjectId(data.calendarId),
            title: data.title,
            body: data.body,
            start: data.start,
            end: data.end,
            start_NoTime: Start_final,
            end_NoTime: End_final,
            goingDuration: data.goingDuration,
            comingDuration: data.comingDuration,
            isAllDay: data.isAllDay,
            category: data.category,
            dueDateClass: data.dueDateClass,
            location: data.location,
            attendees: data.attendees,
            recurrenceRule: data.recurrenceRule,
            isPending: data.isPending,
            isFocused: data.isFocused,
            isVisible: data.isVisible,
            isReadOnly: data.isReadOnly,
            isPrivate: data.isPrivate,
            Is_StandByBooking: data.Is_StandByBooking,
            Check_Status: data.Check_Status,
            commends: data.commends,
            color: data.color,
            bgColor: data.bgColor,
            dragBgColor: data.dragBgColor,
            borderColor: data.borderColor,
            customStyle: data.customStyle,
            raw: data.raw,
            state: data.state,
            User_RoleType: data.User_RoleType,
            User_Id: mongoose.Types.ObjectId(data.User_Id),
            Admin_Id: mongoose.Types.ObjectId(data.Admin_Id),
            Status: Module_status,
            IsActive: data.IsActive,
            Current_Time: moment(Date.now()),
            Updated_time: moment(Date.now()),
            start_CancelledDate: StartDate_Cancelled,
            end_CancelledDate: end_date_old,
            Booking_Type: bookingType,
            cancaledDays,
            isBookingPending: isBookingPending,
            isNextDayBookingIncluded: isNextDayBookingIncluded

        },async function (err, data) {

            return resolve({ status:true,data: data});
        }).catch(error => {
            return reject({
                status: false,
                message: error
            })
            
          })

    });
}
const UpdateScheduleEdit = async(scheduleid,globalbookingid,data,Total_Count,WeekDay_Count,WeekEnd_Count,Start_final,End_final,Module_status,isBookingPending,isNextDayBookingIncluded,startdate,enddate)=>{

    return new Promise(async(resolve,reject)=>{
        
        Schedule.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(scheduleid) },
        {

            Boat_Id: mongoose.Types.ObjectId(data.Boat_Id),
            Booking_ID: globalbookingid,
            Boat_Name: data.Boat_Name,
            Total_DaysBooked: Total_Count,
            calendarId: mongoose.Types.ObjectId(data.calendarId),
            title: data.title,
            body: data.body,
            start: startdate,
            end: enddate,
            start_NoTime: Start_final,
            end_NoTime: End_final,
            goingDuration: data.goingDuration,
            comingDuration: data.comingDuration,
            isAllDay: data.isAllDay,
            category: data.category,
            dueDateClass: data.dueDateClass,
            location: data.location,
            attendees: data.attendees,
            recurrenceRule: data.recurrenceRule,
            Is_StandByBooking: data.Is_StandByBooking,
            Check_Status: data.Check_Status,
            commends:data.commends,
            isPending: data.isPending,
            isFocused:data.isFocused,
            isVisible: data.isVisible,
            isReadOnly: data.isReadOnly,
            isPrivate: data.isPrivate,
            color: data.color,
            bgColor: data.bgColor,
            dragBgColor: data.dragBgColor,
            borderColor: data.borderColor,
            customStyle: data.customStyle,
            raw: data.raw,
            state: data.state,
            User_RoleType: data.User_RoleType,
            User_Id: mongoose.Types.ObjectId(data.User_Id),
            Admin_Id: mongoose.Types.ObjectId(data.Admin_Id),
            Status: Module_status,
            IsActive: data.IsActive,
            Current_Time: moment(Date.now()),
            Updated_time: moment(Date.now()),
            isBookingPending: isBookingPending,
            isNextDayBookingIncluded: isNextDayBookingIncluded

        },async function (err, data) {

            return resolve({ status:true,data: data});
        }).catch(error => {
            return reject({
                status: false,
                message: error
            })
            
          })

    });
}
const SendMailToCustomer = async(Email,First_Name,Boat_Name,start_Date,start,end)=>{

const emailState = 'Successfully Booked.';
const emailContent = `Dear ${First_Name},<p> Your booking on ${Boat_Name} at ${getCurrentTimeFormattedDate(start_Date)+" 9:00 AM"} has been sucessfully added by the Smart Boating Team <p>`;
const emailContentAdmin = `Dear Adminsistrator,<p>The Smart Boating Team has successfully created a booking for ${First_Name} on ${Boat_Name} at ${getCurrentTimeFormattedDate(start_Date)+" 9:00 AM"}</p>`
const emailDetailName = 'Booking Details'
const emailDetails = [
    { key: 'Boat Name', value: Boat_Name },
    { key: 'Booking Date', value: getCurrentTimeFormattedDate(start) + " 9:00 AM to " + getCurrentTimeFormattedDate(end)+" 5:00 PM" },
];
const emailNameAndLink = {
    name: 'Booking Link',
    link: `${process.env.CLIENT_URL}/boat-bookings`
}


var mailOptions = {

    from: "noreply.smartboatbooking@gmail.com",
    to: Email,
    subject: 'Successfully Booked',
    html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)
};

transporter.sendMail(mailOptions, function (error, info) {

});

var mailOptionsAdmin = {

    from: "noreply.smartboatbooking@gmail.com",
    to: "admin@smartboating.com.au",
    subject: 'Successfully Booked',
    html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
};

transporter.sendMail(mailOptionsAdmin, function (error, info) {

});
//mail

return true;
}
const SendUpdateMailToCustomer = async(Email,First_Name,Boat_Name,start_Date_New,end_Date_New)=>{
    //mail

    const emailState = 'Successfully Edited.';
    const emailContent = `Dear ${First_Name}, <p>Your booking on ${Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 9:00 AM"} has been succesfully edited by the Smart Boating Team</p>`;
    const emailContentAdmin = `Dear Adminsistrator,<p>The Smart Booking Team has successfully edited a booking for ${First_Name} on ${Boat_Name} at ${getCurrentTimeFormattedDate(start_Date_New)+" 5:00 PM"}</p>`
    const emailDetailName = 'Booking Details'
    const emailDetails = [
        { key: 'Boat Name', value: Boat_Name },
        { key: 'Booking Date', value: getCurrentTimeFormattedDate(start_Date_New) + " 9:00 AM to " + getCurrentTimeFormattedDate(end_Date_New)+" 5:00 PM" },
    ];
    const emailNameAndLink = {
        name: 'Login Link',
        link: `${process.env.CLIENT_URL}/boat-bookings`
    }

    var mailOptions = {

        from: "noreply.smartboatbooking@gmail.com",
        to: Email,
        //to: "bjibin3@gmail.com",
        subject: 'Successfully Edited',
        html: getEmailTemplate(emailState, emailContent, emailDetailName, emailDetails, emailNameAndLink)



    };

    transporter.sendMail(mailOptions, function (error, info) {

    });

    var mailOptionsAdmin = {

        from: "noreply.smartboatbooking@gmail.com",
        to: "admin@smartboating.com.au",
        subject: 'Successfully Edited',
        html: getEmailTemplate(emailState, emailContentAdmin, emailDetailName, emailDetails, emailNameAndLink)
    };

    transporter.sendMail(mailOptionsAdmin, function (error, info) {



    });
    //mail

    return true;

}
module.exports = {
    AddSchedule,
    EditSchedule,
    DeleteSchedule,
    UpdateSchedule,
    UpdateScheduleEdit,
    ViewAllSchedule,
    GetBoatNames,
    ViewCancelledBooking,
    ViewCancelledBookingNew,
    ApproveCancellationNew,
    ApproveCancellation,
    ViewBookingDetailsWithBoatAndOwner,
    AddDiffrentYearDays,
    AddBookingDays_Owner,
    AddDiffrentYearDaysEdit,
    AddDiffrentYearDaysEditMerge,
    GetAllPendingDaysOfOwner,
    StandByBooking_AcceptReject,
    ViewBookingDetailsFilterByDates,
    AddSpecialDay,
    ViewCancelledBookingById,
    ViewBookingById,
    DeleteScheduleForOwner,
    AddScheduleStandByBooking,
    ViewAllScheduleActiveAndNonActive,
    GetAllMaintenanceSchedule,
    GetAllCleaningScheduleReport,
    checkIfIncludedInSeason,
    IsLOAIncluded,
    checkPrelaunchLaunchConsecutiveDays,
    SaveSchedule,
    SaveStandby,
    SendMailToCustomer,
    SendUpdateMailToCustomer,
    Do_approveCancel

}


